//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.Common;
using CloudFoundry.CloudController.V3.Client.Data;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Net.Http;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V3.Client
{
    /// <summary>
    /// ProcessesExperimental Endpoint
    /// </summary>
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public partial class ProcessesExperimentalEndpoint : CloudFoundry.CloudController.V3.Client.Base.AbstractProcessesExperimentalEndpoint
    {
        internal ProcessesExperimentalEndpoint(CloudFoundryClient client) : base()
        {
            this.Client = client;
        }
    }
}

namespace CloudFoundry.CloudController.V3.Client.Base
{
    /// <summary>
    /// Base abstract class for ProcessesExperimental Endpoint
    /// </summary>
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public abstract class AbstractProcessesExperimentalEndpoint : BaseEndpoint
    {
        /// <summary>
        /// Initializes the class
        /// </summary>
        protected AbstractProcessesExperimentalEndpoint()
        {
        }

        /// <summary>
        /// Get Detailed Stats for an App's Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_detailed_stats_for_an_app's_process.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<GetDetailedStatsForAppsProcessResponse>> GetDetailedStatsForAppsProcess(Guid? guid, dynamic type)
        {
            return await GetDetailedStatsForAppsProcess(guid, type, new RequestOptions());
        }

        /// <summary>
        /// Get Detailed Stats for an App's Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_detailed_stats_for_an_app's_process.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<GetDetailedStatsForAppsProcessResponse>> GetDetailedStatsForAppsProcess(Guid? guid, dynamic type, RequestOptions options)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/apps/{0}/processes/{1}/stats", guid, type);
            uriBuilder.Query = options.ToString();
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/json";
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<GetDetailedStatsForAppsProcessResponse>(await response.ReadContentAsStringAsync(), this.Client);
        }

        /// <summary>
        /// Get Detailed Stats for a Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_detailed_stats_for_a_process.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<GetDetailedStatsForProcessResponse>> GetDetailedStatsForProcess(Guid? guid)
        {
            return await GetDetailedStatsForProcess(guid, new RequestOptions());
        }

        /// <summary>
        /// Get Detailed Stats for a Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_detailed_stats_for_a_process.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<GetDetailedStatsForProcessResponse>> GetDetailedStatsForProcess(Guid? guid, RequestOptions options)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/processes/{0}/stats", guid);
            uriBuilder.Query = options.ToString();
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/json";
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<GetDetailedStatsForProcessResponse>(await response.ReadContentAsStringAsync(), this.Client);
        }

        /// <summary>
        /// Terminating a Process instance
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/terminating_a_process_instance.html"</para>
        /// </summary>
        public async Task TerminatingProcessInstance(Guid? guid, int? index)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/processes/{0}/instances/{1}", guid, index);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Delete;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/x-www-form-urlencoded";
            var expectedReturnStatus = 204;
            var response = await this.SendAsync(client, expectedReturnStatus);
        }

        /// <summary>
        /// List all Processes
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/list_all_processes.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllProcessesResponse>> ListAllProcesses()
        {
            return await ListAllProcesses(new RequestOptions());
        }

        /// <summary>
        /// List all Processes
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/list_all_processes.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllProcessesResponse>> ListAllProcesses(RequestOptions options)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = "/v3/processes";
            uriBuilder.Query = options.ToString();
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<ListAllProcessesResponse>(await response.ReadContentAsStringAsync(), this.Client);
        }

        /// <summary>
        /// Get a Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_a_process.html"</para>
        /// </summary>
        public async Task<GetProcessResponse> GetProcess(Guid? guid)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/processes/{0}", guid);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<GetProcessResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// Scaling a Process from its App
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/scaling_a_process_from_its_app.html"</para>
        /// </summary>
        public async Task<ScalingProcessFromItsAppResponse> ScalingProcessFromItsApp(Guid? guid, dynamic type, ScalingProcessFromItsAppRequest value)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/apps/{0}/processes/{1}/scale", guid, type);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Put;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/json";
            client.Content = ((string)JsonConvert.SerializeObject(value)).ConvertToStream();
            var expectedReturnStatus = 202;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<ScalingProcessFromItsAppResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// Terminating a Process instance from its App
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/terminating_a_process_instance_from_its_app.html"</para>
        /// </summary>
        public async Task TerminatingProcessInstanceFromItsApp(Guid? guid, dynamic type, int? index)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/apps/{0}/processes/{1}/instances/{2}", guid, type, index);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Delete;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/x-www-form-urlencoded";
            var expectedReturnStatus = 204;
            var response = await this.SendAsync(client, expectedReturnStatus);
        }

        /// <summary>
        /// Updating a Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/updating_a_process.html"</para>
        /// </summary>
        public async Task<UpdateProcessResponse> UpdateProcess(Guid? guid, UpdateProcessRequest value)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/processes/{0}", guid);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = new HttpMethod("PATCH");
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/json";
            client.Content = ((string)JsonConvert.SerializeObject(value)).ConvertToStream();
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<UpdateProcessResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// List associated processes
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/list_associated_processes.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAssociatedProcessesResponse>> ListAssociatedProcesses(Guid? guid)
        {
            return await ListAssociatedProcesses(guid, new RequestOptions());
        }

        /// <summary>
        /// List associated processes
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/list_associated_processes.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAssociatedProcessesResponse>> ListAssociatedProcesses(Guid? guid, RequestOptions options)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/apps/{0}/processes", guid);
            uriBuilder.Query = options.ToString();
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<ListAssociatedProcessesResponse>(await response.ReadContentAsStringAsync(), this.Client);
        }

        /// <summary>
        /// Get a Process from an App
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/get_a_process_from_an_app.html"</para>
        /// </summary>
        public async Task<GetProcessFromAppResponse> GetProcessFromApp(Guid? guid, dynamic type)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/apps/{0}/processes/{1}", guid, type);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Get;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<GetProcessFromAppResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// Scaling a Process
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/233/processes__experimental_/scaling_a_process.html"</para>
        /// </summary>
        public async Task<ScalingProcessResponse> ScalingProcess(Guid? guid, ScalingProcessRequest value)
        {
            UriBuilder uriBuilder = new UriBuilder(this.Client.CloudTarget);
            uriBuilder.Path = string.Format(CultureInfo.InvariantCulture, "/v3/processes/{0}/scale", guid);
            var client = this.GetHttpClient();
            client.Uri = uriBuilder.Uri;
            client.Method = HttpMethod.Put;
            var authHeader = await BuildAuthenticationHeader();
            if (!string.IsNullOrWhiteSpace(authHeader.Key))
            {
                client.Headers.Add(authHeader);
            }
            client.ContentType = "application/json";
            client.Content = ((string)JsonConvert.SerializeObject(value)).ConvertToStream();
            var expectedReturnStatus = 202;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<ScalingProcessResponse>(await response.ReadContentAsStringAsync());
        }
    }
}
