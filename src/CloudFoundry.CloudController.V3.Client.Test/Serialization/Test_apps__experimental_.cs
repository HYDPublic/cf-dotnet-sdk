//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V3.Client;
using CloudFoundry.CloudController.V3.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace CloudFoundry.CloudController.V3.Test.Serialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsExperimentalTest
    {

        [TestMethod]
        public void TestAssignDropletAsAppsCurrentDropletRequest()
        {
            string json = @"{
  ""droplet_guid"": ""727745b5-8216-41f4-8ef9-cd118c6d0a20""
}";

            AssignDropletAsAppsCurrentDropletRequest request = new AssignDropletAsAppsCurrentDropletRequest();

            request.DropletGuid = new Guid("727745b5-8216-41f4-8ef9-cd118c6d0a20");
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestUpdateAppRequest()
        {
            string json = @"{
  ""name"": ""new_name"",
  ""environment_variables"": {
    ""MY_ENV_VAR"": ""foobar"",
    ""FOOBAR"": ""MY_ENV_VAR""
  },
  ""lifecycle"": {
    ""type"": ""buildpack"",
    ""data"": {
      ""buildpack"": ""http://gitwheel.org/my-app"",
      ""stack"": ""redhat""
    }
  }
}";

            UpdateAppRequest request = new UpdateAppRequest();

            request.Name = "new_name";
            request.EnvironmentVariables = TestUtil.GetJsonDictonary(@"{""MY_ENV_VAR"":""foobar"",""FOOBAR"":""MY_ENV_VAR""}");

            request.Lifecycle = TestUtil.GetJsonDictonary(@"{""type"":""buildpack"",""data"":{""buildpack"":""http://gitwheel.org/my-app"",""stack"":""redhat""}}");

            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestCreateDockerAppRequest()
        {
            string json = @"{""name"":""my_app"",""environment_variables"":{""open"":""source""},""lifecycle"":{""type"":""docker"",""data"":{}},""relationships"":{""space"":{""guid"":""35043e48-ef58-4d78-b546-3dcc8b03b9b5""}}}";

            CreateDockerAppRequest request = new CreateDockerAppRequest();

            request.Name = "my_app";
            request.EnvironmentVariables = TestUtil.GetJsonDictonary(@"{""open"":""source""}");

            request.Lifecycle = TestUtil.GetJsonDictonary(@"{""type"":""docker"",""data"":{}}");

            request.Relationships = TestUtil.GetJsonDictonary(@"{""space"":{""guid"":""35043e48-ef58-4d78-b546-3dcc8b03b9b5""}}");

            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestCreateAppRequest()
        {
            string json = @"{""name"":""my_app"",""environment_variables"":{""open"":""source""},""lifecycle"":{""type"":""buildpack"",""data"":{""stack"":null,""buildpack"":""name-365""}},""relationships"":{""space"":{""guid"":""b4a598ef-a8d1-4481-9eda-2540429094c8""}}}";

            CreateAppRequest request = new CreateAppRequest();

            request.Name = "my_app";
            request.EnvironmentVariables = TestUtil.GetJsonDictonary(@"{""open"":""source""}");

            request.Lifecycle = TestUtil.GetJsonDictonary(@"{""type"":""buildpack"",""data"":{""stack"":null,""buildpack"":""name-365""}}");

            request.Relationships = TestUtil.GetJsonDictonary(@"{""space"":{""guid"":""b4a598ef-a8d1-4481-9eda-2540429094c8""}}");

            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
    }
}
