//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsTest
    {


        [TestMethod]
        public void TestGetEnvForAppResponse()
        {
            string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""fds"": 16384,
        ""mem"": 1024,
        ""disk"": 1024
      },
      ""application_name"": ""name-315"",
      ""application_uris"": [

      ],
      ""name"": ""name-315"",
      ""space_name"": ""name-316"",
      ""space_id"": ""87c3a149-b0a0-4443-bf1a-89a74dcf4d3d"",
      ""uris"": [

      ],
      ""users"": null,
      ""application_id"": ""d78f629f-bd23-4cc3-be88-6b56a8e8156a"",
      ""version"": ""f04138be-a6cb-4b45-95f4-89233c62edf8"",
      ""application_version"": ""f04138be-a6cb-4b45-95f4-89233c62edf8""
    }
  }
}";

            GetEnvForAppResponse obj = Utilities.DeserializeJson<GetEnvForAppResponse>(json);

        }

        [TestMethod]
        public void TestListAllAppsResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""url"": ""/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0"",
        ""created_at"": ""2016-09-02T11:51:58Z"",
        ""updated_at"": ""2016-09-02T11:51:58Z""
      },
      ""entity"": {
        ""name"": ""name-171"",
        ""production"": false,
        ""space_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""stack_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""bcbe9b5e-df28-457b-8d83-01f25b80989f"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-09-02T11:51:58Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/ce4fd919-765d-4e95-b2c0-f5cfc6d1741a"",
        ""stack_url"": ""/v2/stacks/d13f4f21-2ef4-48ad-b47e-a089c37f5c5e"",
        ""routes_url"": ""/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/routes"",
        ""events_url"": ""/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/events"",
        ""service_bindings_url"": ""/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""url"": ""/v2/apps/872375c3-4229-4350-9058-45036a070847"",
        ""created_at"": ""2016-09-02T11:51:58Z"",
        ""updated_at"": ""2016-09-02T11:51:58Z""
      },
      ""entity"": {
        ""name"": ""name-165"",
        ""production"": false,
        ""space_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""stack_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""b78fa39b-2d15-4722-856f-a71f0dc5df94"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-09-02T11:51:58Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/8efb3745-844b-4ce7-b1a5-e22563d798a0"",
        ""stack_url"": ""/v2/stacks/7d1806fa-1611-4967-93e4-e205d66b186c"",
        ""routes_url"": ""/v2/apps/872375c3-4229-4350-9058-45036a070847/routes"",
        ""events_url"": ""/v2/apps/872375c3-4229-4350-9058-45036a070847/events"",
        ""service_bindings_url"": ""/v2/apps/872375c3-4229-4350-9058-45036a070847/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/872375c3-4229-4350-9058-45036a070847/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""url"": ""/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28"",
        ""created_at"": ""2016-09-02T11:51:58Z"",
        ""updated_at"": ""2016-09-02T11:51:58Z""
      },
      ""entity"": {
        ""name"": ""name-159"",
        ""production"": false,
        ""space_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""stack_guid"": ""4a43642e-c13b-452e-aaa8-deee331d461d"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""1c5a1fc8-ec57-4ba3-afcd-17dcbbe76f49"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-09-02T11:51:58Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/d6b78d9d-6637-417d-9d10-c679e32d1c9e"",
        ""stack_url"": ""/v2/stacks/9f38c61c-a893-4930-89ec-2927b34425cd"",
        ""routes_url"": ""/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/routes"",
        ""events_url"": ""/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/events"",
        ""service_bindings_url"": ""/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllAppsResponse> page = Utilities.DeserializePage<ListAllAppsResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-171", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Production), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[0].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[0].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[0].State), true);
            Assert.AreEqual("bcbe9b5e-df28-457b-8d83-01f25b80989f", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[0].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[0].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[0].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Ports), true);
            Assert.AreEqual("/v2/spaces/ce4fd919-765d-4e95-b2c0-f5cfc6d1741a", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/d13f4f21-2ef4-48ad-b47e-a089c37f5c5e", TestUtil.ToTestableString(page[0].StackUrl), true);
            Assert.AreEqual("/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/routes", TestUtil.ToTestableString(page[0].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/events", TestUtil.ToTestableString(page[0].EventsUrl), true);
            Assert.AreEqual("/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/service_bindings", TestUtil.ToTestableString(page[0].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/43d0c075-8d0f-4de1-85f9-d4c58cc106a0/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/872375c3-4229-4350-9058-45036a070847", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-165", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Production), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[1].SpaceGuid), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[1].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[1].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[1].State), true);
            Assert.AreEqual("b78fa39b-2d15-4722-856f-a71f0dc5df94", TestUtil.ToTestableString(page[1].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[1].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[1].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[1].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[1].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Ports), true);
            Assert.AreEqual("/v2/spaces/8efb3745-844b-4ce7-b1a5-e22563d798a0", TestUtil.ToTestableString(page[1].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/7d1806fa-1611-4967-93e4-e205d66b186c", TestUtil.ToTestableString(page[1].StackUrl), true);
            Assert.AreEqual("/v2/apps/872375c3-4229-4350-9058-45036a070847/routes", TestUtil.ToTestableString(page[1].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/872375c3-4229-4350-9058-45036a070847/events", TestUtil.ToTestableString(page[1].EventsUrl), true);
            Assert.AreEqual("/v2/apps/872375c3-4229-4350-9058-45036a070847/service_bindings", TestUtil.ToTestableString(page[1].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/872375c3-4229-4350-9058-45036a070847/route_mappings", TestUtil.ToTestableString(page[1].RouteMappingsUrl), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-159", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Production), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[2].SpaceGuid), true);
            Assert.AreEqual("4a43642e-c13b-452e-aaa8-deee331d461d", TestUtil.ToTestableString(page[2].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[2].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[2].State), true);
            Assert.AreEqual("1c5a1fc8-ec57-4ba3-afcd-17dcbbe76f49", TestUtil.ToTestableString(page[2].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[2].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[2].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(page[2].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[2].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Ports), true);
            Assert.AreEqual("/v2/spaces/d6b78d9d-6637-417d-9d10-c679e32d1c9e", TestUtil.ToTestableString(page[2].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/9f38c61c-a893-4930-89ec-2927b34425cd", TestUtil.ToTestableString(page[2].StackUrl), true);
            Assert.AreEqual("/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/routes", TestUtil.ToTestableString(page[2].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/events", TestUtil.ToTestableString(page[2].EventsUrl), true);
            Assert.AreEqual("/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/service_bindings", TestUtil.ToTestableString(page[2].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/de1c5d3d-cc23-489c-a498-e102f37c3b28/route_mappings", TestUtil.ToTestableString(page[2].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestListAllServiceBindingsForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c3addb96-a716-49c1-b455-f35f43665fed"",
        ""url"": ""/v2/service_bindings/cb42b56b-62e7-4ab7-88bb-8d077b40f2c3"",
        ""created_at"": ""2016-09-02T11:51:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""c3addb96-a716-49c1-b455-f35f43665fed"",
        ""service_instance_guid"": ""c3addb96-a716-49c1-b455-f35f43665fed"",
        ""credentials"": {
          ""creds-key-3"": ""creds-val-3""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""app_url"": ""/v2/apps/6bf8388e-81eb-4052-b1db-b26a2795c567"",
        ""service_instance_url"": ""/v2/service_instances/4b183fdd-4f2f-4cd0-8909-bea9ac6ed73d""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBindingsForAppResponse> page = Utilities.DeserializePage<ListAllServiceBindingsForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("c3addb96-a716-49c1-b455-f35f43665fed", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_bindings/cb42b56b-62e7-4ab7-88bb-8d077b40f2c3", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:59Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("c3addb96-a716-49c1-b455-f35f43665fed", TestUtil.ToTestableString(page[0].AppGuid), true);
            Assert.AreEqual("c3addb96-a716-49c1-b455-f35f43665fed", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayData), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayName), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].SyslogDrainUrl), true);
            Assert.AreEqual("/v2/apps/6bf8388e-81eb-4052-b1db-b26a2795c567", TestUtil.ToTestableString(page[0].AppUrl), true);
            Assert.AreEqual("/v2/service_instances/4b183fdd-4f2f-4cd0-8909-bea9ac6ed73d", TestUtil.ToTestableString(page[0].ServiceInstanceUrl), true);
        }

        [TestMethod]
        public void TestRestageAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""94c41589-b1d3-4a65-bf63-573d3b5ae9f7"",
    ""url"": ""/v2/apps/b3ff9859-9840-47fb-81cb-19ff83b8b3a9"",
    ""created_at"": ""2016-09-02T11:52:10Z"",
    ""updated_at"": ""2016-09-02T11:52:10Z""
  },
  ""entity"": {
    ""name"": ""name-783"",
    ""production"": false,
    ""space_guid"": ""94c41589-b1d3-4a65-bf63-573d3b5ae9f7"",
    ""stack_guid"": ""94c41589-b1d3-4a65-bf63-573d3b5ae9f7"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""67bd8fa6-f5bb-4424-b1ed-7b8c9b76be66"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-09-02T11:52:10Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";

            RestageAppResponse obj = Utilities.DeserializeJson<RestageAppResponse>(json);

            Assert.AreEqual("94c41589-b1d3-4a65-bf63-573d3b5ae9f7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/b3ff9859-9840-47fb-81cb-19ff83b8b3a9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:52:10Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:52:10Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-783", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("94c41589-b1d3-4a65-bf63-573d3b5ae9f7", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("94c41589-b1d3-4a65-bf63-573d3b5ae9f7", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("67bd8fa6-f5bb-4424-b1ed-7b8c9b76be66", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:52:10Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestListAllRoutesForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ab64f488-8f69-454e-8524-61669a348443"",
        ""url"": ""/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f"",
        ""created_at"": ""2016-09-02T11:51:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-5"",
        ""path"": """",
        ""domain_guid"": ""ab64f488-8f69-454e-8524-61669a348443"",
        ""space_guid"": ""ab64f488-8f69-454e-8524-61669a348443"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/14f4663e-b673-4165-a8ae-6ff9410affca"",
        ""space_url"": ""/v2/spaces/90e7523a-696c-469c-ace7-5312b4ca94a3"",
        ""apps_url"": ""/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f/apps"",
        ""route_mappings_url"": ""/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllRoutesForAppResponse> page = Utilities.DeserializePage<ListAllRoutesForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("ab64f488-8f69-454e-8524-61669a348443", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:59Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("host-5", TestUtil.ToTestableString(page[0].Host), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Path), true);
            Assert.AreEqual("ab64f488-8f69-454e-8524-61669a348443", TestUtil.ToTestableString(page[0].DomainGuid), true);
            Assert.AreEqual("ab64f488-8f69-454e-8524-61669a348443", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Port), true);
            Assert.AreEqual("/v2/private_domains/14f4663e-b673-4165-a8ae-6ff9410affca", TestUtil.ToTestableString(page[0].DomainUrl), true);
            Assert.AreEqual("/v2/spaces/90e7523a-696c-469c-ace7-5312b4ca94a3", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f/apps", TestUtil.ToTestableString(page[0].AppsUrl), true);
            Assert.AreEqual("/v2/routes/24271356-9c69-4f6f-be81-b11575e2b33f/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestAssociateRouteWithAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""d489e029-d327-4451-8f11-bc8cc286d584"",
    ""url"": ""/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f"",
    ""created_at"": ""2016-09-02T11:51:59Z"",
    ""updated_at"": ""2016-09-02T11:51:59Z""
  },
  ""entity"": {
    ""name"": ""name-225"",
    ""production"": false,
    ""space_guid"": ""d489e029-d327-4451-8f11-bc8cc286d584"",
    ""stack_guid"": ""d489e029-d327-4451-8f11-bc8cc286d584"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""2052ac90-7751-4d3c-9f03-c1a59f80e999"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-09-02T11:51:59Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/bb016b31-92ea-4102-b8cf-d3eefee7a3cf"",
    ""stack_url"": ""/v2/stacks/a950b879-2680-4283-9076-1d7dd3bc5ffd"",
    ""routes_url"": ""/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/routes"",
    ""events_url"": ""/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/events"",
    ""service_bindings_url"": ""/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/route_mappings""
  }
}";

            AssociateRouteWithAppResponse obj = Utilities.DeserializeJson<AssociateRouteWithAppResponse>(json);

            Assert.AreEqual("d489e029-d327-4451-8f11-bc8cc286d584", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:59Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-225", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("d489e029-d327-4451-8f11-bc8cc286d584", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("d489e029-d327-4451-8f11-bc8cc286d584", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("2052ac90-7751-4d3c-9f03-c1a59f80e999", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:59Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/bb016b31-92ea-4102-b8cf-d3eefee7a3cf", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/a950b879-2680-4283-9076-1d7dd3bc5ffd", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/71aa9a7a-4a27-4a9f-b959-58402afab25f/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestGetInstanceInformationForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";

            GetInstanceInformationForStartedAppResponse obj = Utilities.DeserializeJson<GetInstanceInformationForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestGetAppSummaryResponse()
        {
            string json = @"{
  ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
  ""name"": ""name-2305"",
  ""routes"": [
    {
      ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
      ""host"": ""host-31"",
      ""port"": null,
      ""path"": """",
      ""domain"": {
        ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
        ""name"": ""domain-77.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
      ""name"": ""name-2308"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
        ""name"": ""name-2309"",
        ""service"": {
          ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
          ""label"": ""label-75"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
      ""name"": ""domain-77.example.com"",
      ""owning_organization_guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c""
    },
    {
      ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    },
    {
      ""guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
  ""stack_guid"": ""79f93926-92dd-48ec-902d-6dae3a78b89c"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""detected_buildpack_guid"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""86663b4b-abda-4562-a146-e53cc5c6b014"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-09-02T11:52:26Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";

            GetAppSummaryResponse obj = Utilities.DeserializeJson<GetAppSummaryResponse>(json);

            Assert.AreEqual("79f93926-92dd-48ec-902d-6dae3a78b89c", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("name-2305", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("79f93926-92dd-48ec-902d-6dae3a78b89c", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("79f93926-92dd-48ec-902d-6dae3a78b89c", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("86663b4b-abda-4562-a146-e53cc5c6b014", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:52:26Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestGetDetailedStatsForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";

            GetDetailedStatsForStartedAppResponse obj = Utilities.DeserializeJson<GetDetailedStatsForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestUploadsBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""b707c921-fb5e-48b5-920a-a75ffb0b1849"",
    ""created_at"": ""2016-09-02T11:52:02Z"",
    ""url"": ""/v2/jobs/29362f4e-6c42-4d7b-9132-cfbb1fee7bd1""
  },
  ""entity"": {
    ""guid"": ""b707c921-fb5e-48b5-920a-a75ffb0b1849"",
    ""status"": ""queued""
  }
}";

            UploadsBitsForAppResponse obj = Utilities.DeserializeJson<UploadsBitsForAppResponse>(json);

            Assert.AreEqual("b707c921-fb5e-48b5-920a-a75ffb0b1849", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/29362f4e-6c42-4d7b-9132-cfbb1fee7bd1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("b707c921-fb5e-48b5-920a-a75ffb0b1849", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestUpdateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""c0dca450-c250-444f-9f3f-e83b20f93604"",
    ""url"": ""/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d"",
    ""created_at"": ""2016-09-02T11:51:57Z"",
    ""updated_at"": ""2016-09-02T11:51:57Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""c0dca450-c250-444f-9f3f-e83b20f93604"",
    ""stack_guid"": ""c0dca450-c250-444f-9f3f-e83b20f93604"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""e48a8dff-1318-4613-b40c-cbc62807349f"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-09-02T11:51:57Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/ee555294-55ae-40d9-b5fc-0c028d99d390"",
    ""stack_url"": ""/v2/stacks/e7b1859d-9228-41f0-b1b1-40991e93579d"",
    ""routes_url"": ""/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/routes"",
    ""events_url"": ""/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/events"",
    ""service_bindings_url"": ""/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/route_mappings""
  }
}";

            UpdateAppResponse obj = Utilities.DeserializeJson<UpdateAppResponse>(json);

            Assert.AreEqual("c0dca450-c250-444f-9f3f-e83b20f93604", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:57Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("c0dca450-c250-444f-9f3f-e83b20f93604", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("c0dca450-c250-444f-9f3f-e83b20f93604", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("e48a8dff-1318-4613-b40c-cbc62807349f", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:57Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/ee555294-55ae-40d9-b5fc-0c028d99d390", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/e7b1859d-9228-41f0-b1b1-40991e93579d", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/0480c2c5-ac55-460c-877e-9caad618651d/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""48d1b9a9-eab6-4dbe-9436-9425c248e153"",
    ""url"": ""/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544"",
    ""created_at"": ""2016-09-02T11:51:58Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""48d1b9a9-eab6-4dbe-9436-9425c248e153"",
    ""stack_guid"": ""48d1b9a9-eab6-4dbe-9436-9425c248e153"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""259f233e-2b80-439f-8ad1-82c8a59ac874"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/da6899dc-87b0-4565-a4b0-a0aa5e8f4d35"",
    ""stack_url"": ""/v2/stacks/170359d4-62b1-4ac1-84b5-5103353be838"",
    ""routes_url"": ""/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/routes"",
    ""events_url"": ""/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/events"",
    ""service_bindings_url"": ""/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/route_mappings""
  }
}";

            CreateAppResponse obj = Utilities.DeserializeJson<CreateAppResponse>(json);

            Assert.AreEqual("48d1b9a9-eab6-4dbe-9436-9425c248e153", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("48d1b9a9-eab6-4dbe-9436-9425c248e153", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("48d1b9a9-eab6-4dbe-9436-9425c248e153", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("259f233e-2b80-439f-8ad1-82c8a59ac874", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/da6899dc-87b0-4565-a4b0-a0aa5e8f4d35", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/170359d4-62b1-4ac1-84b5-5103353be838", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/c0c457b1-f215-4e3c-9a9e-3614fddb9544/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateDockerAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""99dd35e7-2975-43bd-8b78-52bb995f700c"",
    ""url"": ""/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8"",
    ""created_at"": ""2016-09-02T11:51:57Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""99dd35e7-2975-43bd-8b78-52bb995f700c"",
    ""stack_guid"": ""99dd35e7-2975-43bd-8b78-52bb995f700c"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""da0e6cb6-fd3f-46b7-9280-e0406922852d"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/diego-docker-app:latest"",
    ""package_updated_at"": ""2016-09-02T11:51:57Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [

    ],
    ""space_url"": ""/v2/spaces/ec0be04e-68e9-4f4b-9dd7-0dfaba40c037"",
    ""stack_url"": ""/v2/stacks/170359d4-62b1-4ac1-84b5-5103353be838"",
    ""routes_url"": ""/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/routes"",
    ""events_url"": ""/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/events"",
    ""service_bindings_url"": ""/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/route_mappings""
  }
}";

            CreateDockerAppResponse obj = Utilities.DeserializeJson<CreateDockerAppResponse>(json);

            Assert.AreEqual("99dd35e7-2975-43bd-8b78-52bb995f700c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("99dd35e7-2975-43bd-8b78-52bb995f700c", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("99dd35e7-2975-43bd-8b78-52bb995f700c", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("da0e6cb6-fd3f-46b7-9280-e0406922852d", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("cloudfoundry/diego-docker-app:latest", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:57Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/ec0be04e-68e9-4f4b-9dd7-0dfaba40c037", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/170359d4-62b1-4ac1-84b5-5103353be838", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/acab5d4b-ecd4-4b59-8e66-595793e30aa8/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCopyAppBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""67f8ae5c-caed-426a-a575-d7a6553c7c80"",
    ""created_at"": ""2016-09-02T11:52:01Z"",
    ""url"": ""/v2/jobs/99b253d3-d936-47aa-8115-de74beb4d4a4""
  },
  ""entity"": {
    ""guid"": ""67f8ae5c-caed-426a-a575-d7a6553c7c80"",
    ""status"": ""queued""
  }
}";

            CopyAppBitsForAppResponse obj = Utilities.DeserializeJson<CopyAppBitsForAppResponse>(json);

            Assert.AreEqual("67f8ae5c-caed-426a-a575-d7a6553c7c80", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-09-02T11:52:01Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/99b253d3-d936-47aa-8115-de74beb4d4a4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("67f8ae5c-caed-426a-a575-d7a6553c7c80", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestRetrieveAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78"",
    ""url"": ""/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539"",
    ""created_at"": ""2016-09-02T11:51:58Z"",
    ""updated_at"": ""2016-09-02T11:51:58Z""
  },
  ""entity"": {
    ""name"": ""name-177"",
    ""production"": false,
    ""space_guid"": ""bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78"",
    ""stack_guid"": ""bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""8e93f72c-9abf-43cf-adff-66c11ee0e167"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-09-02T11:51:58Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/faf3c157-ffbf-49ac-926e-355864eb9d01"",
    ""stack_url"": ""/v2/stacks/cd06ef2e-87cd-4def-89c7-7774b9c9760c"",
    ""routes_url"": ""/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/routes"",
    ""events_url"": ""/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/events"",
    ""service_bindings_url"": ""/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/route_mappings""
  }
}";

            RetrieveAppResponse obj = Utilities.DeserializeJson<RetrieveAppResponse>(json);

            Assert.AreEqual("bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-177", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("bc6e76b1-0b5d-4b11-81c0-3d6f9c3cff78", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("8e93f72c-9abf-43cf-adff-66c11ee0e167", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-09-02T11:51:58Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/faf3c157-ffbf-49ac-926e-355864eb9d01", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/cd06ef2e-87cd-4def-89c7-7774b9c9760c", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/8337042c-6abc-4b59-b872-d7a18f5b8539/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }
    }
}
