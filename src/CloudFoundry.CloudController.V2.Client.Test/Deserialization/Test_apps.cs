//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsTest
    {


        [TestMethod]
        public void TestGetEnvForAppResponse()
        {
            string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""fds"": 16384,
        ""mem"": 1024,
        ""disk"": 1024
      },
      ""application_name"": ""name-545"",
      ""application_uris"": [

      ],
      ""name"": ""name-545"",
      ""space_name"": ""name-546"",
      ""space_id"": ""88c1ae6e-c02e-4f12-bfad-ee7e2c2f4c9c"",
      ""uris"": [

      ],
      ""users"": null,
      ""application_id"": ""d53cc7fe-3f15-4746-b4a3-52e31e8acf41"",
      ""version"": ""d0545f1f-e994-473c-8eb0-a333be6ba44f"",
      ""application_version"": ""d0545f1f-e994-473c-8eb0-a333be6ba44f""
    }
  }
}";

            GetEnvForAppResponse obj = Utilities.DeserializeJson<GetEnvForAppResponse>(json);

        }

        [TestMethod]
        public void TestListAllAppsResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""url"": ""/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8"",
        ""created_at"": ""2016-07-27T14:02:34Z"",
        ""updated_at"": ""2016-07-27T14:02:34Z""
      },
      ""entity"": {
        ""name"": ""name-305"",
        ""production"": false,
        ""space_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""stack_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""3d0c13c3-ddda-4e5d-a580-877e8bdaa2fc"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-27T14:02:34Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/2d5e5535-f0e2-49a6-b483-4f9b305c8cf4"",
        ""stack_url"": ""/v2/stacks/9a573724-0ae1-4e01-886a-5ebd843d6cf2"",
        ""routes_url"": ""/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/routes"",
        ""events_url"": ""/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/events"",
        ""service_bindings_url"": ""/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""url"": ""/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b"",
        ""created_at"": ""2016-07-27T14:02:34Z"",
        ""updated_at"": ""2016-07-27T14:02:34Z""
      },
      ""entity"": {
        ""name"": ""name-311"",
        ""production"": false,
        ""space_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""stack_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""caad8f23-6415-4491-8800-a019cb249482"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-27T14:02:34Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/ed3de978-a0cd-4fa1-82c8-feb2f6c01bc8"",
        ""stack_url"": ""/v2/stacks/5f33cba6-a8f8-475a-aac2-58eb5e76bd45"",
        ""routes_url"": ""/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/routes"",
        ""events_url"": ""/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/events"",
        ""service_bindings_url"": ""/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""url"": ""/v2/apps/835175b2-27ec-44e9-a986-860be621deac"",
        ""created_at"": ""2016-07-27T14:02:34Z"",
        ""updated_at"": ""2016-07-27T14:02:34Z""
      },
      ""entity"": {
        ""name"": ""name-299"",
        ""production"": false,
        ""space_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""stack_guid"": ""e142e3be-c08b-4708-a508-c7ec6b3adb4a"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""2a0339e9-a76a-4c45-9e58-5aa8991502b0"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-27T14:02:34Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/1b152613-66b6-4b64-b0c0-a00597c728f8"",
        ""stack_url"": ""/v2/stacks/ac8701c7-31f1-47b2-b409-6d7a4a8984f7"",
        ""routes_url"": ""/v2/apps/835175b2-27ec-44e9-a986-860be621deac/routes"",
        ""events_url"": ""/v2/apps/835175b2-27ec-44e9-a986-860be621deac/events"",
        ""service_bindings_url"": ""/v2/apps/835175b2-27ec-44e9-a986-860be621deac/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/835175b2-27ec-44e9-a986-860be621deac/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllAppsResponse> page = Utilities.DeserializePage<ListAllAppsResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-305", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Production), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[0].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[0].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[0].State), true);
            Assert.AreEqual("3d0c13c3-ddda-4e5d-a580-877e8bdaa2fc", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[0].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[0].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[0].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Ports), true);
            Assert.AreEqual("/v2/spaces/2d5e5535-f0e2-49a6-b483-4f9b305c8cf4", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/9a573724-0ae1-4e01-886a-5ebd843d6cf2", TestUtil.ToTestableString(page[0].StackUrl), true);
            Assert.AreEqual("/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/routes", TestUtil.ToTestableString(page[0].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/events", TestUtil.ToTestableString(page[0].EventsUrl), true);
            Assert.AreEqual("/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/service_bindings", TestUtil.ToTestableString(page[0].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/18cd7e35-1160-4141-94c3-812627c201f8/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-311", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Production), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[1].SpaceGuid), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[1].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[1].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[1].State), true);
            Assert.AreEqual("caad8f23-6415-4491-8800-a019cb249482", TestUtil.ToTestableString(page[1].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[1].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[1].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[1].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[1].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Ports), true);
            Assert.AreEqual("/v2/spaces/ed3de978-a0cd-4fa1-82c8-feb2f6c01bc8", TestUtil.ToTestableString(page[1].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/5f33cba6-a8f8-475a-aac2-58eb5e76bd45", TestUtil.ToTestableString(page[1].StackUrl), true);
            Assert.AreEqual("/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/routes", TestUtil.ToTestableString(page[1].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/events", TestUtil.ToTestableString(page[1].EventsUrl), true);
            Assert.AreEqual("/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/service_bindings", TestUtil.ToTestableString(page[1].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/315c43e8-03de-4a5c-972d-b2d06ce3c71b/route_mappings", TestUtil.ToTestableString(page[1].RouteMappingsUrl), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/835175b2-27ec-44e9-a986-860be621deac", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-299", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Production), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[2].SpaceGuid), true);
            Assert.AreEqual("e142e3be-c08b-4708-a508-c7ec6b3adb4a", TestUtil.ToTestableString(page[2].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[2].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[2].State), true);
            Assert.AreEqual("2a0339e9-a76a-4c45-9e58-5aa8991502b0", TestUtil.ToTestableString(page[2].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[2].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[2].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(page[2].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[2].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Ports), true);
            Assert.AreEqual("/v2/spaces/1b152613-66b6-4b64-b0c0-a00597c728f8", TestUtil.ToTestableString(page[2].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/ac8701c7-31f1-47b2-b409-6d7a4a8984f7", TestUtil.ToTestableString(page[2].StackUrl), true);
            Assert.AreEqual("/v2/apps/835175b2-27ec-44e9-a986-860be621deac/routes", TestUtil.ToTestableString(page[2].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/835175b2-27ec-44e9-a986-860be621deac/events", TestUtil.ToTestableString(page[2].EventsUrl), true);
            Assert.AreEqual("/v2/apps/835175b2-27ec-44e9-a986-860be621deac/service_bindings", TestUtil.ToTestableString(page[2].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/835175b2-27ec-44e9-a986-860be621deac/route_mappings", TestUtil.ToTestableString(page[2].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestListAllServiceBindingsForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9ec1e0a3-6bba-4536-8a83-b3d49e3edde3"",
        ""url"": ""/v2/service_bindings/878c1522-bf03-4e24-a28f-0d978723862e"",
        ""created_at"": ""2016-07-27T14:02:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""9ec1e0a3-6bba-4536-8a83-b3d49e3edde3"",
        ""service_instance_guid"": ""9ec1e0a3-6bba-4536-8a83-b3d49e3edde3"",
        ""credentials"": {
          ""creds-key-16"": ""creds-val-16""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""app_url"": ""/v2/apps/2c1addb6-2dcc-4014-8c17-7b58c6efd33e"",
        ""service_instance_url"": ""/v2/service_instances/cdbf42da-d719-4d34-b28a-5cac1a708bf8""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBindingsForAppResponse> page = Utilities.DeserializePage<ListAllServiceBindingsForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("9ec1e0a3-6bba-4536-8a83-b3d49e3edde3", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_bindings/878c1522-bf03-4e24-a28f-0d978723862e", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("9ec1e0a3-6bba-4536-8a83-b3d49e3edde3", TestUtil.ToTestableString(page[0].AppGuid), true);
            Assert.AreEqual("9ec1e0a3-6bba-4536-8a83-b3d49e3edde3", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayData), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayName), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].SyslogDrainUrl), true);
            Assert.AreEqual("/v2/apps/2c1addb6-2dcc-4014-8c17-7b58c6efd33e", TestUtil.ToTestableString(page[0].AppUrl), true);
            Assert.AreEqual("/v2/service_instances/cdbf42da-d719-4d34-b28a-5cac1a708bf8", TestUtil.ToTestableString(page[0].ServiceInstanceUrl), true);
        }

        [TestMethod]
        public void TestRestageAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""f07fdd2b-bebb-4da5-b9ed-c74ada06b2df"",
    ""url"": ""/v2/apps/882b87d3-3266-4c81-8115-12622d8027b2"",
    ""created_at"": ""2016-07-27T14:02:37Z"",
    ""updated_at"": ""2016-07-27T14:02:37Z""
  },
  ""entity"": {
    ""name"": ""name-554"",
    ""production"": false,
    ""space_guid"": ""f07fdd2b-bebb-4da5-b9ed-c74ada06b2df"",
    ""stack_guid"": ""f07fdd2b-bebb-4da5-b9ed-c74ada06b2df"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""637e233e-68e6-4b8e-a516-e0e285a51efd"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-27T14:02:37Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";

            RestageAppResponse obj = Utilities.DeserializeJson<RestageAppResponse>(json);

            Assert.AreEqual("f07fdd2b-bebb-4da5-b9ed-c74ada06b2df", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/882b87d3-3266-4c81-8115-12622d8027b2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:37Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-554", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("f07fdd2b-bebb-4da5-b9ed-c74ada06b2df", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("f07fdd2b-bebb-4da5-b9ed-c74ada06b2df", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("637e233e-68e6-4b8e-a516-e0e285a51efd", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:37Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestListAllRoutesForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""24463495-7253-4032-a3aa-c9995d5a3d41"",
        ""url"": ""/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728"",
        ""created_at"": ""2016-07-27T14:02:36Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-10"",
        ""path"": """",
        ""domain_guid"": ""24463495-7253-4032-a3aa-c9995d5a3d41"",
        ""space_guid"": ""24463495-7253-4032-a3aa-c9995d5a3d41"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/03442f16-0f88-40f9-a6c0-dfd41fe87535"",
        ""space_url"": ""/v2/spaces/6410fc0e-7bda-476e-a627-2ba21973ab0f"",
        ""apps_url"": ""/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728/apps"",
        ""route_mappings_url"": ""/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllRoutesForAppResponse> page = Utilities.DeserializePage<ListAllRoutesForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("24463495-7253-4032-a3aa-c9995d5a3d41", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:36Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("host-10", TestUtil.ToTestableString(page[0].Host), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Path), true);
            Assert.AreEqual("24463495-7253-4032-a3aa-c9995d5a3d41", TestUtil.ToTestableString(page[0].DomainGuid), true);
            Assert.AreEqual("24463495-7253-4032-a3aa-c9995d5a3d41", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Port), true);
            Assert.AreEqual("/v2/private_domains/03442f16-0f88-40f9-a6c0-dfd41fe87535", TestUtil.ToTestableString(page[0].DomainUrl), true);
            Assert.AreEqual("/v2/spaces/6410fc0e-7bda-476e-a627-2ba21973ab0f", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728/apps", TestUtil.ToTestableString(page[0].AppsUrl), true);
            Assert.AreEqual("/v2/routes/38dda6f2-9147-43fc-abea-39958e28a728/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestAssociateRouteWithAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""7fcace27-f818-485e-9314-6694b85db4a9"",
    ""url"": ""/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e"",
    ""created_at"": ""2016-07-27T14:02:36Z"",
    ""updated_at"": ""2016-07-27T14:02:36Z""
  },
  ""entity"": {
    ""name"": ""name-455"",
    ""production"": false,
    ""space_guid"": ""7fcace27-f818-485e-9314-6694b85db4a9"",
    ""stack_guid"": ""7fcace27-f818-485e-9314-6694b85db4a9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""74ca4caf-3862-4eb4-ac8c-9aafa5af7b52"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-27T14:02:36Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/cd908f13-aee2-4c24-abd0-2ec55429c334"",
    ""stack_url"": ""/v2/stacks/52ced98d-b134-4620-bde1-d92f6d76910d"",
    ""routes_url"": ""/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/routes"",
    ""events_url"": ""/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/events"",
    ""service_bindings_url"": ""/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/route_mappings""
  }
}";

            AssociateRouteWithAppResponse obj = Utilities.DeserializeJson<AssociateRouteWithAppResponse>(json);

            Assert.AreEqual("7fcace27-f818-485e-9314-6694b85db4a9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:36Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:36Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-455", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("7fcace27-f818-485e-9314-6694b85db4a9", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("7fcace27-f818-485e-9314-6694b85db4a9", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("74ca4caf-3862-4eb4-ac8c-9aafa5af7b52", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:36Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/cd908f13-aee2-4c24-abd0-2ec55429c334", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/52ced98d-b134-4620-bde1-d92f6d76910d", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/081aa72f-ed10-4e4c-a5eb-0db1ad840a8e/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestGetInstanceInformationForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";

            GetInstanceInformationForStartedAppResponse obj = Utilities.DeserializeJson<GetInstanceInformationForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestGetAppSummaryResponse()
        {
            string json = @"{
  ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
  ""name"": ""name-940"",
  ""routes"": [
    {
      ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
      ""host"": ""host-22"",
      ""port"": null,
      ""path"": """",
      ""domain"": {
        ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
        ""name"": ""domain-66.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
      ""name"": ""name-943"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
        ""name"": ""name-944"",
        ""service"": {
          ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
          ""label"": ""label-42"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
      ""name"": ""domain-66.example.com"",
      ""owning_organization_guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861""
    },
    {
      ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    },
    {
      ""guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
  ""stack_guid"": ""bb80a6c7-40f2-4784-b74c-54977313a861"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""c33f8cd3-42a0-4268-8fcb-4eb5398ae99f"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-07-27T14:02:46Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";

            GetAppSummaryResponse obj = Utilities.DeserializeJson<GetAppSummaryResponse>(json);

            Assert.AreEqual("bb80a6c7-40f2-4784-b74c-54977313a861", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("name-940", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("bb80a6c7-40f2-4784-b74c-54977313a861", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("bb80a6c7-40f2-4784-b74c-54977313a861", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("c33f8cd3-42a0-4268-8fcb-4eb5398ae99f", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestGetDetailedStatsForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";

            GetDetailedStatsForStartedAppResponse obj = Utilities.DeserializeJson<GetDetailedStatsForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestUploadsBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""dac999dd-dafd-4f01-adb2-f16cd2b631ad"",
    ""created_at"": ""2016-07-27T14:02:46Z"",
    ""url"": ""/v2/jobs/ed6b3585-a77f-420a-bd40-1e83343f79f8""
  },
  ""entity"": {
    ""guid"": ""dac999dd-dafd-4f01-adb2-f16cd2b631ad"",
    ""status"": ""queued""
  }
}";

            UploadsBitsForAppResponse obj = Utilities.DeserializeJson<UploadsBitsForAppResponse>(json);

            Assert.AreEqual("dac999dd-dafd-4f01-adb2-f16cd2b631ad", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/ed6b3585-a77f-420a-bd40-1e83343f79f8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("dac999dd-dafd-4f01-adb2-f16cd2b631ad", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestUpdateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""ee85bd50-c2dc-42c6-a451-41ba78772c74"",
    ""url"": ""/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070"",
    ""created_at"": ""2016-07-27T14:02:35Z"",
    ""updated_at"": ""2016-07-27T14:02:35Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""ee85bd50-c2dc-42c6-a451-41ba78772c74"",
    ""stack_guid"": ""ee85bd50-c2dc-42c6-a451-41ba78772c74"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""04baaa85-22e4-445a-853b-12ded992da35"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-27T14:02:35Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/656d72d9-c8a3-4236-8c23-8a9b88236389"",
    ""stack_url"": ""/v2/stacks/9c63440a-24cd-42ba-a6fb-3764f7e8c726"",
    ""routes_url"": ""/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/routes"",
    ""events_url"": ""/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/events"",
    ""service_bindings_url"": ""/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/route_mappings""
  }
}";

            UpdateAppResponse obj = Utilities.DeserializeJson<UpdateAppResponse>(json);

            Assert.AreEqual("ee85bd50-c2dc-42c6-a451-41ba78772c74", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("ee85bd50-c2dc-42c6-a451-41ba78772c74", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("ee85bd50-c2dc-42c6-a451-41ba78772c74", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("04baaa85-22e4-445a-853b-12ded992da35", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/656d72d9-c8a3-4236-8c23-8a9b88236389", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/9c63440a-24cd-42ba-a6fb-3764f7e8c726", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/83770d88-21bc-4d40-86b5-95365c16e070/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""e8565431-c700-4e4f-aad1-c77b6e8f30c1"",
    ""url"": ""/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a"",
    ""created_at"": ""2016-07-27T14:02:35Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""e8565431-c700-4e4f-aad1-c77b6e8f30c1"",
    ""stack_guid"": ""e8565431-c700-4e4f-aad1-c77b6e8f30c1"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""a8e70095-38c6-489f-9eba-77e26571e5be"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/303c1776-17b4-44d1-a22b-7e06b98b98af"",
    ""stack_url"": ""/v2/stacks/fcf5ad60-9f64-487c-9fbe-f099a71ee21e"",
    ""routes_url"": ""/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/routes"",
    ""events_url"": ""/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/events"",
    ""service_bindings_url"": ""/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/route_mappings""
  }
}";

            CreateAppResponse obj = Utilities.DeserializeJson<CreateAppResponse>(json);

            Assert.AreEqual("e8565431-c700-4e4f-aad1-c77b6e8f30c1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("e8565431-c700-4e4f-aad1-c77b6e8f30c1", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("e8565431-c700-4e4f-aad1-c77b6e8f30c1", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("a8e70095-38c6-489f-9eba-77e26571e5be", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/303c1776-17b4-44d1-a22b-7e06b98b98af", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/fcf5ad60-9f64-487c-9fbe-f099a71ee21e", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/999e7cc7-928e-4c2d-9c91-f27bd28e822a/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCopyAppBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""8c8d6999-c9c1-4fb2-8867-21045e6d1567"",
    ""created_at"": ""2016-07-27T14:02:47Z"",
    ""url"": ""/v2/jobs/c1f2a989-3e3f-43f5-9797-450921a03f7e""
  },
  ""entity"": {
    ""guid"": ""8c8d6999-c9c1-4fb2-8867-21045e6d1567"",
    ""status"": ""queued""
  }
}";

            CopyAppBitsForAppResponse obj = Utilities.DeserializeJson<CopyAppBitsForAppResponse>(json);

            Assert.AreEqual("8c8d6999-c9c1-4fb2-8867-21045e6d1567", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-07-27T14:02:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/c1f2a989-3e3f-43f5-9797-450921a03f7e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("8c8d6999-c9c1-4fb2-8867-21045e6d1567", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestCreateDockerAppExperimentalResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""67a67c37-08c4-4c7c-8829-962e328ec07f"",
    ""url"": ""/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e"",
    ""created_at"": ""2016-07-27T14:02:35Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""67a67c37-08c4-4c7c-8829-962e328ec07f"",
    ""stack_guid"": ""67a67c37-08c4-4c7c-8829-962e328ec07f"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""95dc7a27-7444-4c79-a172-f53455be18b3"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/diego-docker-app:latest"",
    ""package_updated_at"": ""2016-07-27T14:02:35Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [

    ],
    ""space_url"": ""/v2/spaces/01368416-373c-4707-85b6-5f441b0c30a2"",
    ""stack_url"": ""/v2/stacks/fcf5ad60-9f64-487c-9fbe-f099a71ee21e"",
    ""routes_url"": ""/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/routes"",
    ""events_url"": ""/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/events"",
    ""service_bindings_url"": ""/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/route_mappings""
  }
}";

            CreateDockerAppExperimentalResponse obj = Utilities.DeserializeJson<CreateDockerAppExperimentalResponse>(json);

            Assert.AreEqual("67a67c37-08c4-4c7c-8829-962e328ec07f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("67a67c37-08c4-4c7c-8829-962e328ec07f", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("67a67c37-08c4-4c7c-8829-962e328ec07f", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("95dc7a27-7444-4c79-a172-f53455be18b3", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("cloudfoundry/diego-docker-app:latest", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:35Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/01368416-373c-4707-85b6-5f441b0c30a2", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/fcf5ad60-9f64-487c-9fbe-f099a71ee21e", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/03f8c6f3-b5f4-4914-9e56-1c169279f18e/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestRetrieveAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""7a512a55-ebe1-4896-8ef5-59638a0e1b41"",
    ""url"": ""/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34"",
    ""created_at"": ""2016-07-27T14:02:34Z"",
    ""updated_at"": ""2016-07-27T14:02:34Z""
  },
  ""entity"": {
    ""name"": ""name-263"",
    ""production"": false,
    ""space_guid"": ""7a512a55-ebe1-4896-8ef5-59638a0e1b41"",
    ""stack_guid"": ""7a512a55-ebe1-4896-8ef5-59638a0e1b41"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""90c1a119-f65f-4b83-9bb7-b944593d31c1"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-27T14:02:34Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/952f23ca-314a-4ed7-93a3-bf1683c1132a"",
    ""stack_url"": ""/v2/stacks/73803f4e-6538-4812-a804-e1d6655d6087"",
    ""routes_url"": ""/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/routes"",
    ""events_url"": ""/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/events"",
    ""service_bindings_url"": ""/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/route_mappings""
  }
}";

            RetrieveAppResponse obj = Utilities.DeserializeJson<RetrieveAppResponse>(json);

            Assert.AreEqual("7a512a55-ebe1-4896-8ef5-59638a0e1b41", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-263", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("7a512a55-ebe1-4896-8ef5-59638a0e1b41", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("7a512a55-ebe1-4896-8ef5-59638a0e1b41", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("90c1a119-f65f-4b83-9bb7-b944593d31c1", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-07-27T14:02:34Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/952f23ca-314a-4ed7-93a3-bf1683c1132a", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/73803f4e-6538-4812-a804-e1d6655d6087", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/192f016f-9103-49ba-beb4-534f5f046b34/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }
    }
}
