//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsTest
    {


        [TestMethod]
        public void TestGetEnvForAppResponse()
        {
            string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""fds"": 16384,
        ""mem"": 1024,
        ""disk"": 1024
      },
      ""application_name"": ""name-720"",
      ""application_uris"": [

      ],
      ""name"": ""name-720"",
      ""space_name"": ""name-721"",
      ""space_id"": ""5226e947-fcb2-4b70-adb7-3bb6ea6c84d7"",
      ""uris"": [

      ],
      ""users"": null,
      ""application_id"": ""5d6b6b4c-e0c7-489b-9d9f-6626ef37217c"",
      ""version"": ""aff2e75a-3e2d-423f-a555-bbb614fee619"",
      ""application_version"": ""aff2e75a-3e2d-423f-a555-bbb614fee619""
    }
  }
}";

            GetEnvForAppResponse obj = Utilities.DeserializeJson<GetEnvForAppResponse>(json);

        }

        [TestMethod]
        public void TestListAllAppsResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""url"": ""/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65"",
        ""created_at"": ""2016-10-12T12:29:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-876"",
        ""production"": false,
        ""space_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""stack_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""daff514f-8af2-4f83-9938-f7f419d1ecf0"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": ""5f253687-5eb9-4684-90a9-994b9911da65"",
        ""package_state"": ""STAGED"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-10-12T12:29:26Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/29e52465-4fa6-4245-bbdd-c1bf7eb7c1b6"",
        ""stack_url"": ""/v2/stacks/75ffb041-3e46-4cbd-b9e6-13db8f5f4936"",
        ""routes_url"": ""/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/routes"",
        ""events_url"": ""/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/events"",
        ""service_bindings_url"": ""/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""url"": ""/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2"",
        ""created_at"": ""2016-10-12T12:29:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-888"",
        ""production"": false,
        ""space_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""stack_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""4939acbe-c088-441c-99ed-e1a05ef76405"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": ""4d369ce0-0d79-47fb-a98f-7cf3efb289fb"",
        ""package_state"": ""STAGED"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-10-12T12:29:26Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/0546275b-f9b1-48ec-8db2-8ebad0501e34"",
        ""stack_url"": ""/v2/stacks/5f687886-0d25-4f8c-98da-592572c9dcb1"",
        ""routes_url"": ""/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/routes"",
        ""events_url"": ""/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/events"",
        ""service_bindings_url"": ""/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""url"": ""/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b"",
        ""created_at"": ""2016-10-12T12:29:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-882"",
        ""production"": false,
        ""space_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""stack_guid"": ""7c942a50-0525-45a3-b14a-c556175059dd"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""112181ef-89c2-4681-98f9-b2e21a75116b"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": ""4c4a778d-3cbf-434b-af01-600ab743f518"",
        ""package_state"": ""STAGED"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-10-12T12:29:26Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/97406f1c-0f28-43aa-a58b-b13d9a7055f9"",
        ""stack_url"": ""/v2/stacks/3a79b89d-5959-4ef0-b184-231dd8f72f32"",
        ""routes_url"": ""/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/routes"",
        ""events_url"": ""/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/events"",
        ""service_bindings_url"": ""/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllAppsResponse> page = Utilities.DeserializePage<ListAllAppsResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-876", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Production), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[0].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[0].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[0].State), true);
            Assert.AreEqual("daff514f-8af2-4f83-9938-f7f419d1ecf0", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Debug), true);
            Assert.AreEqual("5f253687-5eb9-4684-90a9-994b9911da65", TestUtil.ToTestableString(page[0].StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(page[0].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[0].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[0].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Ports), true);
            Assert.AreEqual("/v2/spaces/29e52465-4fa6-4245-bbdd-c1bf7eb7c1b6", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/75ffb041-3e46-4cbd-b9e6-13db8f5f4936", TestUtil.ToTestableString(page[0].StackUrl), true);
            Assert.AreEqual("/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/routes", TestUtil.ToTestableString(page[0].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/events", TestUtil.ToTestableString(page[0].EventsUrl), true);
            Assert.AreEqual("/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/service_bindings", TestUtil.ToTestableString(page[0].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/39d1275d-4a98-42b4-863e-0b54a9a7cb65/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-888", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Production), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[1].SpaceGuid), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[1].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[1].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[1].State), true);
            Assert.AreEqual("4939acbe-c088-441c-99ed-e1a05ef76405", TestUtil.ToTestableString(page[1].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Debug), true);
            Assert.AreEqual("4d369ce0-0d79-47fb-a98f-7cf3efb289fb", TestUtil.ToTestableString(page[1].StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(page[1].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[1].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[1].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[1].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Ports), true);
            Assert.AreEqual("/v2/spaces/0546275b-f9b1-48ec-8db2-8ebad0501e34", TestUtil.ToTestableString(page[1].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/5f687886-0d25-4f8c-98da-592572c9dcb1", TestUtil.ToTestableString(page[1].StackUrl), true);
            Assert.AreEqual("/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/routes", TestUtil.ToTestableString(page[1].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/events", TestUtil.ToTestableString(page[1].EventsUrl), true);
            Assert.AreEqual("/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/service_bindings", TestUtil.ToTestableString(page[1].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/b263b5fc-3f82-4131-9248-15a43298c2d2/route_mappings", TestUtil.ToTestableString(page[1].RouteMappingsUrl), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-882", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Production), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[2].SpaceGuid), true);
            Assert.AreEqual("7c942a50-0525-45a3-b14a-c556175059dd", TestUtil.ToTestableString(page[2].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[2].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[2].State), true);
            Assert.AreEqual("112181ef-89c2-4681-98f9-b2e21a75116b", TestUtil.ToTestableString(page[2].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Debug), true);
            Assert.AreEqual("4c4a778d-3cbf-434b-af01-600ab743f518", TestUtil.ToTestableString(page[2].StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(page[2].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[2].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(page[2].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[2].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Ports), true);
            Assert.AreEqual("/v2/spaces/97406f1c-0f28-43aa-a58b-b13d9a7055f9", TestUtil.ToTestableString(page[2].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/3a79b89d-5959-4ef0-b184-231dd8f72f32", TestUtil.ToTestableString(page[2].StackUrl), true);
            Assert.AreEqual("/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/routes", TestUtil.ToTestableString(page[2].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/events", TestUtil.ToTestableString(page[2].EventsUrl), true);
            Assert.AreEqual("/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/service_bindings", TestUtil.ToTestableString(page[2].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/f5ac3b55-07f0-4368-ba0d-8291cf3d068b/route_mappings", TestUtil.ToTestableString(page[2].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestListAllServiceBindingsForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8131b278-ba08-422f-9573-ddcf893d4d43"",
        ""url"": ""/v2/service_bindings/d6ac1e54-5c9e-41d8-9645-a1d5fff8ecdb"",
        ""created_at"": ""2016-10-12T12:29:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""8131b278-ba08-422f-9573-ddcf893d4d43"",
        ""service_instance_guid"": ""8131b278-ba08-422f-9573-ddcf893d4d43"",
        ""credentials"": {
          ""creds-key-52"": ""creds-val-52""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""app_url"": ""/v2/apps/2c8bf757-9d25-490d-a55e-0d05638fbb14"",
        ""service_instance_url"": ""/v2/service_instances/ccdfa00d-b800-47f8-a291-6e4112c76625""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBindingsForAppResponse> page = Utilities.DeserializePage<ListAllServiceBindingsForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("8131b278-ba08-422f-9573-ddcf893d4d43", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_bindings/d6ac1e54-5c9e-41d8-9645-a1d5fff8ecdb", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:25Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("8131b278-ba08-422f-9573-ddcf893d4d43", TestUtil.ToTestableString(page[0].AppGuid), true);
            Assert.AreEqual("8131b278-ba08-422f-9573-ddcf893d4d43", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayData), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayName), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].SyslogDrainUrl), true);
            Assert.AreEqual("/v2/apps/2c8bf757-9d25-490d-a55e-0d05638fbb14", TestUtil.ToTestableString(page[0].AppUrl), true);
            Assert.AreEqual("/v2/service_instances/ccdfa00d-b800-47f8-a291-6e4112c76625", TestUtil.ToTestableString(page[0].ServiceInstanceUrl), true);
        }

        [TestMethod]
        public void TestRestageAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""a465c822-2468-47ad-bc71-8917e01e5656"",
    ""url"": ""/v2/apps/3067c9f9-ab96-4aa9-8199-d8fd04b89858"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": ""2016-10-12T12:29:29Z""
  },
  ""entity"": {
    ""name"": ""name-1066"",
    ""production"": false,
    ""space_guid"": ""a465c822-2468-47ad-bc71-8917e01e5656"",
    ""stack_guid"": ""a465c822-2468-47ad-bc71-8917e01e5656"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""6bf57473-1b36-4f81-9288-b2cc20f6aac3"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": ""cd605598-cf07-4bd0-9347-85a37fa6b29c"",
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-10-12T12:29:29Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";

            RestageAppResponse obj = Utilities.DeserializeJson<RestageAppResponse>(json);

            Assert.AreEqual("a465c822-2468-47ad-bc71-8917e01e5656", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/3067c9f9-ab96-4aa9-8199-d8fd04b89858", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-1066", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("a465c822-2468-47ad-bc71-8917e01e5656", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("a465c822-2468-47ad-bc71-8917e01e5656", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("6bf57473-1b36-4f81-9288-b2cc20f6aac3", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("cd605598-cf07-4bd0-9347-85a37fa6b29c", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestListAllRoutesForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2e020c55-f98b-4756-b8d5-7ace33bd01d6"",
        ""url"": ""/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b"",
        ""created_at"": ""2016-10-12T12:29:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-23"",
        ""path"": """",
        ""domain_guid"": ""2e020c55-f98b-4756-b8d5-7ace33bd01d6"",
        ""space_guid"": ""2e020c55-f98b-4756-b8d5-7ace33bd01d6"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/be52a063-49c1-4a87-b20d-58e6a77f32c4"",
        ""space_url"": ""/v2/spaces/063a6f04-b309-4266-b993-73e94fee6789"",
        ""apps_url"": ""/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b/apps"",
        ""route_mappings_url"": ""/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllRoutesForAppResponse> page = Utilities.DeserializePage<ListAllRoutesForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("2e020c55-f98b-4756-b8d5-7ace33bd01d6", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:25Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("host-23", TestUtil.ToTestableString(page[0].Host), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Path), true);
            Assert.AreEqual("2e020c55-f98b-4756-b8d5-7ace33bd01d6", TestUtil.ToTestableString(page[0].DomainGuid), true);
            Assert.AreEqual("2e020c55-f98b-4756-b8d5-7ace33bd01d6", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Port), true);
            Assert.AreEqual("/v2/private_domains/be52a063-49c1-4a87-b20d-58e6a77f32c4", TestUtil.ToTestableString(page[0].DomainUrl), true);
            Assert.AreEqual("/v2/spaces/063a6f04-b309-4266-b993-73e94fee6789", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b/apps", TestUtil.ToTestableString(page[0].AppsUrl), true);
            Assert.AreEqual("/v2/routes/3740b467-a1e7-4f14-b728-1cc41e14b38b/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestAssociateRouteWithAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""3b8da3de-4728-4b78-a4b2-15befecb1646"",
    ""url"": ""/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc"",
    ""created_at"": ""2016-10-12T12:29:24Z"",
    ""updated_at"": ""2016-10-12T12:29:25Z""
  },
  ""entity"": {
    ""name"": ""name-798"",
    ""production"": false,
    ""space_guid"": ""3b8da3de-4728-4b78-a4b2-15befecb1646"",
    ""stack_guid"": ""3b8da3de-4728-4b78-a4b2-15befecb1646"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""29388f61-6c49-4c0e-8eb1-730eeb21095b"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": ""46ad851b-87fb-437e-b0be-54ed8840eda2"",
    ""package_state"": ""STAGED"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-10-12T12:29:24Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/587e1333-b2e1-476a-abe1-4b00d1e86b41"",
    ""stack_url"": ""/v2/stacks/a6b6061f-a398-482d-a353-72b07496f4e4"",
    ""routes_url"": ""/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/routes"",
    ""events_url"": ""/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/events"",
    ""service_bindings_url"": ""/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/route_mappings""
  }
}";

            AssociateRouteWithAppResponse obj = Utilities.DeserializeJson<AssociateRouteWithAppResponse>(json);

            Assert.AreEqual("3b8da3de-4728-4b78-a4b2-15befecb1646", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-10-12T12:29:25Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-798", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("3b8da3de-4728-4b78-a4b2-15befecb1646", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("3b8da3de-4728-4b78-a4b2-15befecb1646", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("29388f61-6c49-4c0e-8eb1-730eeb21095b", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("46ad851b-87fb-437e-b0be-54ed8840eda2", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:24Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/587e1333-b2e1-476a-abe1-4b00d1e86b41", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/a6b6061f-a398-482d-a353-72b07496f4e4", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/16c7cea0-e140-4ea8-9eb5-bbae0b5154fc/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestGetInstanceInformationForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";

            GetInstanceInformationForStartedAppResponse obj = Utilities.DeserializeJson<GetInstanceInformationForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestGetAppSummaryResponse()
        {
            string json = @"{
  ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
  ""name"": ""name-1242"",
  ""routes"": [
    {
      ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
      ""host"": ""host-26"",
      ""port"": null,
      ""path"": """",
      ""domain"": {
        ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
        ""name"": ""domain-76.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
      ""name"": ""name-1245"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
        ""name"": ""name-1246"",
        ""service"": {
          ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
          ""label"": ""label-48"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
      ""name"": ""domain-76.example.com"",
      ""owning_organization_guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4""
    },
    {
      ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    },
    {
      ""guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
  ""stack_guid"": ""8b5ae7d3-a467-442a-863f-126363c92ce4"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""detected_buildpack_guid"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""9bb3433a-ba27-4233-908c-cc235928c365"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": ""d8974324-ce79-4d51-be1b-820516f4be8c"",
  ""package_state"": ""STAGED"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-10-12T12:29:32Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";

            GetAppSummaryResponse obj = Utilities.DeserializeJson<GetAppSummaryResponse>(json);

            Assert.AreEqual("8b5ae7d3-a467-442a-863f-126363c92ce4", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("name-1242", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("8b5ae7d3-a467-442a-863f-126363c92ce4", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("8b5ae7d3-a467-442a-863f-126363c92ce4", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("9bb3433a-ba27-4233-908c-cc235928c365", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("d8974324-ce79-4d51-be1b-820516f4be8c", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:32Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestGetDetailedStatsForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";

            GetDetailedStatsForStartedAppResponse obj = Utilities.DeserializeJson<GetDetailedStatsForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestUploadsBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""3d78dc55-03d1-485a-a7ca-da34acef1eb5"",
    ""created_at"": ""2016-10-12T12:29:40Z"",
    ""url"": ""/v2/jobs/10e245e8-8754-4b87-a4d7-f0b3429ac265""
  },
  ""entity"": {
    ""guid"": ""3d78dc55-03d1-485a-a7ca-da34acef1eb5"",
    ""status"": ""queued""
  }
}";

            UploadsBitsForAppResponse obj = Utilities.DeserializeJson<UploadsBitsForAppResponse>(json);

            Assert.AreEqual("3d78dc55-03d1-485a-a7ca-da34acef1eb5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-10-12T12:29:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/10e245e8-8754-4b87-a4d7-f0b3429ac265", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("3d78dc55-03d1-485a-a7ca-da34acef1eb5", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestUpdateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""dece8d97-789d-4245-b4e0-52c4d9e0672c"",
    ""url"": ""/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f"",
    ""created_at"": ""2016-10-12T12:29:26Z"",
    ""updated_at"": ""2016-10-12T12:29:27Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""dece8d97-789d-4245-b4e0-52c4d9e0672c"",
    ""stack_guid"": ""dece8d97-789d-4245-b4e0-52c4d9e0672c"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""10a032a2-24bd-4960-81a3-c33fdcef64c7"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": ""2887ad4e-5bf8-4a02-8836-3a3fa37b070e"",
    ""package_state"": ""STAGED"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-10-12T12:29:26Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/adbc30a2-7417-4fb6-bafe-f08fc7693bd3"",
    ""stack_url"": ""/v2/stacks/e5f6eef0-4061-44c8-b9e3-d3c1b0186ea2"",
    ""routes_url"": ""/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/routes"",
    ""events_url"": ""/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/events"",
    ""service_bindings_url"": ""/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/route_mappings""
  }
}";

            UpdateAppResponse obj = Utilities.DeserializeJson<UpdateAppResponse>(json);

            Assert.AreEqual("dece8d97-789d-4245-b4e0-52c4d9e0672c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-10-12T12:29:27Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("dece8d97-789d-4245-b4e0-52c4d9e0672c", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("dece8d97-789d-4245-b4e0-52c4d9e0672c", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("10a032a2-24bd-4960-81a3-c33fdcef64c7", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("2887ad4e-5bf8-4a02-8836-3a3fa37b070e", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/adbc30a2-7417-4fb6-bafe-f08fc7693bd3", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/e5f6eef0-4061-44c8-b9e3-d3c1b0186ea2", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/4949ab89-9b82-4ca6-bb2b-de294fc4296f/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""19afc942-1b9b-4237-bfac-d8ca9231d348"",
    ""url"": ""/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79"",
    ""created_at"": ""2016-10-12T12:29:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""19afc942-1b9b-4237-bfac-d8ca9231d348"",
    ""stack_guid"": ""19afc942-1b9b-4237-bfac-d8ca9231d348"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""405ec406-14f0-47d2-8c6b-bc7ce45075b5"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/488f1059-8fc2-4d8a-8095-c73f2545db89"",
    ""stack_url"": ""/v2/stacks/41f7c466-57d1-4c13-81a8-880e8441afed"",
    ""routes_url"": ""/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/routes"",
    ""events_url"": ""/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/events"",
    ""service_bindings_url"": ""/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/route_mappings""
  }
}";

            CreateAppResponse obj = Utilities.DeserializeJson<CreateAppResponse>(json);

            Assert.AreEqual("19afc942-1b9b-4237-bfac-d8ca9231d348", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("19afc942-1b9b-4237-bfac-d8ca9231d348", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("19afc942-1b9b-4237-bfac-d8ca9231d348", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("405ec406-14f0-47d2-8c6b-bc7ce45075b5", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/488f1059-8fc2-4d8a-8095-c73f2545db89", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/41f7c466-57d1-4c13-81a8-880e8441afed", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/06337a0e-0da0-42dd-8f54-2d8ed5f4de79/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateDockerAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""c0eea382-05da-4d9c-af86-7326b0f11140"",
    ""url"": ""/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b"",
    ""created_at"": ""2016-10-12T12:29:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""c0eea382-05da-4d9c-af86-7326b0f11140"",
    ""stack_guid"": ""c0eea382-05da-4d9c-af86-7326b0f11140"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""6bb4123b-7290-4a8d-801a-c3ed649428da"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/diego-docker-app"",
    ""package_updated_at"": ""2016-10-12T12:29:27Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [

    ],
    ""space_url"": ""/v2/spaces/4f754896-6831-47da-b4fd-2bc1bee9e175"",
    ""stack_url"": ""/v2/stacks/41f7c466-57d1-4c13-81a8-880e8441afed"",
    ""routes_url"": ""/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/routes"",
    ""events_url"": ""/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/events"",
    ""service_bindings_url"": ""/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/route_mappings""
  }
}";

            CreateDockerAppResponse obj = Utilities.DeserializeJson<CreateDockerAppResponse>(json);

            Assert.AreEqual("c0eea382-05da-4d9c-af86-7326b0f11140", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("c0eea382-05da-4d9c-af86-7326b0f11140", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("c0eea382-05da-4d9c-af86-7326b0f11140", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("6bb4123b-7290-4a8d-801a-c3ed649428da", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("cloudfoundry/diego-docker-app", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:27Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/4f754896-6831-47da-b4fd-2bc1bee9e175", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/41f7c466-57d1-4c13-81a8-880e8441afed", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/7f6ccbda-ab61-416b-a08d-8cd0279fbc4b/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCopyAppBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""41c48ca6-4e60-47f7-9e2f-d66233eca02e"",
    ""created_at"": ""2016-10-12T12:29:40Z"",
    ""url"": ""/v2/jobs/b0855b56-fd81-49ae-b236-0073eeba872d""
  },
  ""entity"": {
    ""guid"": ""41c48ca6-4e60-47f7-9e2f-d66233eca02e"",
    ""status"": ""queued""
  }
}";

            CopyAppBitsForAppResponse obj = Utilities.DeserializeJson<CopyAppBitsForAppResponse>(json);

            Assert.AreEqual("41c48ca6-4e60-47f7-9e2f-d66233eca02e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-10-12T12:29:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/b0855b56-fd81-49ae-b236-0073eeba872d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("41c48ca6-4e60-47f7-9e2f-d66233eca02e", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestRetrieveAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""da5008c9-a83d-408e-a684-7888092ac57a"",
    ""url"": ""/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c"",
    ""created_at"": ""2016-10-12T12:29:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-894"",
    ""production"": false,
    ""space_guid"": ""da5008c9-a83d-408e-a684-7888092ac57a"",
    ""stack_guid"": ""da5008c9-a83d-408e-a684-7888092ac57a"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""detected_buildpack_guid"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""8b362fea-0255-4183-868d-d788a4c033d8"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": ""7eb82dd2-8590-43f6-ace0-f046dbfa3fe1"",
    ""package_state"": ""STAGED"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-10-12T12:29:26Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/f022889e-d5f8-4bf5-9284-8cb05873bf6c"",
    ""stack_url"": ""/v2/stacks/d2801f5e-c50c-4549-9831-3c07df053e56"",
    ""routes_url"": ""/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/routes"",
    ""events_url"": ""/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/events"",
    ""service_bindings_url"": ""/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/route_mappings""
  }
}";

            RetrieveAppResponse obj = Utilities.DeserializeJson<RetrieveAppResponse>(json);

            Assert.AreEqual("da5008c9-a83d-408e-a684-7888092ac57a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-894", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("da5008c9-a83d-408e-a684-7888092ac57a", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("da5008c9-a83d-408e-a684-7888092ac57a", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("8b362fea-0255-4183-868d-d788a4c033d8", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("7eb82dd2-8590-43f6-ace0-f046dbfa3fe1", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("STAGED", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-10-12T12:29:26Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/f022889e-d5f8-4bf5-9284-8cb05873bf6c", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/d2801f5e-c50c-4549-9831-3c07df053e56", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/6a3c51d9-8cff-4c1d-bcfb-8e5d8ed8594c/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }
    }
}
