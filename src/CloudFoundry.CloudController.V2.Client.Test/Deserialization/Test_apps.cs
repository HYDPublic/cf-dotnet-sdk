//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsTest
    {


        [TestMethod]
        public void TestGetEnvForAppResponse()
        {
            string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""fds"": 16384,
        ""mem"": 1024,
        ""disk"": 1024
      },
      ""application_name"": ""name-905"",
      ""application_uris"": [

      ],
      ""name"": ""name-905"",
      ""space_name"": ""name-906"",
      ""space_id"": ""3c4aabb5-be1a-4258-929f-a14e7a1cd935"",
      ""uris"": [

      ],
      ""users"": null,
      ""version"": ""d98fc821-ee34-4fda-9475-85f00f378665"",
      ""application_version"": ""d98fc821-ee34-4fda-9475-85f00f378665"",
      ""application_id"": ""b949a06f-e84b-4972-91fc-788b614271a0""
    }
  }
}";

            GetEnvForAppResponse obj = Utilities.DeserializeJson<GetEnvForAppResponse>(json);

        }

        [TestMethod]
        public void TestListAllAppsResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""url"": ""/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd"",
        ""created_at"": ""2016-05-26T11:34:36Z"",
        ""updated_at"": ""2016-05-26T11:34:36Z""
      },
      ""entity"": {
        ""name"": ""name-821"",
        ""production"": false,
        ""space_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""stack_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""41ac4bbf-c2bd-4b4e-8a0a-95b8cef88614"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-05-26T11:34:36Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/8f0c793a-85b3-4b27-84f0-281f2a41d879"",
        ""stack_url"": ""/v2/stacks/0debbc6e-c4e6-4228-9025-dfdf1b9eaece"",
        ""routes_url"": ""/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/routes"",
        ""events_url"": ""/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/events"",
        ""service_bindings_url"": ""/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""url"": ""/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f"",
        ""created_at"": ""2016-05-26T11:34:36Z"",
        ""updated_at"": ""2016-05-26T11:34:36Z""
      },
      ""entity"": {
        ""name"": ""name-815"",
        ""production"": false,
        ""space_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""stack_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""2d93280f-75f0-4ebf-8ead-c38c17b80336"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-05-26T11:34:36Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/bf291f66-3302-4b7b-87e1-72cfd96ab1e3"",
        ""stack_url"": ""/v2/stacks/fd39edc5-82ef-419a-bd4f-8062b2b56533"",
        ""routes_url"": ""/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/routes"",
        ""events_url"": ""/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/events"",
        ""service_bindings_url"": ""/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""url"": ""/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b"",
        ""created_at"": ""2016-05-26T11:34:36Z"",
        ""updated_at"": ""2016-05-26T11:34:36Z""
      },
      ""entity"": {
        ""name"": ""name-809"",
        ""production"": false,
        ""space_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""stack_guid"": ""ad3fc685-9303-403c-aee7-688f24142a81"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""7bd18f30-6208-4526-a0e8-48c4617789b1"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-05-26T11:34:36Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/e24c2484-9363-4157-887b-8d1a5c8ca6c4"",
        ""stack_url"": ""/v2/stacks/902ba7ab-577f-4585-a17f-d392f471f74d"",
        ""routes_url"": ""/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/routes"",
        ""events_url"": ""/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/events"",
        ""service_bindings_url"": ""/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllAppsResponse> page = Utilities.DeserializePage<ListAllAppsResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-821", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Production), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[0].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[0].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[0].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[0].State), true);
            Assert.AreEqual("41ac4bbf-c2bd-4b4e-8a0a-95b8cef88614", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[0].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[0].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[0].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Ports), true);
            Assert.AreEqual("/v2/spaces/8f0c793a-85b3-4b27-84f0-281f2a41d879", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/0debbc6e-c4e6-4228-9025-dfdf1b9eaece", TestUtil.ToTestableString(page[0].StackUrl), true);
            Assert.AreEqual("/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/routes", TestUtil.ToTestableString(page[0].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/events", TestUtil.ToTestableString(page[0].EventsUrl), true);
            Assert.AreEqual("/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/service_bindings", TestUtil.ToTestableString(page[0].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/8570b15c-f235-485e-8f87-3386586ef1fd/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-815", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Production), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[1].SpaceGuid), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[1].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[1].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[1].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[1].State), true);
            Assert.AreEqual("2d93280f-75f0-4ebf-8ead-c38c17b80336", TestUtil.ToTestableString(page[1].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[1].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[1].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[1].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[1].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[1].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].Ports), true);
            Assert.AreEqual("/v2/spaces/bf291f66-3302-4b7b-87e1-72cfd96ab1e3", TestUtil.ToTestableString(page[1].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/fd39edc5-82ef-419a-bd4f-8062b2b56533", TestUtil.ToTestableString(page[1].StackUrl), true);
            Assert.AreEqual("/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/routes", TestUtil.ToTestableString(page[1].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/events", TestUtil.ToTestableString(page[1].EventsUrl), true);
            Assert.AreEqual("/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/service_bindings", TestUtil.ToTestableString(page[1].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/939f922b-27f3-4edf-8524-866c2c827b0f/route_mappings", TestUtil.ToTestableString(page[1].RouteMappingsUrl), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-809", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Production), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[2].SpaceGuid), true);
            Assert.AreEqual("ad3fc685-9303-403c-aee7-688f24142a81", TestUtil.ToTestableString(page[2].StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page[2].Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(page[2].DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(page[2].State), true);
            Assert.AreEqual("7bd18f30-6208-4526-a0e8-48c4617789b1", TestUtil.ToTestableString(page[2].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(page[2].PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(page[2].HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[2].Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(page[2].PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[2].EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].Ports), true);
            Assert.AreEqual("/v2/spaces/e24c2484-9363-4157-887b-8d1a5c8ca6c4", TestUtil.ToTestableString(page[2].SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/902ba7ab-577f-4585-a17f-d392f471f74d", TestUtil.ToTestableString(page[2].StackUrl), true);
            Assert.AreEqual("/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/routes", TestUtil.ToTestableString(page[2].RoutesUrl), true);
            Assert.AreEqual("/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/events", TestUtil.ToTestableString(page[2].EventsUrl), true);
            Assert.AreEqual("/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/service_bindings", TestUtil.ToTestableString(page[2].ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/c9bfd74a-3436-4f02-b84e-a475f0c4db4b/route_mappings", TestUtil.ToTestableString(page[2].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestListAllServiceBindingsForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b"",
        ""url"": ""/v2/service_bindings/33981b42-82a9-4568-acac-849fc0ba54e3"",
        ""created_at"": ""2016-05-26T11:34:38Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b"",
        ""service_instance_guid"": ""b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b"",
        ""credentials"": {
          ""creds-key-41"": ""creds-val-41""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""app_url"": ""/v2/apps/3f0b6ea0-61ce-4a34-98fe-d3f4e3c7ad26"",
        ""service_instance_url"": ""/v2/service_instances/e6d24eff-3a9f-4b1f-a64d-f8b5f4b47a40""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBindingsForAppResponse> page = Utilities.DeserializePage<ListAllServiceBindingsForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_bindings/33981b42-82a9-4568-acac-849fc0ba54e3", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:38Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b", TestUtil.ToTestableString(page[0].AppGuid), true);
            Assert.AreEqual("b2549ac4-fc14-4c5f-abdc-f0ad0997ef9b", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayData), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].GatewayName), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].SyslogDrainUrl), true);
            Assert.AreEqual("/v2/apps/3f0b6ea0-61ce-4a34-98fe-d3f4e3c7ad26", TestUtil.ToTestableString(page[0].AppUrl), true);
            Assert.AreEqual("/v2/service_instances/e6d24eff-3a9f-4b1f-a64d-f8b5f4b47a40", TestUtil.ToTestableString(page[0].ServiceInstanceUrl), true);
        }

        [TestMethod]
        public void TestRestageAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""0799add2-e32e-455f-a40d-9e0298382691"",
    ""url"": ""/v2/apps/24cf2aad-71b4-4c34-9d61-1f87f1286b73"",
    ""created_at"": ""2016-05-26T11:34:27Z"",
    ""updated_at"": ""2016-05-26T11:34:27Z""
  },
  ""entity"": {
    ""name"": ""name-262"",
    ""production"": false,
    ""space_guid"": ""0799add2-e32e-455f-a40d-9e0298382691"",
    ""stack_guid"": ""0799add2-e32e-455f-a40d-9e0298382691"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""dbfde460-fa49-471a-8ac1-b79b7630805b"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-05-26T11:34:27Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";

            RestageAppResponse obj = Utilities.DeserializeJson<RestageAppResponse>(json);

            Assert.AreEqual("0799add2-e32e-455f-a40d-9e0298382691", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/24cf2aad-71b4-4c34-9d61-1f87f1286b73", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:27Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-262", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("0799add2-e32e-455f-a40d-9e0298382691", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("0799add2-e32e-455f-a40d-9e0298382691", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("dbfde460-fa49-471a-8ac1-b79b7630805b", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:27Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestListAllRoutesForAppResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""690bd692-65bc-4273-826c-4752adef9c88"",
        ""url"": ""/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601"",
        ""created_at"": ""2016-05-26T11:34:38Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-11"",
        ""path"": """",
        ""domain_guid"": ""690bd692-65bc-4273-826c-4752adef9c88"",
        ""space_guid"": ""690bd692-65bc-4273-826c-4752adef9c88"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/domains/1ebcdd0c-ad9c-48e7-8e90-8d4399ddd1e6"",
        ""space_url"": ""/v2/spaces/2fc7bce1-a038-4fd9-be74-356c19ad0f19"",
        ""apps_url"": ""/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601/apps"",
        ""route_mappings_url"": ""/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601/route_mappings""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllRoutesForAppResponse> page = Utilities.DeserializePage<ListAllRoutesForAppResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("690bd692-65bc-4273-826c-4752adef9c88", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:38Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("host-11", TestUtil.ToTestableString(page[0].Host), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Path), true);
            Assert.AreEqual("690bd692-65bc-4273-826c-4752adef9c88", TestUtil.ToTestableString(page[0].DomainGuid), true);
            Assert.AreEqual("690bd692-65bc-4273-826c-4752adef9c88", TestUtil.ToTestableString(page[0].SpaceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].ServiceInstanceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Port), true);
            Assert.AreEqual("/v2/domains/1ebcdd0c-ad9c-48e7-8e90-8d4399ddd1e6", TestUtil.ToTestableString(page[0].DomainUrl), true);
            Assert.AreEqual("/v2/spaces/2fc7bce1-a038-4fd9-be74-356c19ad0f19", TestUtil.ToTestableString(page[0].SpaceUrl), true);
            Assert.AreEqual("/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601/apps", TestUtil.ToTestableString(page[0].AppsUrl), true);
            Assert.AreEqual("/v2/routes/b4655c99-e038-433c-89c8-5b05bf794601/route_mappings", TestUtil.ToTestableString(page[0].RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestAssociateRouteWithAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""7bae1d65-37b0-4385-9573-af31c4ae10f5"",
    ""url"": ""/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e"",
    ""created_at"": ""2016-05-26T11:34:38Z"",
    ""updated_at"": ""2016-05-26T11:34:38Z""
  },
  ""entity"": {
    ""name"": ""name-983"",
    ""production"": false,
    ""space_guid"": ""7bae1d65-37b0-4385-9573-af31c4ae10f5"",
    ""stack_guid"": ""7bae1d65-37b0-4385-9573-af31c4ae10f5"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""22392266-5b0a-4fcf-b08b-bc952fe22aaf"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-05-26T11:34:38Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/f46ddf64-9817-4ac1-a6f1-ba611eb6ca88"",
    ""stack_url"": ""/v2/stacks/15ace15c-00f8-4ddb-92f7-9597e626683c"",
    ""routes_url"": ""/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/routes"",
    ""events_url"": ""/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/events"",
    ""service_bindings_url"": ""/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/route_mappings""
  }
}";

            AssociateRouteWithAppResponse obj = Utilities.DeserializeJson<AssociateRouteWithAppResponse>(json);

            Assert.AreEqual("7bae1d65-37b0-4385-9573-af31c4ae10f5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:38Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:38Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-983", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("7bae1d65-37b0-4385-9573-af31c4ae10f5", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("7bae1d65-37b0-4385-9573-af31c4ae10f5", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("22392266-5b0a-4fcf-b08b-bc952fe22aaf", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:38Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/f46ddf64-9817-4ac1-a6f1-ba611eb6ca88", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/15ace15c-00f8-4ddb-92f7-9597e626683c", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/073434b9-3273-4fdb-80c3-d2068986173e/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestGetInstanceInformationForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";

            GetInstanceInformationForStartedAppResponse obj = Utilities.DeserializeJson<GetInstanceInformationForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestGetAppSummaryResponse()
        {
            string json = @"{
  ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
  ""name"": ""name-2278"",
  ""routes"": [
    {
      ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
      ""host"": ""host-18"",
      ""port"": null,
      ""path"": """",
      ""domain"": {
        ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
        ""name"": ""domain-46.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
      ""name"": ""name-2281"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
        ""name"": ""name-2282"",
        ""service"": {
          ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
          ""label"": ""label-60"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
      ""name"": ""domain-46.example.com"",
      ""owning_organization_guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1""
    },
    {
      ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    },
    {
      ""guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_type"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
  ""stack_guid"": ""04e5d7d5-885c-40f3-8798-576d76d679a1"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""a6d609b2-7043-4df3-9bc1-c54b72e07058"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-05-26T11:34:47Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";

            GetAppSummaryResponse obj = Utilities.DeserializeJson<GetAppSummaryResponse>(json);

            Assert.AreEqual("04e5d7d5-885c-40f3-8798-576d76d679a1", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("name-2278", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("04e5d7d5-885c-40f3-8798-576d76d679a1", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("04e5d7d5-885c-40f3-8798-576d76d679a1", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("a6d609b2-7043-4df3-9bc1-c54b72e07058", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:47Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
        }

        [TestMethod]
        public void TestGetDetailedStatsForStartedAppResponse()
        {
            string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";

            GetDetailedStatsForStartedAppResponse obj = Utilities.DeserializeJson<GetDetailedStatsForStartedAppResponse>(json);

        }

        [TestMethod]
        public void TestUploadsBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""d097dd9a-a641-43e7-9e83-d3103c8a55d7"",
    ""created_at"": ""2016-05-26T11:34:24Z"",
    ""url"": ""/v2/jobs/4c008994-3ea7-4302-ab4b-640a09ea4e9e""
  },
  ""entity"": {
    ""guid"": ""d097dd9a-a641-43e7-9e83-d3103c8a55d7"",
    ""status"": ""queued""
  }
}";

            UploadsBitsForAppResponse obj = Utilities.DeserializeJson<UploadsBitsForAppResponse>(json);

            Assert.AreEqual("d097dd9a-a641-43e7-9e83-d3103c8a55d7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-05-26T11:34:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/4c008994-3ea7-4302-ab4b-640a09ea4e9e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("d097dd9a-a641-43e7-9e83-d3103c8a55d7", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestUpdateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""c4287d02-6c77-4758-a766-20dd97592192"",
    ""url"": ""/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62"",
    ""created_at"": ""2016-05-26T11:34:36Z"",
    ""updated_at"": ""2016-05-26T11:34:36Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""c4287d02-6c77-4758-a766-20dd97592192"",
    ""stack_guid"": ""c4287d02-6c77-4758-a766-20dd97592192"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""7ad4d4c7-7880-4f82-8cbc-7d02c78703cc"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-05-26T11:34:36Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/8b9cfe60-1ce0-4261-849d-daba1842f5a2"",
    ""stack_url"": ""/v2/stacks/2abfa055-5817-4b07-a2bb-038202cba4ac"",
    ""routes_url"": ""/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/routes"",
    ""events_url"": ""/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/events"",
    ""service_bindings_url"": ""/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/route_mappings""
  }
}";

            UpdateAppResponse obj = Utilities.DeserializeJson<UpdateAppResponse>(json);

            Assert.AreEqual("c4287d02-6c77-4758-a766-20dd97592192", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("c4287d02-6c77-4758-a766-20dd97592192", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("c4287d02-6c77-4758-a766-20dd97592192", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("7ad4d4c7-7880-4f82-8cbc-7d02c78703cc", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/8b9cfe60-1ce0-4261-849d-daba1842f5a2", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/2abfa055-5817-4b07-a2bb-038202cba4ac", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/17291cc4-3741-4f36-b45f-1353ea489e62/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCreateAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""407f6484-4297-4b2f-8c06-15dd9c5cfa9a"",
    ""url"": ""/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8"",
    ""created_at"": ""2016-05-26T11:34:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""407f6484-4297-4b2f-8c06-15dd9c5cfa9a"",
    ""stack_guid"": ""407f6484-4297-4b2f-8c06-15dd9c5cfa9a"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""a3457b35-43e1-4de0-a0c5-2ded6816961d"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/efbcfdb4-33e5-4f4b-9367-80ec5c00e954"",
    ""stack_url"": ""/v2/stacks/52d1947f-a35c-4ec0-8d24-41e4f71bd1ed"",
    ""routes_url"": ""/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/routes"",
    ""events_url"": ""/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/events"",
    ""service_bindings_url"": ""/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/route_mappings""
  }
}";

            CreateAppResponse obj = Utilities.DeserializeJson<CreateAppResponse>(json);

            Assert.AreEqual("407f6484-4297-4b2f-8c06-15dd9c5cfa9a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("407f6484-4297-4b2f-8c06-15dd9c5cfa9a", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("407f6484-4297-4b2f-8c06-15dd9c5cfa9a", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("a3457b35-43e1-4de0-a0c5-2ded6816961d", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/efbcfdb4-33e5-4f4b-9367-80ec5c00e954", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/52d1947f-a35c-4ec0-8d24-41e4f71bd1ed", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/56e7a191-2b78-47ee-8a8b-06e91665efa8/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestCopyAppBitsForAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""85918518-24b9-4697-82d1-3dd35265084d"",
    ""created_at"": ""2016-05-26T11:34:24Z"",
    ""url"": ""/v2/jobs/f9e0d53f-2eb7-4986-8619-155b66019aa3""
  },
  ""entity"": {
    ""guid"": ""85918518-24b9-4697-82d1-3dd35265084d"",
    ""status"": ""queued""
  }
}";

            CopyAppBitsForAppResponse obj = Utilities.DeserializeJson<CopyAppBitsForAppResponse>(json);

            Assert.AreEqual("85918518-24b9-4697-82d1-3dd35265084d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-05-26T11:34:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/f9e0d53f-2eb7-4986-8619-155b66019aa3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("85918518-24b9-4697-82d1-3dd35265084d", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }

        [TestMethod]
        public void TestCreateDockerAppExperimentalResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""23f46016-cf46-4073-af50-806c21c4fbaf"",
    ""url"": ""/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0"",
    ""created_at"": ""2016-05-26T11:34:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""23f46016-cf46-4073-af50-806c21c4fbaf"",
    ""stack_guid"": ""23f46016-cf46-4073-af50-806c21c4fbaf"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""285b7a2c-a4d4-4be6-b064-4a218d37858a"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/diego-docker-app:latest"",
    ""package_updated_at"": ""2016-05-26T11:34:37Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [

    ],
    ""space_url"": ""/v2/spaces/982b3a57-0f52-42fc-82e7-7dac6b202d14"",
    ""stack_url"": ""/v2/stacks/52d1947f-a35c-4ec0-8d24-41e4f71bd1ed"",
    ""routes_url"": ""/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/routes"",
    ""events_url"": ""/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/events"",
    ""service_bindings_url"": ""/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/route_mappings""
  }
}";

            CreateDockerAppExperimentalResponse obj = Utilities.DeserializeJson<CreateDockerAppExperimentalResponse>(json);

            Assert.AreEqual("23f46016-cf46-4073-af50-806c21c4fbaf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("23f46016-cf46-4073-af50-806c21c4fbaf", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("23f46016-cf46-4073-af50-806c21c4fbaf", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("285b7a2c-a4d4-4be6-b064-4a218d37858a", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("cloudfoundry/diego-docker-app:latest", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:37Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("/v2/spaces/982b3a57-0f52-42fc-82e7-7dac6b202d14", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/52d1947f-a35c-4ec0-8d24-41e4f71bd1ed", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/345840a1-69bb-4723-a8b0-e602f9b88cb0/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }

        [TestMethod]
        public void TestRetrieveAppResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""8c6d794f-1704-4ac7-aa8e-b8725d89f108"",
    ""url"": ""/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef"",
    ""created_at"": ""2016-05-26T11:34:36Z"",
    ""updated_at"": ""2016-05-26T11:34:36Z""
  },
  ""entity"": {
    ""name"": ""name-839"",
    ""production"": false,
    ""space_guid"": ""8c6d794f-1704-4ac7-aa8e-b8725d89f108"",
    ""stack_guid"": ""8c6d794f-1704-4ac7-aa8e-b8725d89f108"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""0e3c230e-93a9-458f-981a-69342ebccd69"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-05-26T11:34:36Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/3eb1fd36-9953-4571-94a5-fc690a576d60"",
    ""stack_url"": ""/v2/stacks/1079e4fe-0182-42cc-8e97-39d683f195f3"",
    ""routes_url"": ""/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/routes"",
    ""events_url"": ""/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/events"",
    ""service_bindings_url"": ""/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/route_mappings""
  }
}";

            RetrieveAppResponse obj = Utilities.DeserializeJson<RetrieveAppResponse>(json);

            Assert.AreEqual("8c6d794f-1704-4ac7-aa8e-b8725d89f108", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-839", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
            Assert.AreEqual("8c6d794f-1704-4ac7-aa8e-b8725d89f108", TestUtil.ToTestableString(obj.SpaceGuid), true);
            Assert.AreEqual("8c6d794f-1704-4ac7-aa8e-b8725d89f108", TestUtil.ToTestableString(obj.StackGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
            Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
            Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
            Assert.AreEqual("0e3c230e-93a9-458f-981a-69342ebccd69", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
            Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
            Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
            Assert.AreEqual("2016-05-26T11:34:36Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
            Assert.AreEqual("/v2/spaces/3eb1fd36-9953-4571-94a5-fc690a576d60", TestUtil.ToTestableString(obj.SpaceUrl), true);
            Assert.AreEqual("/v2/stacks/1079e4fe-0182-42cc-8e97-39d683f195f3", TestUtil.ToTestableString(obj.StackUrl), true);
            Assert.AreEqual("/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
            Assert.AreEqual("/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/events", TestUtil.ToTestableString(obj.EventsUrl), true);
            Assert.AreEqual("/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
            Assert.AreEqual("/v2/apps/237f9013-e999-4735-9f32-49cd4282e3ef/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);
        }
    }
}
