//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicesTest
    {


        [TestMethod]
        public void TestRetrieveServiceResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""dd9026bf-4d30-422b-8569-6b4c9e6d6767"",
    ""url"": ""/v2/services/2a1cdb65-d585-46a0-ac09-45f650174f0f"",
    ""created_at"": ""2016-05-26T11:34:54Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-77"",
    ""provider"": null,
    ""url"": null,
    ""description"": ""desc-220"",
    ""long_description"": null,
    ""version"": null,
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""aad36b0e-9a94-43be-b767-6150aaf38254"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""dd9026bf-4d30-422b-8569-6b4c9e6d6767"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/2a1cdb65-d585-46a0-ac09-45f650174f0f/service_plans""
  }
}";

            RetrieveServiceResponse obj = Utilities.DeserializeJson<RetrieveServiceResponse>(json);

            Assert.AreEqual("dd9026bf-4d30-422b-8569-6b4c9e6d6767", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/2a1cdb65-d585-46a0-ac09-45f650174f0f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:54Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-77", TestUtil.ToTestableString(obj.Label), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Provider), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Url), true);
            Assert.AreEqual("desc-220", TestUtil.ToTestableString(obj.Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
            Assert.AreEqual("aad36b0e-9a94-43be-b767-6150aaf38254", TestUtil.ToTestableString(obj.UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
            Assert.AreEqual("dd9026bf-4d30-422b-8569-6b4c9e6d6767", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
            Assert.AreEqual("/v2/services/2a1cdb65-d585-46a0-ac09-45f650174f0f/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestListAllServicesResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6f823fec-3ce8-42c2-9062-98bb4ad70292"",
        ""url"": ""/v2/services/857f6175-7a1b-498d-83f8-90f9bace431c"",
        ""created_at"": ""2016-05-26T11:34:54Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-78"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-221"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""900e1caa-16bf-4bb5-9b46-c276c637c5a4"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""6f823fec-3ce8-42c2-9062-98bb4ad70292"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/857f6175-7a1b-498d-83f8-90f9bace431c/service_plans""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicesResponse> page = Utilities.DeserializePage<ListAllServicesResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("6f823fec-3ce8-42c2-9062-98bb4ad70292", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/857f6175-7a1b-498d-83f8-90f9bace431c", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:54Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-78", TestUtil.ToTestableString(page[0].Label), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Provider), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Url), true);
            Assert.AreEqual("desc-221", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].LongDescription), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Bindable), true);
            Assert.AreEqual("900e1caa-16bf-4bb5-9b46-c276c637c5a4", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DocumentationUrl), true);
            Assert.AreEqual("6f823fec-3ce8-42c2-9062-98bb4ad70292", TestUtil.ToTestableString(page[0].ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].PlanUpdateable), true);
            Assert.AreEqual("/v2/services/857f6175-7a1b-498d-83f8-90f9bace431c/service_plans", TestUtil.ToTestableString(page[0].ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestListAllServicePlansForServiceResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""24ce1e95-f07f-4dcd-8ac9-164445083240"",
        ""url"": ""/v2/service_plans/9dfecf18-e09c-4d32-8e63-5c7d275be46b"",
        ""created_at"": ""2016-05-26T11:34:53Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2545"",
        ""free"": false,
        ""description"": ""desc-218"",
        ""service_guid"": ""24ce1e95-f07f-4dcd-8ac9-164445083240"",
        ""extra"": null,
        ""unique_id"": ""5fe2a409-e5a2-4709-a1f2-97b49a5ca56a"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/4db949ae-baa3-4f16-b72c-4b6ae0b7ffa7"",
        ""service_instances_url"": ""/v2/service_plans/9dfecf18-e09c-4d32-8e63-5c7d275be46b/service_instances""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicePlansForServiceResponse> page = Utilities.DeserializePage<ListAllServicePlansForServiceResponse>(json, null);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("24ce1e95-f07f-4dcd-8ac9-164445083240", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_plans/9dfecf18-e09c-4d32-8e63-5c7d275be46b", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-05-26T11:34:53Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-2545", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Free), true);
            Assert.AreEqual("desc-218", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("24ce1e95-f07f-4dcd-8ac9-164445083240", TestUtil.ToTestableString(page[0].ServiceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("5fe2a409-e5a2-4709-a1f2-97b49a5ca56a", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Public), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("/v2/services/4db949ae-baa3-4f16-b72c-4b6ae0b7ffa7", TestUtil.ToTestableString(page[0].ServiceUrl), true);
            Assert.AreEqual("/v2/service_plans/9dfecf18-e09c-4d32-8e63-5c7d275be46b/service_instances", TestUtil.ToTestableString(page[0].ServiceInstancesUrl), true);
        }

        [TestMethod]
        public void TestDeleteServiceResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""2912ca35-4f9a-48fa-b05d-377b68001f33"",
    ""created_at"": ""2016-05-26T11:34:53Z"",
    ""url"": ""/v2/jobs/24cf8d54-bb13-484f-a459-be6d628e6c02""
  },
  ""entity"": {
    ""guid"": ""2912ca35-4f9a-48fa-b05d-377b68001f33"",
    ""status"": ""queued""
  }
}";

            DeleteServiceResponse obj = Utilities.DeserializeJson<DeleteServiceResponse>(json);

            Assert.AreEqual("2912ca35-4f9a-48fa-b05d-377b68001f33", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-05-26T11:34:53Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("/v2/jobs/24cf8d54-bb13-484f-a459-be6d628e6c02", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2912ca35-4f9a-48fa-b05d-377b68001f33", TestUtil.ToTestableString(obj.Guid), true);
            Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);
        }
    }
}
