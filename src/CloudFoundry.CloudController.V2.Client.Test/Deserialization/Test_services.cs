//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicesTest
    {


        [TestMethod]
        public void TestListAllServicesResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2ad18397-f4fa-4c70-9686-ec676415047a"",
        ""url"": ""/v2/services/2ad18397-f4fa-4c70-9686-ec676415047a"",
        ""created_at"": ""2015-03-23T16:53:17+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-15"",
        ""provider"": ""provider-15"",
        ""url"": ""https://foo.com/url-41"",
        ""description"": ""desc-75"",
        ""long_description"": null,
        ""version"": ""version-15"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""4c059b10-66f2-4f33-a419-73b9e52a6e54"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""7fd8fd39-b756-4eea-93af-17600d1c105b"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/2ad18397-f4fa-4c70-9686-ec676415047a/service_plans""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicesResponse> page = Utilities.DeserializePage<ListAllServicesResponse>(json);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("2ad18397-f4fa-4c70-9686-ec676415047a", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/2ad18397-f4fa-4c70-9686-ec676415047a", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-15", TestUtil.ToTestableString(page[0].Label), true);
            Assert.AreEqual("provider-15", TestUtil.ToTestableString(page[0].Provider), true);
            Assert.AreEqual("https://foo.com/url-41", TestUtil.ToTestableString(page[0].Url), true);
            Assert.AreEqual("desc-75", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].LongDescription), true);
            Assert.AreEqual("version-15", TestUtil.ToTestableString(page[0].Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Bindable), true);
            Assert.AreEqual("4c059b10-66f2-4f33-a419-73b9e52a6e54", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].DocumentationUrl), true);
            Assert.AreEqual("7fd8fd39-b756-4eea-93af-17600d1c105b", TestUtil.ToTestableString(page[0].ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].PlanUpdateable), true);
            Assert.AreEqual("/v2/services/2ad18397-f4fa-4c70-9686-ec676415047a/service_plans", TestUtil.ToTestableString(page[0].ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestListAllServicePlansForServiceResponse()
        {
            string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0789ed0b-eec9-498b-89c2-5e28303059d0"",
        ""url"": ""/v2/service_plans/0789ed0b-eec9-498b-89c2-5e28303059d0"",
        ""created_at"": ""2015-03-23T16:53:17+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-320"",
        ""free"": false,
        ""description"": ""desc-77"",
        ""service_guid"": ""51ea7bd5-e6f7-4c21-bee9-bd2b0e7b8854"",
        ""extra"": null,
        ""unique_id"": ""ce8cb62a-ba5a-4052-9c83-b2e9df6cab95"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/51ea7bd5-e6f7-4c21-bee9-bd2b0e7b8854"",
        ""service_instances_url"": ""/v2/service_plans/0789ed0b-eec9-498b-89c2-5e28303059d0/service_instances""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServicePlansForServiceResponse> page = Utilities.DeserializePage<ListAllServicePlansForServiceResponse>(json);

            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("0789ed0b-eec9-498b-89c2-5e28303059d0", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_plans/0789ed0b-eec9-498b-89c2-5e28303059d0", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-320", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(page[0].Free), true);
            Assert.AreEqual("desc-77", TestUtil.ToTestableString(page[0].Description), true);
            Assert.AreEqual("51ea7bd5-e6f7-4c21-bee9-bd2b0e7b8854", TestUtil.ToTestableString(page[0].ServiceGuid), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].Extra), true);
            Assert.AreEqual("ce8cb62a-ba5a-4052-9c83-b2e9df6cab95", TestUtil.ToTestableString(page[0].UniqueId), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Public), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(page[0].Active), true);
            Assert.AreEqual("/v2/services/51ea7bd5-e6f7-4c21-bee9-bd2b0e7b8854", TestUtil.ToTestableString(page[0].ServiceUrl), true);
            Assert.AreEqual("/v2/service_plans/0789ed0b-eec9-498b-89c2-5e28303059d0/service_instances", TestUtil.ToTestableString(page[0].ServiceInstancesUrl), true);
        }

        [TestMethod]
        public void TestCreateServiceDeprecatedResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""911828ec-7c0b-4f93-9ddd-dbc6d21d9e91"",
    ""url"": ""/v2/services/911828ec-7c0b-4f93-9ddd-dbc6d21d9e91"",
    ""created_at"": ""2015-03-23T16:53:17+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": false,
    ""bindable"": true,
    ""unique_id"": null,
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": null,
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/911828ec-7c0b-4f93-9ddd-dbc6d21d9e91/service_plans""
  }
}";

            CreateServiceDeprecatedResponse obj = Utilities.DeserializeJson<CreateServiceDeprecatedResponse>(json);

            Assert.AreEqual("911828ec-7c0b-4f93-9ddd-dbc6d21d9e91", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/911828ec-7c0b-4f93-9ddd-dbc6d21d9e91", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
            Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
            Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
            Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
            Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
            Assert.AreEqual("/v2/services/911828ec-7c0b-4f93-9ddd-dbc6d21d9e91/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestUpdateServiceDeprecatedResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""e2cb7bb3-3744-4b82-aa8f-777540f70f47"",
    ""url"": ""/v2/services/e2cb7bb3-3744-4b82-aa8f-777540f70f47"",
    ""created_at"": ""2015-03-23T16:53:17+00:00"",
    ""updated_at"": ""2015-03-23T16:53:17+00:00""
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""c2e53bdd-b26a-449e-abd6-11b48ed62c9b"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""5f5a3a19-61c7-43ce-a3df-dccc0915be3d"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/e2cb7bb3-3744-4b82-aa8f-777540f70f47/service_plans""
  }
}";

            UpdateServiceDeprecatedResponse obj = Utilities.DeserializeJson<UpdateServiceDeprecatedResponse>(json);

            Assert.AreEqual("e2cb7bb3-3744-4b82-aa8f-777540f70f47", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/e2cb7bb3-3744-4b82-aa8f-777540f70f47", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
            Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
            Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
            Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
            Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
            Assert.AreEqual("c2e53bdd-b26a-449e-abd6-11b48ed62c9b", TestUtil.ToTestableString(obj.UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
            Assert.AreEqual("5f5a3a19-61c7-43ce-a3df-dccc0915be3d", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
            Assert.AreEqual("/v2/services/e2cb7bb3-3744-4b82-aa8f-777540f70f47/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);
        }

        [TestMethod]
        public void TestRetrieveServiceResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""621dd909-39b9-4753-817b-01af349b2153"",
    ""url"": ""/v2/services/621dd909-39b9-4753-817b-01af349b2153"",
    ""created_at"": ""2015-03-23T16:53:17+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-11"",
    ""provider"": ""provider-11"",
    ""url"": ""https://foo.com/url-33"",
    ""description"": ""desc-71"",
    ""long_description"": null,
    ""version"": ""version-11"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""e743d383-16d2-4543-a00b-531d675beba1"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""711600fa-cbc7-4e25-89a6-64d65ec2eae6"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/621dd909-39b9-4753-817b-01af349b2153/service_plans""
  }
}";

            RetrieveServiceResponse obj = Utilities.DeserializeJson<RetrieveServiceResponse>(json);

            Assert.AreEqual("621dd909-39b9-4753-817b-01af349b2153", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/services/621dd909-39b9-4753-817b-01af349b2153", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2015-03-23T16:53:17+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("label-11", TestUtil.ToTestableString(obj.Label), true);
            Assert.AreEqual("provider-11", TestUtil.ToTestableString(obj.Provider), true);
            Assert.AreEqual("https://foo.com/url-33", TestUtil.ToTestableString(obj.Url), true);
            Assert.AreEqual("desc-71", TestUtil.ToTestableString(obj.Description), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
            Assert.AreEqual("version-11", TestUtil.ToTestableString(obj.Version), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
            Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
            Assert.AreEqual("e743d383-16d2-4543-a00b-531d675beba1", TestUtil.ToTestableString(obj.UniqueId), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
            Assert.AreEqual("711600fa-cbc7-4e25-89a6-64d65ec2eae6", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
            Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
            Assert.AreEqual("/v2/services/621dd909-39b9-4753-817b-01af349b2153/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);
        }
    }
}
