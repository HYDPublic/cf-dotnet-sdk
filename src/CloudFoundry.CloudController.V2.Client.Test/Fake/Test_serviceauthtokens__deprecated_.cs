//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceauthtokensDeprecatedEndpoint
{
        [TestMethod]
        public void ListAllServiceAuthTokensDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""99b7e07d-89d7-44b8-a65f-f6a6dd35df4b"",
        ""url"": ""/v2/service_auth_tokens/99b7e07d-89d7-44b8-a65f-f6a6dd35df4b"",
        ""created_at"": ""2015-04-10T19:42:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-64"",
        ""provider"": ""provider-55""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""2d2a1783-a979-47d7-83ca-3845fa0aa9b0"",
        ""url"": ""/v2/service_auth_tokens/2d2a1783-a979-47d7-83ca-3845fa0aa9b0"",
        ""created_at"": ""2015-04-10T19:42:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-65"",
        ""provider"": ""provider-56""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""d6dbb899-355b-45d1-9703-8cf241d5dc7c"",
        ""url"": ""/v2/service_auth_tokens/d6dbb899-355b-45d1-9703-8cf241d5dc7c"",
        ""created_at"": ""2015-04-10T19:42:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-66"",
        ""provider"": ""provider-57""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceauthtokensDeprecated.ListAllServiceAuthTokensDeprecated().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("99b7e07d-89d7-44b8-a65f-f6a6dd35df4b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/99b7e07d-89d7-44b8-a65f-f6a6dd35df4b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-64", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-55", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("2d2a1783-a979-47d7-83ca-3845fa0aa9b0", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/2d2a1783-a979-47d7-83ca-3845fa0aa9b0", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-65", TestUtil.ToTestableString(obj[1].Label), true);
                Assert.AreEqual("provider-56", TestUtil.ToTestableString(obj[1].Provider), true);
                Assert.AreEqual("d6dbb899-355b-45d1-9703-8cf241d5dc7c", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/d6dbb899-355b-45d1-9703-8cf241d5dc7c", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-66", TestUtil.ToTestableString(obj[2].Label), true);
                Assert.AreEqual("provider-57", TestUtil.ToTestableString(obj[2].Provider), true);

            }
        }

        [TestMethod]
        public void FilterResultSetByLabelDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8ad3df1d-c680-4e8b-bdd7-e45c7db96a06"",
        ""url"": ""/v2/service_auth_tokens/8ad3df1d-c680-4e8b-bdd7-e45c7db96a06"",
        ""created_at"": ""2015-04-10T19:42:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""Nic-Token"",
        ""provider"": ""provider-61""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceauthtokensDeprecated.FilterResultSetByLabelDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8ad3df1d-c680-4e8b-bdd7-e45c7db96a06", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/8ad3df1d-c680-4e8b-bdd7-e45c7db96a06", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("Nic-Token", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-61", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

        [TestMethod]
        public void DeleteServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceauthtokensDeprecated.DeleteServiceAuthTokenDeprecated(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""aa7b14e8-55bb-456d-9577-cf0ba14dc22a"",
    ""url"": ""/v2/service_auth_tokens/aa7b14e8-55bb-456d-9577-cf0ba14dc22a"",
    ""created_at"": ""2015-04-10T19:42:08+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-77"",
    ""provider"": ""provider-68""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceauthtokensDeprecated.RetrieveServiceAuthTokenDeprecated(guid).Result;


                Assert.AreEqual("aa7b14e8-55bb-456d-9577-cf0ba14dc22a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/aa7b14e8-55bb-456d-9577-cf0ba14dc22a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-77", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("provider-68", TestUtil.ToTestableString(obj.Provider), true);

            }
        }

        [TestMethod]
        public void FilterResultSetByProviderDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ec562205-aace-496a-a0bc-499e819e6356"",
        ""url"": ""/v2/service_auth_tokens/ec562205-aace-496a-a0bc-499e819e6356"",
        ""created_at"": ""2015-04-10T19:42:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-73"",
        ""provider"": ""Face-Offer""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceauthtokensDeprecated.FilterResultSetByProviderDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ec562205-aace-496a-a0bc-499e819e6356", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/ec562205-aace-496a-a0bc-499e819e6356", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:08+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-73", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("Face-Offer", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

    }
}