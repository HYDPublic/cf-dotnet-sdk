//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceAuthTokensDeprecatedEndpoint
{
        [TestMethod]
        public void ListAllServiceAuthTokensDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""260cec9c-f9ea-4474-a36b-36de0a5e7c2e"",
        ""url"": ""/v2/service_auth_tokens/260cec9c-f9ea-4474-a36b-36de0a5e7c2e"",
        ""created_at"": ""2015-07-28T12:59:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-56"",
        ""provider"": ""provider-43""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""af714058-8d2f-4fd6-9321-4bad149488a9"",
        ""url"": ""/v2/service_auth_tokens/af714058-8d2f-4fd6-9321-4bad149488a9"",
        ""created_at"": ""2015-07-28T12:59:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-57"",
        ""provider"": ""provider-44""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""7ea9d304-7e36-484a-95f9-44f05ef5cb21"",
        ""url"": ""/v2/service_auth_tokens/7ea9d304-7e36-484a-95f9-44f05ef5cb21"",
        ""created_at"": ""2015-07-28T12:59:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-58"",
        ""provider"": ""provider-45""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.ListAllServiceAuthTokensDeprecated().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("260cec9c-f9ea-4474-a36b-36de0a5e7c2e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/260cec9c-f9ea-4474-a36b-36de0a5e7c2e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-56", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-43", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("af714058-8d2f-4fd6-9321-4bad149488a9", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/af714058-8d2f-4fd6-9321-4bad149488a9", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-57", TestUtil.ToTestableString(obj[1].Label), true);
                Assert.AreEqual("provider-44", TestUtil.ToTestableString(obj[1].Provider), true);
                Assert.AreEqual("7ea9d304-7e36-484a-95f9-44f05ef5cb21", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/7ea9d304-7e36-484a-95f9-44f05ef5cb21", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-58", TestUtil.ToTestableString(obj[2].Label), true);
                Assert.AreEqual("provider-45", TestUtil.ToTestableString(obj[2].Provider), true);

            }
        }

        [TestMethod]
        public void FilterResultSetByLabelDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bf93ecd0-c440-4d61-a1f8-caab57580cf2"",
        ""url"": ""/v2/service_auth_tokens/bf93ecd0-c440-4d61-a1f8-caab57580cf2"",
        ""created_at"": ""2015-07-28T12:59:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""Nic-Token"",
        ""provider"": ""provider-42""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.FilterResultSetByLabelDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bf93ecd0-c440-4d61-a1f8-caab57580cf2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/bf93ecd0-c440-4d61-a1f8-caab57580cf2", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("Nic-Token", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-42", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

        [TestMethod]
        public void DeleteServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceAuthTokensDeprecated.DeleteServiceAuthTokenDeprecated(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""31091ba1-7fb9-4a16-91e7-f5f19d4fd43e"",
    ""url"": ""/v2/service_auth_tokens/31091ba1-7fb9-4a16-91e7-f5f19d4fd43e"",
    ""created_at"": ""2015-07-28T12:59:07Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-43"",
    ""provider"": ""provider-30""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceAuthTokensDeprecated.RetrieveServiceAuthTokenDeprecated(guid).Result;


                Assert.AreEqual("31091ba1-7fb9-4a16-91e7-f5f19d4fd43e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/31091ba1-7fb9-4a16-91e7-f5f19d4fd43e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-43", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("provider-30", TestUtil.ToTestableString(obj.Provider), true);

            }
        }

        [TestMethod]
        public void FilterResultSetByProviderDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9f71a8f8-3b3c-472f-99b2-58178aafd5d3"",
        ""url"": ""/v2/service_auth_tokens/9f71a8f8-3b3c-472f-99b2-58178aafd5d3"",
        ""created_at"": ""2015-07-28T12:59:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-52"",
        ""provider"": ""Face-Offer""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.FilterResultSetByProviderDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9f71a8f8-3b3c-472f-99b2-58178aafd5d3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/9f71a8f8-3b3c-472f-99b2-58178aafd5d3", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:07Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-52", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("Face-Offer", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

    }
}