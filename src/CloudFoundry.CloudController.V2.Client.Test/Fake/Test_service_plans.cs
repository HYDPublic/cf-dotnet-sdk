//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5242d000-695e-48ca-968f-5c71ddf9de62"",
    ""url"": ""/v2/service_plans/42bc81c0-3d37-4d07-b6ce-8dd9ae48bc3d"",
    ""created_at"": ""2016-05-26T11:34:22Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-48"",
    ""free"": false,
    ""description"": ""desc-18"",
    ""service_guid"": ""5242d000-695e-48ca-968f-5c71ddf9de62"",
    ""extra"": null,
    ""unique_id"": ""eba07449-1470-466f-ae88-fde067b9fac1"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/cac64def-b5ba-4c81-9c8a-d08f0343c42b"",
    ""service_instances_url"": ""/v2/service_plans/42bc81c0-3d37-4d07-b6ce-8dd9ae48bc3d/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("5242d000-695e-48ca-968f-5c71ddf9de62", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/42bc81c0-3d37-4d07-b6ce-8dd9ae48bc3d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:22Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-48", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-18", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("5242d000-695e-48ca-968f-5c71ddf9de62", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("eba07449-1470-466f-ae88-fde067b9fac1", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/cac64def-b5ba-4c81-9c8a-d08f0343c42b", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/42bc81c0-3d37-4d07-b6ce-8dd9ae48bc3d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cfe3cbf4-e2dd-4983-906f-0128c902cbe6"",
        ""url"": ""/v2/service_plans/6b0184e2-86fe-4ff2-892a-1d1dda29579e"",
        ""created_at"": ""2016-05-26T11:34:22Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-46"",
        ""free"": false,
        ""description"": ""desc-16"",
        ""service_guid"": ""cfe3cbf4-e2dd-4983-906f-0128c902cbe6"",
        ""extra"": null,
        ""unique_id"": ""4a168eb9-cb93-4743-8d31-90fc5aa26ab8"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/6b2d1da0-991e-4f3b-887b-1a9b0c34dc3a"",
        ""service_instances_url"": ""/v2/service_plans/6b0184e2-86fe-4ff2-892a-1d1dda29579e/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cfe3cbf4-e2dd-4983-906f-0128c902cbe6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/6b0184e2-86fe-4ff2-892a-1d1dda29579e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:22Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-46", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-16", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("cfe3cbf4-e2dd-4983-906f-0128c902cbe6", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("4a168eb9-cb93-4743-8d31-90fc5aa26ab8", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/6b2d1da0-991e-4f3b-887b-1a9b0c34dc3a", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/6b0184e2-86fe-4ff2-892a-1d1dda29579e/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f1add19f-77df-472c-9042-93cdb1832218"",
        ""url"": ""/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6"",
        ""created_at"": ""2016-05-26T11:34:22Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-54"",
        ""credentials"": {
          ""creds-key-10"": ""creds-val-10""
        },
        ""service_plan_guid"": ""f1add19f-77df-472c-9042-93cdb1832218"",
        ""space_guid"": ""f1add19f-77df-472c-9042-93cdb1832218"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""space_url"": ""/v2/spaces/767d8f52-3852-42bb-a5db-7a221b13ca59"",
        ""service_plan_url"": ""/v2/service_plans/492e9423-fe2d-4c31-9706-deb43fec9d27"",
        ""service_bindings_url"": ""/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/service_keys"",
        ""routes_url"": ""/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f1add19f-77df-472c-9042-93cdb1832218", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:22Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-54", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f1add19f-77df-472c-9042-93cdb1832218", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("f1add19f-77df-472c-9042-93cdb1832218", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/767d8f52-3852-42bb-a5db-7a221b13ca59", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/492e9423-fe2d-4c31-9706-deb43fec9d27", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/00ff015d-c015-49a4-9b63-8583d406e1e6/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""392f90b2-3112-4f95-a64d-3fd750f54e64"",
    ""url"": ""/v2/service_plans/5b30685b-421f-4cd3-a996-7d8d989e62f5"",
    ""created_at"": ""2016-05-26T11:34:22Z"",
    ""updated_at"": ""2016-05-26T11:34:22Z""
  },
  ""entity"": {
    ""name"": ""name-44"",
    ""free"": false,
    ""description"": ""desc-14"",
    ""service_guid"": ""392f90b2-3112-4f95-a64d-3fd750f54e64"",
    ""extra"": null,
    ""unique_id"": ""c19b5d46-0df8-4d47-924e-407707b079cb"",
    ""public"": false,
    ""active"": true,
    ""service_url"": ""/v2/services/51ea28fb-9104-4f93-af35-390993244e99"",
    ""service_instances_url"": ""/v2/service_plans/5b30685b-421f-4cd3-a996-7d8d989e62f5/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanRequest value = new UpdateServicePlanRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlan(value).Result;


                Assert.AreEqual("392f90b2-3112-4f95-a64d-3fd750f54e64", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/5b30685b-421f-4cd3-a996-7d8d989e62f5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:22Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-26T11:34:22Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-44", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-14", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("392f90b2-3112-4f95-a64d-3fd750f54e64", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("c19b5d46-0df8-4d47-924e-407707b079cb", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/51ea28fb-9104-4f93-af35-390993244e99", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/5b30685b-421f-4cd3-a996-7d8d989e62f5/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

    }
}