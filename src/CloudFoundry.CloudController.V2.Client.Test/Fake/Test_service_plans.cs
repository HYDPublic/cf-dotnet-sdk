//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void UpdateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b"",
    ""url"": ""/v2/service_plans/190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b"",
    ""created_at"": ""2015-03-25T13:48:56+00:00"",
    ""updated_at"": ""2015-03-25T13:48:56+00:00""
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""112164b9-d723-40fe-9db5-f834bbde8785"",
    ""extra"": null,
    ""unique_id"": ""2458a3b1-8069-4f25-b3ad-de5523b53a9b"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/112164b9-d723-40fe-9db5-f834bbde8785"",
    ""service_instances_url"": ""/v2/service_plans/190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanDeprecatedRequest value = new UpdateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlanDeprecated(value).Result;


                Assert.AreEqual("190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("112164b9-d723-40fe-9db5-f834bbde8785", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("2458a3b1-8069-4f25-b3ad-de5523b53a9b", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/112164b9-d723-40fe-9db5-f834bbde8785", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/190f7aa8-0452-42e4-9b8b-5bd3b1c97c6b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b28ec3dd-3488-4063-80f1-545fb712f0df"",
    ""url"": ""/v2/service_plans/b28ec3dd-3488-4063-80f1-545fb712f0df"",
    ""created_at"": ""2015-03-25T13:48:56+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""1ef41ea8-792c-4061-b6e8-a5a583ba9fe3"",
    ""extra"": null,
    ""unique_id"": ""2dac3125-3dc2-40ff-8344-c9b720ce1954"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/1ef41ea8-792c-4061-b6e8-a5a583ba9fe3"",
    ""service_instances_url"": ""/v2/service_plans/b28ec3dd-3488-4063-80f1-545fb712f0df/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServicePlanDeprecatedRequest value = new CreateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.CreateServicePlanDeprecated(value).Result;


                Assert.AreEqual("b28ec3dd-3488-4063-80f1-545fb712f0df", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/b28ec3dd-3488-4063-80f1-545fb712f0df", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("1ef41ea8-792c-4061-b6e8-a5a583ba9fe3", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("2dac3125-3dc2-40ff-8344-c9b720ce1954", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/1ef41ea8-792c-4061-b6e8-a5a583ba9fe3", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/b28ec3dd-3488-4063-80f1-545fb712f0df/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4fe96826-1173-44c3-9b1f-18a39f4ad3cd"",
        ""url"": ""/v2/service_instances/4fe96826-1173-44c3-9b1f-18a39f4ad3cd"",
        ""created_at"": ""2015-03-25T13:48:56+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1736"",
        ""credentials"": {
          ""creds-key-444"": ""creds-val-444""
        },
        ""service_plan_guid"": ""a4562660-37c7-4a90-83c6-5986201006be"",
        ""space_guid"": ""9a4b76a1-80ac-48f6-9dd7-1ba0c425e06f"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""space_url"": ""/v2/spaces/9a4b76a1-80ac-48f6-9dd7-1ba0c425e06f"",
        ""service_plan_url"": ""/v2/service_plans/a4562660-37c7-4a90-83c6-5986201006be"",
        ""service_bindings_url"": ""/v2/service_instances/4fe96826-1173-44c3-9b1f-18a39f4ad3cd/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4fe96826-1173-44c3-9b1f-18a39f4ad3cd", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/4fe96826-1173-44c3-9b1f-18a39f4ad3cd", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1736", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("a4562660-37c7-4a90-83c6-5986201006be", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("9a4b76a1-80ac-48f6-9dd7-1ba0c425e06f", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/9a4b76a1-80ac-48f6-9dd7-1ba0c425e06f", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/a4562660-37c7-4a90-83c6-5986201006be", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/4fe96826-1173-44c3-9b1f-18a39f4ad3cd/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""be631fb3-1f94-4805-87e6-cedd1abef716"",
    ""url"": ""/v2/service_plans/be631fb3-1f94-4805-87e6-cedd1abef716"",
    ""created_at"": ""2015-03-25T13:48:56+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1742"",
    ""free"": false,
    ""description"": ""desc-160"",
    ""service_guid"": ""39f6f793-1bbd-45e7-85bb-597bb4d0f566"",
    ""extra"": null,
    ""unique_id"": ""664318da-4aa0-43f5-8df9-020f22432e0b"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/39f6f793-1bbd-45e7-85bb-597bb4d0f566"",
    ""service_instances_url"": ""/v2/service_plans/be631fb3-1f94-4805-87e6-cedd1abef716/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("be631fb3-1f94-4805-87e6-cedd1abef716", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/be631fb3-1f94-4805-87e6-cedd1abef716", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1742", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-160", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("39f6f793-1bbd-45e7-85bb-597bb4d0f566", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("664318da-4aa0-43f5-8df9-020f22432e0b", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/39f6f793-1bbd-45e7-85bb-597bb4d0f566", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/be631fb3-1f94-4805-87e6-cedd1abef716/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9fe9eaa9-865a-42fc-bede-073025a5abf9"",
        ""url"": ""/v2/service_plans/9fe9eaa9-865a-42fc-bede-073025a5abf9"",
        ""created_at"": ""2015-03-25T13:48:56+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1744"",
        ""free"": false,
        ""description"": ""desc-164"",
        ""service_guid"": ""66da17ca-9fdb-4929-bf62-099288b1211c"",
        ""extra"": null,
        ""unique_id"": ""52bd9a11-d956-422c-a66e-6ea294fd7bea"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/66da17ca-9fdb-4929-bf62-099288b1211c"",
        ""service_instances_url"": ""/v2/service_plans/9fe9eaa9-865a-42fc-bede-073025a5abf9/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9fe9eaa9-865a-42fc-bede-073025a5abf9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/9fe9eaa9-865a-42fc-bede-073025a5abf9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:56+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1744", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-164", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("66da17ca-9fdb-4929-bf62-099288b1211c", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("52bd9a11-d956-422c-a66e-6ea294fd7bea", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/66da17ca-9fdb-4929-bf62-099288b1211c", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/9fe9eaa9-865a-42fc-bede-073025a5abf9/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

    }
}