//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void UpdateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""58a7b068-316f-4f52-9d27-515cefe752a6"",
    ""url"": ""/v2/service_plans/58a7b068-316f-4f52-9d27-515cefe752a6"",
    ""created_at"": ""2015-04-16T12:04:29+00:00"",
    ""updated_at"": ""2015-04-16T12:04:29+00:00""
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""055e1e25-9690-4fec-8b26-8806ae61fd40"",
    ""extra"": null,
    ""unique_id"": ""adc134d9-24a7-4577-a8c9-7fc1ea9fbe27"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/055e1e25-9690-4fec-8b26-8806ae61fd40"",
    ""service_instances_url"": ""/v2/service_plans/58a7b068-316f-4f52-9d27-515cefe752a6/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanDeprecatedRequest value = new UpdateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlanDeprecated(value).Result;


                Assert.AreEqual("58a7b068-316f-4f52-9d27-515cefe752a6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/58a7b068-316f-4f52-9d27-515cefe752a6", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:29+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:29+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("055e1e25-9690-4fec-8b26-8806ae61fd40", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("adc134d9-24a7-4577-a8c9-7fc1ea9fbe27", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/055e1e25-9690-4fec-8b26-8806ae61fd40", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/58a7b068-316f-4f52-9d27-515cefe752a6/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""dc5c468a-3b14-41f5-8f4d-520430f16d27"",
    ""url"": ""/v2/service_plans/dc5c468a-3b14-41f5-8f4d-520430f16d27"",
    ""created_at"": ""2015-04-16T12:04:29+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""97cdef48-22fa-4901-944a-e943586677bd"",
    ""extra"": null,
    ""unique_id"": ""4a42521f-9e4a-4407-936f-795e997cecb2"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/97cdef48-22fa-4901-944a-e943586677bd"",
    ""service_instances_url"": ""/v2/service_plans/dc5c468a-3b14-41f5-8f4d-520430f16d27/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServicePlanDeprecatedRequest value = new CreateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.CreateServicePlanDeprecated(value).Result;


                Assert.AreEqual("dc5c468a-3b14-41f5-8f4d-520430f16d27", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/dc5c468a-3b14-41f5-8f4d-520430f16d27", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:29+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("97cdef48-22fa-4901-944a-e943586677bd", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("4a42521f-9e4a-4407-936f-795e997cecb2", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/97cdef48-22fa-4901-944a-e943586677bd", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/dc5c468a-3b14-41f5-8f4d-520430f16d27/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""139406e3-142c-4e8c-95db-cd0e0e96b74c"",
        ""url"": ""/v2/service_instances/139406e3-142c-4e8c-95db-cd0e0e96b74c"",
        ""created_at"": ""2015-04-16T12:04:30+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1378"",
        ""credentials"": {
          ""creds-key-442"": ""creds-val-442""
        },
        ""service_plan_guid"": ""c5c9f6b4-4dc9-4eb3-b336-6a6675cfc9f7"",
        ""space_guid"": ""229023c0-8b33-4de1-96f0-ad59701cc7a1"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""space_url"": ""/v2/spaces/229023c0-8b33-4de1-96f0-ad59701cc7a1"",
        ""service_plan_url"": ""/v2/service_plans/c5c9f6b4-4dc9-4eb3-b336-6a6675cfc9f7"",
        ""service_bindings_url"": ""/v2/service_instances/139406e3-142c-4e8c-95db-cd0e0e96b74c/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("139406e3-142c-4e8c-95db-cd0e0e96b74c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/139406e3-142c-4e8c-95db-cd0e0e96b74c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:30+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1378", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("c5c9f6b4-4dc9-4eb3-b336-6a6675cfc9f7", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("229023c0-8b33-4de1-96f0-ad59701cc7a1", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/229023c0-8b33-4de1-96f0-ad59701cc7a1", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/c5c9f6b4-4dc9-4eb3-b336-6a6675cfc9f7", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/139406e3-142c-4e8c-95db-cd0e0e96b74c/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c7b19a99-8df5-40c2-ab7d-89cc69a05ba4"",
    ""url"": ""/v2/service_plans/c7b19a99-8df5-40c2-ab7d-89cc69a05ba4"",
    ""created_at"": ""2015-04-16T12:04:29+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1375"",
    ""free"": false,
    ""description"": ""desc-101"",
    ""service_guid"": ""57734bfb-e185-44e3-b2ce-b59295c5c8c7"",
    ""extra"": null,
    ""unique_id"": ""ab4c0dca-4f18-4125-a044-b4503e4549c5"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/57734bfb-e185-44e3-b2ce-b59295c5c8c7"",
    ""service_instances_url"": ""/v2/service_plans/c7b19a99-8df5-40c2-ab7d-89cc69a05ba4/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("c7b19a99-8df5-40c2-ab7d-89cc69a05ba4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/c7b19a99-8df5-40c2-ab7d-89cc69a05ba4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:29+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1375", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-101", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("57734bfb-e185-44e3-b2ce-b59295c5c8c7", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("ab4c0dca-4f18-4125-a044-b4503e4549c5", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/57734bfb-e185-44e3-b2ce-b59295c5c8c7", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/c7b19a99-8df5-40c2-ab7d-89cc69a05ba4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""193fd1d9-d143-4501-82d0-1dad76ff0640"",
        ""url"": ""/v2/service_plans/193fd1d9-d143-4501-82d0-1dad76ff0640"",
        ""created_at"": ""2015-04-16T12:04:29+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1372"",
        ""free"": false,
        ""description"": ""desc-95"",
        ""service_guid"": ""76f0479a-4585-457c-9c4a-e074f909ef9c"",
        ""extra"": null,
        ""unique_id"": ""b7cf7aac-84b7-4477-8ff3-45d653594707"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/76f0479a-4585-457c-9c4a-e074f909ef9c"",
        ""service_instances_url"": ""/v2/service_plans/193fd1d9-d143-4501-82d0-1dad76ff0640/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("193fd1d9-d143-4501-82d0-1dad76ff0640", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/193fd1d9-d143-4501-82d0-1dad76ff0640", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:29+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1372", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-95", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("76f0479a-4585-457c-9c4a-e074f909ef9c", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("b7cf7aac-84b7-4477-8ff3-45d653594707", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/76f0479a-4585-457c-9c4a-e074f909ef9c", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/193fd1d9-d143-4501-82d0-1dad76ff0640/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

    }
}