//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""260b3e9d-86cc-466e-a639-c182d080f1b1"",
    ""url"": ""/v2/service_plans/dd101e0d-fbfc-44f0-bcac-db9957abb5b5"",
    ""created_at"": ""2016-03-21T10:59:54Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2656"",
    ""free"": false,
    ""description"": ""desc-222"",
    ""service_guid"": ""260b3e9d-86cc-466e-a639-c182d080f1b1"",
    ""extra"": null,
    ""unique_id"": ""a26361be-7d35-46ff-a924-86e987f058c7"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/2dbd35ca-9040-4712-a99e-afdd899d7286"",
    ""service_instances_url"": ""/v2/service_plans/dd101e0d-fbfc-44f0-bcac-db9957abb5b5/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("260b3e9d-86cc-466e-a639-c182d080f1b1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/dd101e0d-fbfc-44f0-bcac-db9957abb5b5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2656", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-222", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("260b3e9d-86cc-466e-a639-c182d080f1b1", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("a26361be-7d35-46ff-a924-86e987f058c7", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/2dbd35ca-9040-4712-a99e-afdd899d7286", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/dd101e0d-fbfc-44f0-bcac-db9957abb5b5/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e991ec5e-0eab-4507-8f98-83160957c0ba"",
        ""url"": ""/v2/service_plans/9b323052-a7cf-4fdd-b17a-62fe8b0bdc32"",
        ""created_at"": ""2016-03-21T10:59:54Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2660"",
        ""free"": false,
        ""description"": ""desc-226"",
        ""service_guid"": ""e991ec5e-0eab-4507-8f98-83160957c0ba"",
        ""extra"": null,
        ""unique_id"": ""a7a833b3-ec68-4a6e-a914-6932a26d6222"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/9d682fd8-d691-490f-99b8-684e300580e5"",
        ""service_instances_url"": ""/v2/service_plans/9b323052-a7cf-4fdd-b17a-62fe8b0bdc32/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e991ec5e-0eab-4507-8f98-83160957c0ba", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/9b323052-a7cf-4fdd-b17a-62fe8b0bdc32", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2660", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-226", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("e991ec5e-0eab-4507-8f98-83160957c0ba", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("a7a833b3-ec68-4a6e-a914-6932a26d6222", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/9d682fd8-d691-490f-99b8-684e300580e5", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/9b323052-a7cf-4fdd-b17a-62fe8b0bdc32/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f5a5dcc9-e354-42a0-a3cc-006847dbda0e"",
        ""url"": ""/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363"",
        ""created_at"": ""2016-03-21T10:59:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2666"",
        ""credentials"": {
          ""creds-key-71"": ""creds-val-71""
        },
        ""service_plan_guid"": ""f5a5dcc9-e354-42a0-a3cc-006847dbda0e"",
        ""space_guid"": ""f5a5dcc9-e354-42a0-a3cc-006847dbda0e"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""space_url"": ""/v2/spaces/3ed730d3-5fce-4b32-9975-c55bf8a3611e"",
        ""service_plan_url"": ""/v2/service_plans/ea5ac497-02a3-4a94-b151-da1456bebdf4"",
        ""service_bindings_url"": ""/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/service_keys"",
        ""routes_url"": ""/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f5a5dcc9-e354-42a0-a3cc-006847dbda0e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2666", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f5a5dcc9-e354-42a0-a3cc-006847dbda0e", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("f5a5dcc9-e354-42a0-a3cc-006847dbda0e", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/3ed730d3-5fce-4b32-9975-c55bf8a3611e", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/ea5ac497-02a3-4a94-b151-da1456bebdf4", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/6b079eb4-49f9-4f72-8190-ef6f53c2e363/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f59dd332-7213-4dfa-9cb2-e3f902c6f3f7"",
    ""url"": ""/v2/service_plans/950771d1-6186-421b-8ed3-81f6cffb399b"",
    ""created_at"": ""2016-03-21T10:59:54Z"",
    ""updated_at"": ""2016-03-21T10:59:54Z""
  },
  ""entity"": {
    ""name"": ""name-2658"",
    ""free"": false,
    ""description"": ""desc-224"",
    ""service_guid"": ""f59dd332-7213-4dfa-9cb2-e3f902c6f3f7"",
    ""extra"": null,
    ""unique_id"": ""84fe129e-b3a9-45dc-bb19-dda5568db3c5"",
    ""public"": false,
    ""active"": true,
    ""service_url"": ""/v2/services/5eab959b-b70a-489f-8104-95f350962604"",
    ""service_instances_url"": ""/v2/service_plans/950771d1-6186-421b-8ed3-81f6cffb399b/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanRequest value = new UpdateServicePlanRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlan(value).Result;


                Assert.AreEqual("f59dd332-7213-4dfa-9cb2-e3f902c6f3f7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/950771d1-6186-421b-8ed3-81f6cffb399b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2658", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-224", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("f59dd332-7213-4dfa-9cb2-e3f902c6f3f7", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("84fe129e-b3a9-45dc-bb19-dda5568db3c5", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/5eab959b-b70a-489f-8104-95f350962604", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/950771d1-6186-421b-8ed3-81f6cffb399b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

    }
}