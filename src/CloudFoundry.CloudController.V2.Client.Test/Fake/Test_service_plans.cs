//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicePlansEndpoint
{
        [TestMethod]
        public void UpdateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""62e7d109-722c-48b1-9f55-519ec35ded01"",
    ""url"": ""/v2/service_plans/62e7d109-722c-48b1-9f55-519ec35ded01"",
    ""created_at"": ""2015-04-10T19:41:59+00:00"",
    ""updated_at"": ""2015-04-10T19:41:59+00:00""
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""1948bb86-f674-4ede-8f70-bd5f4a17d25e"",
    ""extra"": null,
    ""unique_id"": ""016d163e-ce61-4e91-9924-572a4335c7bf"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/1948bb86-f674-4ede-8f70-bd5f4a17d25e"",
    ""service_instances_url"": ""/v2/service_plans/62e7d109-722c-48b1-9f55-519ec35ded01/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServicePlanDeprecatedRequest value = new UpdateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.UpdateServicePlanDeprecated(value).Result;


                Assert.AreEqual("62e7d109-722c-48b1-9f55-519ec35ded01", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/62e7d109-722c-48b1-9f55-519ec35ded01", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T19:41:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("1948bb86-f674-4ede-8f70-bd5f4a17d25e", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("016d163e-ce61-4e91-9924-572a4335c7bf", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/1948bb86-f674-4ede-8f70-bd5f4a17d25e", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/62e7d109-722c-48b1-9f55-519ec35ded01/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServicePlans.DeleteServicePlans(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServicePlanDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a5009a1f-4688-4753-9e64-5afc29bce2be"",
    ""url"": ""/v2/service_plans/a5009a1f-4688-4753-9e64-5afc29bce2be"",
    ""created_at"": ""2015-04-10T19:42:00+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""100mb"",
    ""free"": true,
    ""description"": ""Let's you put data in your database!"",
    ""service_guid"": ""48b50dac-852c-406a-a97c-5a50cefa7025"",
    ""extra"": null,
    ""unique_id"": ""9653bcd4-51a8-42a6-91b9-c333b5280a13"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/48b50dac-852c-406a-a97c-5a50cefa7025"",
    ""service_instances_url"": ""/v2/service_plans/a5009a1f-4688-4753-9e64-5afc29bce2be/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServicePlanDeprecatedRequest value = new CreateServicePlanDeprecatedRequest();


                var obj = cfClient.ServicePlans.CreateServicePlanDeprecated(value).Result;


                Assert.AreEqual("a5009a1f-4688-4753-9e64-5afc29bce2be", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/a5009a1f-4688-4753-9e64-5afc29bce2be", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:00+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("100mb", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("Let's you put data in your database!", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("48b50dac-852c-406a-a97c-5a50cefa7025", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("9653bcd4-51a8-42a6-91b9-c333b5280a13", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/48b50dac-852c-406a-a97c-5a50cefa7025", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/a5009a1f-4688-4753-9e64-5afc29bce2be/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""21885049-ec08-44a0-9d09-887197c0a06b"",
        ""url"": ""/v2/service_instances/21885049-ec08-44a0-9d09-887197c0a06b"",
        ""created_at"": ""2015-04-10T19:42:00+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1254"",
        ""credentials"": {
          ""creds-key-307"": ""creds-val-307""
        },
        ""service_plan_guid"": ""f591d4ec-37b9-4cba-a640-39b6f246388b"",
        ""space_guid"": ""3c5b7def-8130-4844-abd2-a44200e8dc76"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""space_url"": ""/v2/spaces/3c5b7def-8130-4844-abd2-a44200e8dc76"",
        ""service_plan_url"": ""/v2/service_plans/f591d4ec-37b9-4cba-a640-39b6f246388b"",
        ""service_bindings_url"": ""/v2/service_instances/21885049-ec08-44a0-9d09-887197c0a06b/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.ListAllServiceInstancesForServicePlan(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("21885049-ec08-44a0-9d09-887197c0a06b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/21885049-ec08-44a0-9d09-887197c0a06b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:00+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1254", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f591d4ec-37b9-4cba-a640-39b6f246388b", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("3c5b7def-8130-4844-abd2-a44200e8dc76", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/3c5b7def-8130-4844-abd2-a44200e8dc76", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/f591d4ec-37b9-4cba-a640-39b6f246388b", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/21885049-ec08-44a0-9d09-887197c0a06b/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServicePlanTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d95f6594-9a48-4be4-9328-07059c399dde"",
    ""url"": ""/v2/service_plans/d95f6594-9a48-4be4-9328-07059c399dde"",
    ""created_at"": ""2015-04-10T19:42:00+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1252"",
    ""free"": false,
    ""description"": ""desc-113"",
    ""service_guid"": ""6d2b599f-183a-4b02-b18a-9f4f6fa9f4ef"",
    ""extra"": null,
    ""unique_id"": ""1c34f9c2-0bac-4432-bffd-0e386baffbb3"",
    ""public"": true,
    ""active"": true,
    ""service_url"": ""/v2/services/6d2b599f-183a-4b02-b18a-9f4f6fa9f4ef"",
    ""service_instances_url"": ""/v2/service_plans/d95f6594-9a48-4be4-9328-07059c399dde/service_instances""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServicePlans.RetrieveServicePlan(guid).Result;


                Assert.AreEqual("d95f6594-9a48-4be4-9328-07059c399dde", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/d95f6594-9a48-4be4-9328-07059c399dde", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:42:00+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1252", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Free), true);
                Assert.AreEqual("desc-113", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("6d2b599f-183a-4b02-b18a-9f4f6fa9f4ef", TestUtil.ToTestableString(obj.ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("1c34f9c2-0bac-4432-bffd-0e386baffbb3", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("/v2/services/6d2b599f-183a-4b02-b18a-9f4f6fa9f4ef", TestUtil.ToTestableString(obj.ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/d95f6594-9a48-4be4-9328-07059c399dde/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""fc8a2b2c-1949-43ee-bad8-b43cb7126318"",
        ""url"": ""/v2/service_plans/fc8a2b2c-1949-43ee-bad8-b43cb7126318"",
        ""created_at"": ""2015-04-10T19:41:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1248"",
        ""free"": false,
        ""description"": ""desc-105"",
        ""service_guid"": ""f91a8f61-1e66-491c-ae8a-d42454985286"",
        ""extra"": null,
        ""unique_id"": ""04744daf-a8ec-4b75-a9f0-1fc34fed69b7"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/f91a8f61-1e66-491c-ae8a-d42454985286"",
        ""service_instances_url"": ""/v2/service_plans/fc8a2b2c-1949-43ee-bad8-b43cb7126318/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServicePlans.ListAllServicePlans().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("fc8a2b2c-1949-43ee-bad8-b43cb7126318", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/fc8a2b2c-1949-43ee-bad8-b43cb7126318", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1248", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-105", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("f91a8f61-1e66-491c-ae8a-d42454985286", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("04744daf-a8ec-4b75-a9f0-1fc34fed69b7", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/f91a8f61-1e66-491c-ae8a-d42454985286", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/fc8a2b2c-1949-43ee-bad8-b43cb7126318/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

    }
}