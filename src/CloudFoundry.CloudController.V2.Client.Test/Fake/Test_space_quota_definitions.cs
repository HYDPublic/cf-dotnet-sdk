//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpaceQuotaDefinitionsEndpoint
{
        [TestMethod]
        public void RemoveSpaceFromSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                cfClient.SpaceQuotaDefinitions.RemoveSpaceFromSpaceQuotaDefinition(guid, space_guid).Wait();

            }
        }

        [TestMethod]
        public void DeleteSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.SpaceQuotaDefinitions.DeleteSpaceQuotaDefinition(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""81b62afe-6593-484c-abb2-e9f7062ddd29"",
    ""url"": ""/v2/space_quota_definitions/79f8db50-12bb-4bc5-b1d4-943500879c3e"",
    ""created_at"": ""2016-07-27T14:02:45Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-916"",
    ""organization_guid"": ""81b62afe-6593-484c-abb2-e9f7062ddd29"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/c426becd-210f-463f-a1bd-c67918dda1e2"",
    ""spaces_url"": ""/v2/space_quota_definitions/79f8db50-12bb-4bc5-b1d4-943500879c3e/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.RetrieveSpaceQuotaDefinition(guid).Result;


                Assert.AreEqual("81b62afe-6593-484c-abb2-e9f7062ddd29", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/79f8db50-12bb-4bc5-b1d4-943500879c3e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-916", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("81b62afe-6593-484c-abb2-e9f7062ddd29", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/c426becd-210f-463f-a1bd-c67918dda1e2", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/79f8db50-12bb-4bc5-b1d4-943500879c3e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2bc3763b-06ab-4c99-9d2b-8b62a921cb3c"",
    ""url"": ""/v2/space_quota_definitions/7165c989-df4c-4d73-a4eb-dead59b7609f"",
    ""created_at"": ""2016-07-27T14:02:45Z"",
    ""updated_at"": ""2016-07-27T14:02:45Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""organization_guid"": ""2bc3763b-06ab-4c99-9d2b-8b62a921cb3c"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/52d0c501-3444-4724-a305-4a7ef8eb5197"",
    ""spaces_url"": ""/v2/space_quota_definitions/7165c989-df4c-4d73-a4eb-dead59b7609f/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceQuotaDefinitionRequest value = new UpdateSpaceQuotaDefinitionRequest();


                var obj = cfClient.SpaceQuotaDefinitions.UpdateSpaceQuotaDefinition(guid, value).Result;


                Assert.AreEqual("2bc3763b-06ab-4c99-9d2b-8b62a921cb3c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/7165c989-df4c-4d73-a4eb-dead59b7609f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-27T14:02:45Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2bc3763b-06ab-4c99-9d2b-8b62a921cb3c", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/52d0c501-3444-4724-a305-4a7ef8eb5197", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/7165c989-df4c-4d73-a4eb-dead59b7609f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a638abbe-a831-4374-9ed5-0db26195934e"",
        ""url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837"",
        ""created_at"": ""2016-07-27T14:02:46Z"",
        ""updated_at"": ""2016-07-27T14:02:46Z""
      },
      ""entity"": {
        ""name"": ""name-925"",
        ""organization_guid"": ""a638abbe-a831-4374-9ed5-0db26195934e"",
        ""space_quota_definition_guid"": ""a638abbe-a831-4374-9ed5-0db26195934e"",
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/f358dc02-ed2b-4b75-a778-90139dd69fc4"",
        ""space_quota_definition_url"": ""/v2/space_quota_definitions/6ef81d88-7f11-49f2-9795-62cac4ac357d"",
        ""developers_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/developers"",
        ""managers_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/managers"",
        ""auditors_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/auditors"",
        ""apps_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/apps"",
        ""routes_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/routes"",
        ""domains_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/domains"",
        ""service_instances_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/service_instances"",
        ""app_events_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/app_events"",
        ""events_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/events"",
        ""security_groups_url"": ""/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.ListAllSpacesForSpaceQuotaDefinition(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a638abbe-a831-4374-9ed5-0db26195934e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-925", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("a638abbe-a831-4374-9ed5-0db26195934e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("a638abbe-a831-4374-9ed5-0db26195934e", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/f358dc02-ed2b-4b75-a778-90139dd69fc4", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/6ef81d88-7f11-49f2-9795-62cac4ac357d", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d7266f5e-94ad-48f9-8c7e-471027d3e837/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""863d3bb9-13fd-43e8-810b-2db80881ca4e"",
    ""url"": ""/v2/space_quota_definitions/bcc1d6bf-1597-4955-ba7e-4ff6ee2a9b4e"",
    ""created_at"": ""2016-07-27T14:02:46Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-932"",
    ""organization_guid"": ""863d3bb9-13fd-43e8-810b-2db80881ca4e"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/a84ae476-11e2-4988-93a5-6deefe12260a"",
    ""spaces_url"": ""/v2/space_quota_definitions/bcc1d6bf-1597-4955-ba7e-4ff6ee2a9b4e/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.AssociateSpaceWithSpaceQuotaDefinition(guid, space_guid).Result;


                Assert.AreEqual("863d3bb9-13fd-43e8-810b-2db80881ca4e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/bcc1d6bf-1597-4955-ba7e-4ff6ee2a9b4e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-932", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("863d3bb9-13fd-43e8-810b-2db80881ca4e", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/a84ae476-11e2-4988-93a5-6deefe12260a", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/bcc1d6bf-1597-4955-ba7e-4ff6ee2a9b4e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a2104f80-b5e2-46a9-ae5d-708e496a413d"",
    ""url"": ""/v2/space_quota_definitions/857e0488-bf5e-4d66-963d-b70a7929a21d"",
    ""created_at"": ""2016-07-27T14:02:45Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""gold_quota"",
    ""organization_guid"": ""a2104f80-b5e2-46a9-ae5d-708e496a413d"",
    ""non_basic_services_allowed"": true,
    ""total_services"": -1,
    ""total_routes"": 10,
    ""memory_limit"": 5120,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": -1,
    ""total_reserved_route_ports"": 5,
    ""organization_url"": ""/v2/organizations/bd85fc74-5adc-4f5f-8c2f-b85bbf2925e2"",
    ""spaces_url"": ""/v2/space_quota_definitions/857e0488-bf5e-4d66-963d-b70a7929a21d/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceQuotaDefinitionRequest value = new CreateSpaceQuotaDefinitionRequest();


                var obj = cfClient.SpaceQuotaDefinitions.CreateSpaceQuotaDefinition(value).Result;


                Assert.AreEqual("a2104f80-b5e2-46a9-ae5d-708e496a413d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/857e0488-bf5e-4d66-963d-b70a7929a21d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("gold_quota", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("a2104f80-b5e2-46a9-ae5d-708e496a413d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("10", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("5120", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/bd85fc74-5adc-4f5f-8c2f-b85bbf2925e2", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/857e0488-bf5e-4d66-963d-b70a7929a21d/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""345251af-0008-4ab5-8bcb-4d39c31b743d"",
        ""url"": ""/v2/space_quota_definitions/54ad0a8d-6388-413e-b940-b8eb06fe2fce"",
        ""created_at"": ""2016-07-27T14:02:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-919"",
        ""organization_guid"": ""345251af-0008-4ab5-8bcb-4d39c31b743d"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""app_instance_limit"": -1,
        ""app_task_limit"": 5,
        ""total_service_keys"": 600,
        ""total_reserved_route_ports"": -1,
        ""organization_url"": ""/v2/organizations/dbf57291-8853-4ca0-8e5a-e15b02753bfc"",
        ""spaces_url"": ""/v2/space_quota_definitions/54ad0a8d-6388-413e-b940-b8eb06fe2fce/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.SpaceQuotaDefinitions.ListAllSpaceQuotaDefinitions().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("345251af-0008-4ab5-8bcb-4d39c31b743d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/54ad0a8d-6388-413e-b940-b8eb06fe2fce", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-919", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("345251af-0008-4ab5-8bcb-4d39c31b743d", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj[0].AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj[0].TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/dbf57291-8853-4ca0-8e5a-e15b02753bfc", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/54ad0a8d-6388-413e-b940-b8eb06fe2fce/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

    }
}