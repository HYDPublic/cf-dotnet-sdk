//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpaceQuotaDefinitionsEndpoint
{
        [TestMethod]
        public void RemoveSpaceFromSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                cfClient.SpaceQuotaDefinitions.RemoveSpaceFromSpaceQuotaDefinition(guid, space_guid).Wait();

            }
        }

        [TestMethod]
        public void DeleteSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.SpaceQuotaDefinitions.DeleteSpaceQuotaDefinition(guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f1b9c54b-5cd4-456c-95b7-f9b055324dc1"",
    ""url"": ""/v2/space_quota_definitions/ae7bf392-3034-4e32-8374-45595d8b89d5"",
    ""created_at"": ""2016-05-26T11:34:52Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2470"",
    ""organization_guid"": ""f1b9c54b-5cd4-456c-95b7-f9b055324dc1"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/dc3932ad-21fa-4448-b7a1-bb08d42cead2"",
    ""spaces_url"": ""/v2/space_quota_definitions/ae7bf392-3034-4e32-8374-45595d8b89d5/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.RetrieveSpaceQuotaDefinition(guid).Result;


                Assert.AreEqual("f1b9c54b-5cd4-456c-95b7-f9b055324dc1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/ae7bf392-3034-4e32-8374-45595d8b89d5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2470", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f1b9c54b-5cd4-456c-95b7-f9b055324dc1", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/dc3932ad-21fa-4448-b7a1-bb08d42cead2", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/ae7bf392-3034-4e32-8374-45595d8b89d5/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8c3502d0-23c8-4e70-b384-896542c12ce6"",
    ""url"": ""/v2/space_quota_definitions/5a128e47-921f-4023-bf53-8d5fce160fe9"",
    ""created_at"": ""2016-05-26T11:34:51Z"",
    ""updated_at"": ""2016-05-26T11:34:51Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""organization_guid"": ""8c3502d0-23c8-4e70-b384-896542c12ce6"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/ddec826f-d5e9-48ae-8a92-9a45a6de00ee"",
    ""spaces_url"": ""/v2/space_quota_definitions/5a128e47-921f-4023-bf53-8d5fce160fe9/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceQuotaDefinitionRequest value = new UpdateSpaceQuotaDefinitionRequest();


                var obj = cfClient.SpaceQuotaDefinitions.UpdateSpaceQuotaDefinition(guid, value).Result;


                Assert.AreEqual("8c3502d0-23c8-4e70-b384-896542c12ce6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/5a128e47-921f-4023-bf53-8d5fce160fe9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-26T11:34:51Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("8c3502d0-23c8-4e70-b384-896542c12ce6", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/ddec826f-d5e9-48ae-8a92-9a45a6de00ee", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/5a128e47-921f-4023-bf53-8d5fce160fe9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8a1916d3-9559-46d3-a74c-a2ee23077271"",
        ""url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9"",
        ""created_at"": ""2016-05-26T11:34:52Z"",
        ""updated_at"": ""2016-05-26T11:34:52Z""
      },
      ""entity"": {
        ""name"": ""name-2463"",
        ""organization_guid"": ""8a1916d3-9559-46d3-a74c-a2ee23077271"",
        ""space_quota_definition_guid"": ""8a1916d3-9559-46d3-a74c-a2ee23077271"",
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/5abc3134-3ebb-45ef-affb-a91794683e88"",
        ""space_quota_definition_url"": ""/v2/space_quota_definitions/7cd57c26-4de5-4944-8b8e-84669a92b410"",
        ""developers_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/developers"",
        ""managers_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/managers"",
        ""auditors_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/auditors"",
        ""apps_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/apps"",
        ""routes_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/routes"",
        ""domains_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/domains"",
        ""service_instances_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/service_instances"",
        ""app_events_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/app_events"",
        ""events_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/events"",
        ""security_groups_url"": ""/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.ListAllSpacesForSpaceQuotaDefinition(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8a1916d3-9559-46d3-a74c-a2ee23077271", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2463", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("8a1916d3-9559-46d3-a74c-a2ee23077271", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("8a1916d3-9559-46d3-a74c-a2ee23077271", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/5abc3134-3ebb-45ef-affb-a91794683e88", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/7cd57c26-4de5-4944-8b8e-84669a92b410", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/f3eed149-b5ae-4192-85b9-a505eec4bfc9/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6f95f1af-f52a-4b1c-b698-5d2dd275d270"",
    ""url"": ""/v2/space_quota_definitions/6207e318-2686-4c6d-a3b6-f9bbb480ae7b"",
    ""created_at"": ""2016-05-26T11:34:52Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2465"",
    ""organization_guid"": ""6f95f1af-f52a-4b1c-b698-5d2dd275d270"",
    ""non_basic_services_allowed"": true,
    ""total_services"": 60,
    ""total_routes"": 1000,
    ""memory_limit"": 20480,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": 600,
    ""total_reserved_route_ports"": -1,
    ""organization_url"": ""/v2/organizations/016f323e-adce-4cb1-8be9-4f3a4eb81f20"",
    ""spaces_url"": ""/v2/space_quota_definitions/6207e318-2686-4c6d-a3b6-f9bbb480ae7b/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.SpaceQuotaDefinitions.AssociateSpaceWithSpaceQuotaDefinition(guid, space_guid).Result;


                Assert.AreEqual("6f95f1af-f52a-4b1c-b698-5d2dd275d270", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/6207e318-2686-4c6d-a3b6-f9bbb480ae7b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2465", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("6f95f1af-f52a-4b1c-b698-5d2dd275d270", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/016f323e-adce-4cb1-8be9-4f3a4eb81f20", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/6207e318-2686-4c6d-a3b6-f9bbb480ae7b/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceQuotaDefinitionTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""4509d0ee-e9ed-4c17-b282-524f54c5bbd0"",
    ""url"": ""/v2/space_quota_definitions/49e05ee1-0c41-4c62-baa8-cda75abc23d7"",
    ""created_at"": ""2016-05-26T11:34:52Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""gold_quota"",
    ""organization_guid"": ""4509d0ee-e9ed-4c17-b282-524f54c5bbd0"",
    ""non_basic_services_allowed"": true,
    ""total_services"": -1,
    ""total_routes"": 10,
    ""memory_limit"": 5120,
    ""instance_memory_limit"": -1,
    ""app_instance_limit"": -1,
    ""app_task_limit"": 5,
    ""total_service_keys"": -1,
    ""total_reserved_route_ports"": 5,
    ""organization_url"": ""/v2/organizations/d3ad870c-920d-43ba-b401-56d3886f88f5"",
    ""spaces_url"": ""/v2/space_quota_definitions/49e05ee1-0c41-4c62-baa8-cda75abc23d7/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceQuotaDefinitionRequest value = new CreateSpaceQuotaDefinitionRequest();


                var obj = cfClient.SpaceQuotaDefinitions.CreateSpaceQuotaDefinition(value).Result;


                Assert.AreEqual("4509d0ee-e9ed-4c17-b282-524f54c5bbd0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/49e05ee1-0c41-4c62-baa8-cda75abc23d7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("gold_quota", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("4509d0ee-e9ed-4c17-b282-524f54c5bbd0", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.NonBasicServicesAllowed), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalServices), true);
                Assert.AreEqual("10", TestUtil.ToTestableString(obj.TotalRoutes), true);
                Assert.AreEqual("5120", TestUtil.ToTestableString(obj.MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.AppTaskLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj.TotalServiceKeys), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj.TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/d3ad870c-920d-43ba-b401-56d3886f88f5", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/49e05ee1-0c41-4c62-baa8-cda75abc23d7/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9171f2e6-0b71-4df9-84af-6023d0f405bd"",
        ""url"": ""/v2/space_quota_definitions/67528704-759c-4f31-a875-7548dd1df657"",
        ""created_at"": ""2016-05-26T11:34:52Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2447"",
        ""organization_guid"": ""9171f2e6-0b71-4df9-84af-6023d0f405bd"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""app_instance_limit"": -1,
        ""app_task_limit"": 5,
        ""total_service_keys"": 600,
        ""total_reserved_route_ports"": -1,
        ""organization_url"": ""/v2/organizations/99a63b8b-eb5f-48c9-9c12-94fa41b44d40"",
        ""spaces_url"": ""/v2/space_quota_definitions/67528704-759c-4f31-a875-7548dd1df657/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.SpaceQuotaDefinitions.ListAllSpaceQuotaDefinitions().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9171f2e6-0b71-4df9-84af-6023d0f405bd", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/67528704-759c-4f31-a875-7548dd1df657", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-05-26T11:34:52Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2447", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("9171f2e6-0b71-4df9-84af-6023d0f405bd", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj[0].AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj[0].TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/99a63b8b-eb5f-48c9-9c12-94fa41b44d40", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/67528704-759c-4f31-a875-7548dd1df657/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

    }
}