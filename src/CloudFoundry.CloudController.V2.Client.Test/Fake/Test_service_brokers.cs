//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9542f26f-6ff0-4e80-9762-f0c5de64d650"",
    ""created_at"": ""2015-04-16T12:04:23+00:00"",
    ""updated_at"": ""2015-04-16T12:04:23+00:00"",
    ""url"": ""/v2/service_brokers/9542f26f-6ff0-4e80-9762-f0c5de64d650""
  },
  ""entity"": {
    ""name"": ""name-447"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("9542f26f-6ff0-4e80-9762-f0c5de64d650", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/9542f26f-6ff0-4e80-9762-f0c5de64d650", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-447", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c2656894-e55a-4440-af38-8d948cdd10e6"",
        ""url"": ""/v2/service_brokers/c2656894-e55a-4440-af38-8d948cdd10e6"",
        ""created_at"": ""2015-04-16T12:04:23+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-441"",
        ""broker_url"": ""https://foo.com/url-28"",
        ""auth_username"": ""auth_username-7""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""697a5ba0-a229-4083-b78c-905f61f63af7"",
        ""url"": ""/v2/service_brokers/697a5ba0-a229-4083-b78c-905f61f63af7"",
        ""created_at"": ""2015-04-16T12:04:23+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-442"",
        ""broker_url"": ""https://foo.com/url-29"",
        ""auth_username"": ""auth_username-8""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8d73562c-5913-4039-9f67-362828aa788d"",
        ""url"": ""/v2/service_brokers/8d73562c-5913-4039-9f67-362828aa788d"",
        ""created_at"": ""2015-04-16T12:04:23+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-443"",
        ""broker_url"": ""https://foo.com/url-30"",
        ""auth_username"": ""auth_username-9""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c2656894-e55a-4440-af38-8d948cdd10e6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/c2656894-e55a-4440-af38-8d948cdd10e6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-441", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-28", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-7", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("697a5ba0-a229-4083-b78c-905f61f63af7", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/697a5ba0-a229-4083-b78c-905f61f63af7", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-442", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-29", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-8", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("8d73562c-5913-4039-9f67-362828aa788d", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/8d73562c-5913-4039-9f67-362828aa788d", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-443", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-30", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-9", TestUtil.ToTestableString(obj[2].AuthUsername), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""816f33f3-dd5c-4207-9e57-cfabe8be61cf"",
    ""created_at"": ""2015-04-16T12:04:23+00:00"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/816f33f3-dd5c-4207-9e57-cfabe8be61cf""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("816f33f3-dd5c-4207-9e57-cfabe8be61cf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/816f33f3-dd5c-4207-9e57-cfabe8be61cf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8692657a-cc26-4bed-a975-d7a5ab115db3"",
    ""url"": ""/v2/service_brokers/8692657a-cc26-4bed-a975-d7a5ab115db3"",
    ""created_at"": ""2015-04-16T12:04:23+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-450"",
    ""broker_url"": ""https://foo.com/url-37"",
    ""auth_username"": ""auth_username-16""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("8692657a-cc26-4bed-a975-d7a5ab115db3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/8692657a-cc26-4bed-a975-d7a5ab115db3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-450", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-37", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-16", TestUtil.ToTestableString(obj.AuthUsername), true);

            }
        }

    }
}