//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f0370ae2-b3b3-4a9e-8311-6c4a468e2786"",
    ""url"": ""/v2/service_brokers/7a5c2c63-fac1-429e-aa61-d6717d97cefe"",
    ""created_at"": ""2016-03-30T10:15:07Z"",
    ""updated_at"": ""2016-03-30T10:15:07Z""
  },
  ""entity"": {
    ""name"": ""name-152"",
    ""broker_url"": ""https://foo.com/url-14"",
    ""auth_username"": ""auth_username-14"",
    ""space_guid"": ""f0370ae2-b3b3-4a9e-8311-6c4a468e2786""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("f0370ae2-b3b3-4a9e-8311-6c4a468e2786", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/7a5c2c63-fac1-429e-aa61-d6717d97cefe", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-152", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-14", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-14", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("f0370ae2-b3b3-4a9e-8311-6c4a468e2786", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9bc86548-d470-407c-a23e-080f2d14d29c"",
    ""created_at"": ""2016-03-30T10:15:07Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/3206e0eb-62dd-490f-ab87-ef58630e6aca""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin"",
    ""space_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("9bc86548-d470-407c-a23e-080f2d14d29c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/3206e0eb-62dd-490f-ab87-ef58630e6aca", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e4e42665-98ff-40e6-9406-e36c7256decf"",
        ""url"": ""/v2/service_brokers/ca523504-c456-43dd-b6f1-f9de11516066"",
        ""created_at"": ""2016-03-30T10:15:07Z"",
        ""updated_at"": ""2016-03-30T10:15:07Z""
      },
      ""entity"": {
        ""name"": ""name-128"",
        ""broker_url"": ""https://foo.com/url-2"",
        ""auth_username"": ""auth_username-2"",
        ""space_guid"": ""e4e42665-98ff-40e6-9406-e36c7256decf""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e4e42665-98ff-40e6-9406-e36c7256decf"",
        ""url"": ""/v2/service_brokers/d603b547-84db-42b3-90b2-e9e00fd756b0"",
        ""created_at"": ""2016-03-30T10:15:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-129"",
        ""broker_url"": ""https://foo.com/url-3"",
        ""auth_username"": ""auth_username-3"",
        ""space_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e4e42665-98ff-40e6-9406-e36c7256decf"",
        ""url"": ""/v2/service_brokers/f36f63ad-64e3-4741-bde2-06920e5e942a"",
        ""created_at"": ""2016-03-30T10:15:07Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-130"",
        ""broker_url"": ""https://foo.com/url-4"",
        ""auth_username"": ""auth_username-4"",
        ""space_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e4e42665-98ff-40e6-9406-e36c7256decf", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/ca523504-c456-43dd-b6f1-f9de11516066", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-128", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-2", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-2", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("e4e42665-98ff-40e6-9406-e36c7256decf", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("e4e42665-98ff-40e6-9406-e36c7256decf", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/d603b547-84db-42b3-90b2-e9e00fd756b0", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-129", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-3", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-3", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("e4e42665-98ff-40e6-9406-e36c7256decf", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/f36f63ad-64e3-4741-bde2-06920e5e942a", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-130", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-4", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-4", TestUtil.ToTestableString(obj[2].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].SpaceGuid), true);

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""110330dc-2a80-49df-9628-9bc696c516b8"",
    ""created_at"": ""2016-03-30T10:15:07Z"",
    ""updated_at"": ""2016-03-30T10:15:07Z"",
    ""url"": ""/v2/service_brokers/5484126a-df8e-4f5c-a7a9-c22bf056e3ee""
  },
  ""entity"": {
    ""name"": ""name-140"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user"",
    ""space_guid"": ""110330dc-2a80-49df-9628-9bc696c516b8""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("110330dc-2a80-49df-9628-9bc696c516b8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:07Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/5484126a-df8e-4f5c-a7a9-c22bf056e3ee", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-140", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("110330dc-2a80-49df-9628-9bc696c516b8", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

    }
}