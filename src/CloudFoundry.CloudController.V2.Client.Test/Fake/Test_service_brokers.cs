//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""391da080-0fe0-46bd-8a1d-f812d922ccec"",
    ""url"": ""/v2/service_brokers/f78d5c3f-0dcb-4b31-9e27-8457aa9c90f9"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": ""2016-10-12T12:29:29Z""
  },
  ""entity"": {
    ""name"": ""name-1037"",
    ""broker_url"": ""https://foo.com/url-73"",
    ""auth_username"": ""auth_username-51"",
    ""space_guid"": ""391da080-0fe0-46bd-8a1d-f812d922ccec""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("391da080-0fe0-46bd-8a1d-f812d922ccec", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/f78d5c3f-0dcb-4b31-9e27-8457aa9c90f9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1037", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-73", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-51", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("391da080-0fe0-46bd-8a1d-f812d922ccec", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""41ae81cf-d485-468d-a51c-0cccb9bf5a10"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/ce444bdc-7ba5-4d64-a421-afb8df31dcb8""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin"",
    ""space_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("41ae81cf-d485-468d-a51c-0cccb9bf5a10", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/ce444bdc-7ba5-4d64-a421-afb8df31dcb8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""235e8810-3c7f-468e-9fdf-68ce787ec39c"",
        ""url"": ""/v2/service_brokers/5db04465-daad-448f-a9ed-bbb7eaa1f603"",
        ""created_at"": ""2016-10-12T12:29:28Z"",
        ""updated_at"": ""2016-10-12T12:29:29Z""
      },
      ""entity"": {
        ""name"": ""name-1031"",
        ""broker_url"": ""https://foo.com/url-70"",
        ""auth_username"": ""auth_username-48"",
        ""space_guid"": ""235e8810-3c7f-468e-9fdf-68ce787ec39c""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""235e8810-3c7f-468e-9fdf-68ce787ec39c"",
        ""url"": ""/v2/service_brokers/ede8bcf8-5776-4cfd-8293-db1fd36bc7e2"",
        ""created_at"": ""2016-10-12T12:29:28Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1032"",
        ""broker_url"": ""https://foo.com/url-71"",
        ""auth_username"": ""auth_username-49"",
        ""space_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""235e8810-3c7f-468e-9fdf-68ce787ec39c"",
        ""url"": ""/v2/service_brokers/6c0df94f-bb4a-44af-9756-fb142a1f553f"",
        ""created_at"": ""2016-10-12T12:29:28Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1033"",
        ""broker_url"": ""https://foo.com/url-72"",
        ""auth_username"": ""auth_username-50"",
        ""space_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("235e8810-3c7f-468e-9fdf-68ce787ec39c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/5db04465-daad-448f-a9ed-bbb7eaa1f603", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:28Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1031", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-70", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-48", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("235e8810-3c7f-468e-9fdf-68ce787ec39c", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("235e8810-3c7f-468e-9fdf-68ce787ec39c", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/ede8bcf8-5776-4cfd-8293-db1fd36bc7e2", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:28Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1032", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-71", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-49", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("235e8810-3c7f-468e-9fdf-68ce787ec39c", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/6c0df94f-bb4a-44af-9756-fb142a1f553f", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:28Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1033", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-72", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-50", TestUtil.ToTestableString(obj[2].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].SpaceGuid), true);

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8cab0abd-695a-4be0-8559-f52d196ad98b"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": ""2016-10-12T12:29:29Z"",
    ""url"": ""/v2/service_brokers/388c3e32-bf8d-4dd7-b6c3-37060eda6869""
  },
  ""entity"": {
    ""name"": ""name-1043"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user"",
    ""space_guid"": ""8cab0abd-695a-4be0-8559-f52d196ad98b""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("8cab0abd-695a-4be0-8559-f52d196ad98b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/388c3e32-bf8d-4dd7-b6c3-37060eda6869", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-1043", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("8cab0abd-695a-4be0-8559-f52d196ad98b", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

    }
}