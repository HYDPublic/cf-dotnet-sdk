//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UsersEndpoint
{
        [TestMethod]
        public void GetUserSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""metadata"":{""guid"":""uaa-id-255"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""organizations"":[{""metadata"":{""guid"":""58835f20-a6db-4e71-86f6-3cb74d8cd9e8"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1610"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""quota_definition"":{""metadata"":{""guid"":""713820a3-0653-4627-baee-719060fc19a7"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1611"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-255"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""managed_organizations"":[{""metadata"":{""guid"":""58835f20-a6db-4e71-86f6-3cb74d8cd9e8"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1610"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""quota_definition"":{""metadata"":{""guid"":""713820a3-0653-4627-baee-719060fc19a7"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1611"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-255"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""billing_managed_organizations"":[{""metadata"":{""guid"":""58835f20-a6db-4e71-86f6-3cb74d8cd9e8"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1610"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""quota_definition"":{""metadata"":{""guid"":""713820a3-0653-4627-baee-719060fc19a7"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1611"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-255"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""audited_organizations"":[{""metadata"":{""guid"":""58835f20-a6db-4e71-86f6-3cb74d8cd9e8"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1610"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""quota_definition"":{""metadata"":{""guid"":""713820a3-0653-4627-baee-719060fc19a7"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1611"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-255"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""managed_spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}],""audited_spaces"":[{""metadata"":{""guid"":""c2a1ad94-6580-453f-b158-ee175bfa3264"",""created_at"":""2015-03-25T13:48:54+00:00"",""updated_at"":null},""entity"":{""name"":""name-1612""}}]}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.GetUserSummary(guid).Result;


                Assert.AreEqual("uaa-id-255", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-03-25T13:48:54+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-35"",
    ""url"": ""/v2/users/uaa-id-35"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""b7e294fc-59b5-4133-985c-9d0768e9ecf8"",
    ""default_space_url"": ""/v2/spaces/b7e294fc-59b5-4133-985c-9d0768e9ecf8"",
    ""spaces_url"": ""/v2/users/uaa-id-35/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-35/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-35/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-35/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-35/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-35/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-35/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedSpaceWithUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-35", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-35", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("b7e294fc-59b5-4133-985c-9d0768e9ecf8", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/b7e294fc-59b5-4133-985c-9d0768e9ecf8", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-35/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7ceec557-bbe6-4aea-ae42-18f92a869b6a"",
        ""url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a"",
        ""created_at"": ""2015-03-25T13:48:39+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-108"",
        ""organization_guid"": ""cf92d47b-4dc3-43a6-b63f-766045915f0e"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/cf92d47b-4dc3-43a6-b63f-766045915f0e"",
        ""developers_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/developers"",
        ""managers_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/managers"",
        ""auditors_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/auditors"",
        ""apps_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/apps"",
        ""routes_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/routes"",
        ""domains_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/domains"",
        ""service_instances_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/service_instances"",
        ""app_events_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/app_events"",
        ""events_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/events"",
        ""security_groups_url"": ""/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7ceec557-bbe6-4aea-ae42-18f92a869b6a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-108", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("cf92d47b-4dc3-43a6-b63f-766045915f0e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/cf92d47b-4dc3-43a6-b63f-766045915f0e", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/7ceec557-bbe6-4aea-ae42-18f92a869b6a/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8937ee19-412a-4f6d-96c7-bb23b92b511c"",
        ""url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-160"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""4887c444-a81c-4821-9491-cd355dfc48bb"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/4887c444-a81c-4821-9491-cd355dfc48bb"",
        ""spaces_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/spaces"",
        ""domains_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/domains"",
        ""private_domains_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/private_domains"",
        ""users_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/users"",
        ""managers_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/managers"",
        ""billing_managers_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/billing_managers"",
        ""auditors_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/auditors"",
        ""app_events_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8937ee19-412a-4f6d-96c7-bb23b92b511c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-160", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("4887c444-a81c-4821-9491-cd355dfc48bb", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/4887c444-a81c-4821-9491-cd355dfc48bb", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/8937ee19-412a-4f6d-96c7-bb23b92b511c/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""dcca46da-b348-4e5f-a5f5-193fd3b1ada0"",
        ""url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0"",
        ""created_at"": ""2015-03-25T13:48:39+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-85"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""1498a79e-3155-499c-ae2b-f701e9c64d6f"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/1498a79e-3155-499c-ae2b-f701e9c64d6f"",
        ""spaces_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/spaces"",
        ""domains_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/domains"",
        ""private_domains_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/private_domains"",
        ""users_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/users"",
        ""managers_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/managers"",
        ""billing_managers_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/billing_managers"",
        ""auditors_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/auditors"",
        ""app_events_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("dcca46da-b348-4e5f-a5f5-193fd3b1ada0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-85", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("1498a79e-3155-499c-ae2b-f701e9c64d6f", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/1498a79e-3155-499c-ae2b-f701e9c64d6f", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/dcca46da-b348-4e5f-a5f5-193fd3b1ada0/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-62"",
    ""url"": ""/v2/users/uaa-id-62"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": ""2015-03-25T13:48:40+00:00""
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""aeb35c49-d0a4-40e7-84c0-2f3002ce2f6f"",
    ""default_space_url"": ""/v2/spaces/aeb35c49-d0a4-40e7-84c0-2f3002ce2f6f"",
    ""spaces_url"": ""/v2/users/uaa-id-62/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-62/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-62/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-62/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-62/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-62/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-62/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserRequest value = new UpdateUserRequest();


                var obj = cfClient.Users.UpdateUser(guid, value).Result;


                Assert.AreEqual("uaa-id-62", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-62", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("aeb35c49-d0a4-40e7-84c0-2f3002ce2f6f", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/aeb35c49-d0a4-40e7-84c0-2f3002ce2f6f", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-62/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-52"",
    ""url"": ""/v2/users/uaa-id-52"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""02bd186b-88db-4c12-ade3-4cab1a429706"",
    ""default_space_url"": ""/v2/spaces/02bd186b-88db-4c12-ade3-4cab1a429706"",
    ""spaces_url"": ""/v2/users/uaa-id-52/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-52/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-52/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-52/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-52/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-52/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-52/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveSpaceFromUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-52", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-52", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("02bd186b-88db-4c12-ade3-4cab1a429706", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/02bd186b-88db-4c12-ade3-4cab1a429706", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-52/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-50"",
    ""url"": ""/v2/users/uaa-id-50"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""be4596b9-4111-48f6-8307-66142c8cef97"",
    ""default_space_url"": ""/v2/spaces/be4596b9-4111-48f6-8307-66142c8cef97"",
    ""spaces_url"": ""/v2/users/uaa-id-50/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-50/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-50/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-50/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-50/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-50/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-50/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateSpaceWithUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-50", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-50", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("be4596b9-4111-48f6-8307-66142c8cef97", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/be4596b9-4111-48f6-8307-66142c8cef97", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-60"",
    ""url"": ""/v2/users/uaa-id-60"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""380c20d0-7a00-4d32-bdc0-9b77639bc3a6"",
    ""default_space_url"": ""/v2/spaces/380c20d0-7a00-4d32-bdc0-9b77639bc3a6"",
    ""spaces_url"": ""/v2/users/uaa-id-60/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-60/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-60/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-60/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-60/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-60/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-60/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.RetrieveUser(guid).Result;


                Assert.AreEqual("uaa-id-60", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-60", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("380c20d0-7a00-4d32-bdc0-9b77639bc3a6", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/380c20d0-7a00-4d32-bdc0-9b77639bc3a6", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-60/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-19"",
    ""url"": ""/v2/users/uaa-id-19"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""7da84e4d-b719-4102-870a-b1cbc5df8a43"",
    ""default_space_url"": ""/v2/spaces/7da84e4d-b719-4102-870a-b1cbc5df8a43"",
    ""spaces_url"": ""/v2/users/uaa-id-19/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-19/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-19/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-19/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-19/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-19/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-19/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveBillingManagedOrganizationFromUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-19", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-19", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("7da84e4d-b719-4102-870a-b1cbc5df8a43", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/7da84e4d-b719-4102-870a-b1cbc5df8a43", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-19/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllBillingManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b7e26967-f74d-49bd-a87a-83c2acd81d27"",
        ""url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27"",
        ""created_at"": ""2015-03-25T13:48:39+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-68"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""9f4009e2-98c6-4f9a-8d37-19ce0ba8521d"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/9f4009e2-98c6-4f9a-8d37-19ce0ba8521d"",
        ""spaces_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/spaces"",
        ""domains_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/domains"",
        ""private_domains_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/private_domains"",
        ""users_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/users"",
        ""managers_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/managers"",
        ""billing_managers_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/billing_managers"",
        ""auditors_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/auditors"",
        ""app_events_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllBillingManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b7e26967-f74d-49bd-a87a-83c2acd81d27", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-68", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("9f4009e2-98c6-4f9a-8d37-19ce0ba8521d", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/9f4009e2-98c6-4f9a-8d37-19ce0ba8521d", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/b7e26967-f74d-49bd-a87a-83c2acd81d27/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-37"",
    ""url"": ""/v2/users/uaa-id-37"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""0cfd6a80-5571-440f-a109-f97b534ac1fb"",
    ""default_space_url"": ""/v2/spaces/0cfd6a80-5571-440f-a109-f97b534ac1fb"",
    ""spaces_url"": ""/v2/users/uaa-id-37/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-37/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-37/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-37/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-37/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-37/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-37/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedSpaceFromUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-37", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-37", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("0cfd6a80-5571-440f-a109-f97b534ac1fb", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/0cfd6a80-5571-440f-a109-f97b534ac1fb", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-37/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-29"",
    ""url"": ""/v2/users/uaa-id-29"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""a821262e-4077-41fd-8974-dd051f6f2789"",
    ""default_space_url"": ""/v2/spaces/a821262e-4077-41fd-8974-dd051f6f2789"",
    ""spaces_url"": ""/v2/users/uaa-id-29/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-29/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-29/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-29/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-29/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-29/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-29/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedSpaceWithUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-29", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-29", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("a821262e-4077-41fd-8974-dd051f6f2789", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/a821262e-4077-41fd-8974-dd051f6f2789", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-29/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-17"",
    ""url"": ""/v2/users/uaa-id-17"",
    ""created_at"": ""2015-03-25T13:48:38+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""31674654-c691-4d07-a283-4c03d24dbfbc"",
    ""default_space_url"": ""/v2/spaces/31674654-c691-4d07-a283-4c03d24dbfbc"",
    ""spaces_url"": ""/v2/users/uaa-id-17/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-17/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-17/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-17/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-17/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-17/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-17/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateBillingManagedOrganizationWithUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-17", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-17", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:38+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("31674654-c691-4d07-a283-4c03d24dbfbc", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/31674654-c691-4d07-a283-4c03d24dbfbc", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-17/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-64"",
        ""url"": ""/v2/users/uaa-id-64"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": ""cd62e437-525b-498d-8756-2c109c738730"",
        ""default_space_url"": ""/v2/spaces/cd62e437-525b-498d-8756-2c109c738730"",
        ""spaces_url"": ""/v2/users/uaa-id-64/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-64/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-64/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-64/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-64/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-64/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-64/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-65"",
        ""url"": ""/v2/users/uaa-id-65"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": true,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-65/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-65/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-65/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-65/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-65/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-65/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-65/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Users.ListAllUsers().Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-64", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-64", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("cd62e437-525b-498d-8756-2c109c738730", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/cd62e437-525b-498d-8756-2c109c738730", TestUtil.ToTestableString(obj[0].DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-64/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-65", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-65", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-65/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-65/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9b344aec-9455-49f5-839c-fcefd379a8a8"",
        ""url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8"",
        ""created_at"": ""2015-03-25T13:48:39+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-135"",
        ""organization_guid"": ""d1b96343-9498-402c-8fca-1842d87ebac0"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/d1b96343-9498-402c-8fca-1842d87ebac0"",
        ""developers_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/developers"",
        ""managers_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/managers"",
        ""auditors_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/auditors"",
        ""apps_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/apps"",
        ""routes_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/routes"",
        ""domains_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/domains"",
        ""service_instances_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/service_instances"",
        ""app_events_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/app_events"",
        ""events_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/events"",
        ""security_groups_url"": ""/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9b344aec-9455-49f5-839c-fcefd379a8a8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-135", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("d1b96343-9498-402c-8fca-1842d87ebac0", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/d1b96343-9498-402c-8fca-1842d87ebac0", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9b344aec-9455-49f5-839c-fcefd379a8a8/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-13"",
    ""url"": ""/v2/users/uaa-id-13"",
    ""created_at"": ""2015-03-25T13:48:38+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""b3f87554-24e5-4dbe-ad0b-227d6159b60c"",
    ""default_space_url"": ""/v2/spaces/b3f87554-24e5-4dbe-ad0b-227d6159b60c"",
    ""spaces_url"": ""/v2/users/uaa-id-13/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-13/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-13/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-13/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-13/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-13/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-13/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedOrganizationFromUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-13", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-13", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:38+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("b3f87554-24e5-4dbe-ad0b-227d6159b60c", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/b3f87554-24e5-4dbe-ad0b-227d6159b60c", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-13/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-31"",
    ""url"": ""/v2/users/uaa-id-31"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""268b6a9b-b99e-4c59-8bf0-56b4031ab395"",
    ""default_space_url"": ""/v2/spaces/268b6a9b-b99e-4c59-8bf0-56b4031ab395"",
    ""spaces_url"": ""/v2/users/uaa-id-31/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-31/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-31/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-31/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-31/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-31/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-31/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedSpaceFromUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-31", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-31", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("268b6a9b-b99e-4c59-8bf0-56b4031ab395", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/268b6a9b-b99e-4c59-8bf0-56b4031ab395", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c"",
    ""url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": null,
    ""spaces_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/spaces"",
    ""organizations_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/organizations"",
    ""managed_organizations_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserRequest value = new CreateUserRequest();


                var obj = cfClient.Users.CreateUser(value).Result;


                Assert.AreEqual("guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-272aff6e-85ec-49cb-8e54-6c37401e8e0c/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-41"",
    ""url"": ""/v2/users/uaa-id-41"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""34d15340-a904-40e4-985a-f24e03bce194"",
    ""default_space_url"": ""/v2/spaces/34d15340-a904-40e4-985a-f24e03bce194"",
    ""spaces_url"": ""/v2/users/uaa-id-41/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-41/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-41/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-41/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-41/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-41/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-41/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedOrganizationWithUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-41", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-41", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("34d15340-a904-40e4-985a-f24e03bce194", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/34d15340-a904-40e4-985a-f24e03bce194", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c8ae767a-4902-477c-983b-9a51e2e33f60"",
        ""url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-177"",
        ""organization_guid"": ""1fbe6c37-01a0-466e-9658-b2713c6e9438"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/1fbe6c37-01a0-466e-9658-b2713c6e9438"",
        ""developers_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/developers"",
        ""managers_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/managers"",
        ""auditors_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/auditors"",
        ""apps_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/apps"",
        ""routes_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/routes"",
        ""domains_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/domains"",
        ""service_instances_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/service_instances"",
        ""app_events_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/app_events"",
        ""events_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/events"",
        ""security_groups_url"": ""/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c8ae767a-4902-477c-983b-9a51e2e33f60", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-177", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("1fbe6c37-01a0-466e-9658-b2713c6e9438", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/1fbe6c37-01a0-466e-9658-b2713c6e9438", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/c8ae767a-4902-477c-983b-9a51e2e33f60/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Users.DeleteUser(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-25"",
    ""url"": ""/v2/users/uaa-id-25"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""f83af63e-718b-4bbb-87fc-3a1116d5afe9"",
    ""default_space_url"": ""/v2/spaces/f83af63e-718b-4bbb-87fc-3a1116d5afe9"",
    ""spaces_url"": ""/v2/users/uaa-id-25/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-25/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-25/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-25/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-25/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-25/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-25/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveOrganizationFromUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-25", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-25", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("f83af63e-718b-4bbb-87fc-3a1116d5afe9", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/f83af63e-718b-4bbb-87fc-3a1116d5afe9", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-44"",
    ""url"": ""/v2/users/uaa-id-44"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""3ab81b21-6869-4bcd-83d9-f76a4cd539c2"",
    ""default_space_url"": ""/v2/spaces/3ab81b21-6869-4bcd-83d9-f76a4cd539c2"",
    ""spaces_url"": ""/v2/users/uaa-id-44/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-44/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-44/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-44/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-44/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-44/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-44/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedOrganizationFromUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-44", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-44", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("3ab81b21-6869-4bcd-83d9-f76a4cd539c2", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/3ab81b21-6869-4bcd-83d9-f76a4cd539c2", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-44/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d"",
        ""url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d"",
        ""created_at"": ""2015-03-25T13:48:38+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-47"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""1f110102-9e06-4fff-989f-54e5718c9723"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/1f110102-9e06-4fff-989f-54e5718c9723"",
        ""spaces_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/spaces"",
        ""domains_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/domains"",
        ""private_domains_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/private_domains"",
        ""users_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/users"",
        ""managers_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/managers"",
        ""billing_managers_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/billing_managers"",
        ""auditors_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/auditors"",
        ""app_events_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:38+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-47", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("1f110102-9e06-4fff-989f-54e5718c9723", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/1f110102-9e06-4fff-989f-54e5718c9723", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/b8ccae2d-ffa3-4ca0-87bc-c394a2dcc21d/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-11"",
    ""url"": ""/v2/users/uaa-id-11"",
    ""created_at"": ""2015-03-25T13:48:38+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""e6a0309a-6cbd-4e2a-a7de-6eb98ed66621"",
    ""default_space_url"": ""/v2/spaces/e6a0309a-6cbd-4e2a-a7de-6eb98ed66621"",
    ""spaces_url"": ""/v2/users/uaa-id-11/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-11/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-11/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-11/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-11/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-11/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-11/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedOrganizationWithUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-11", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-11", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:38+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("e6a0309a-6cbd-4e2a-a7de-6eb98ed66621", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/e6a0309a-6cbd-4e2a-a7de-6eb98ed66621", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-11/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-23"",
    ""url"": ""/v2/users/uaa-id-23"",
    ""created_at"": ""2015-03-25T13:48:39+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""e44dec4c-48ef-44ed-babf-8d43073f85cc"",
    ""default_space_url"": ""/v2/spaces/e44dec4c-48ef-44ed-babf-8d43073f85cc"",
    ""spaces_url"": ""/v2/users/uaa-id-23/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-23/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-23/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-23/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-23/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-23/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-23/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateOrganizationWithUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-23", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-23", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:39+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("e44dec4c-48ef-44ed-babf-8d43073f85cc", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/e44dec4c-48ef-44ed-babf-8d43073f85cc", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

    }
}