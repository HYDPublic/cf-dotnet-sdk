//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UsersEndpoint
{
        [TestMethod]
        public void GetUserSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""metadata"":{""guid"":""uaa-id-107"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""organizations"":[{""metadata"":{""guid"":""43db7f8e-cbc1-4584-8651-f03b741c0ce4"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-266"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""quota_definition"":{""metadata"":{""guid"":""ce3abed3-68a1-4a91-9613-001c563c6445"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-267"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-107"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""managed_organizations"":[{""metadata"":{""guid"":""43db7f8e-cbc1-4584-8651-f03b741c0ce4"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-266"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""quota_definition"":{""metadata"":{""guid"":""ce3abed3-68a1-4a91-9613-001c563c6445"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-267"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-107"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""billing_managed_organizations"":[{""metadata"":{""guid"":""43db7f8e-cbc1-4584-8651-f03b741c0ce4"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-266"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""quota_definition"":{""metadata"":{""guid"":""ce3abed3-68a1-4a91-9613-001c563c6445"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-267"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-107"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""audited_organizations"":[{""metadata"":{""guid"":""43db7f8e-cbc1-4584-8651-f03b741c0ce4"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-266"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""quota_definition"":{""metadata"":{""guid"":""ce3abed3-68a1-4a91-9613-001c563c6445"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-267"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-107"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""managed_spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}],""audited_spaces"":[{""metadata"":{""guid"":""ed149e8f-87c0-4a1d-b88d-f7a43bffe62f"",""created_at"":""2015-04-16T12:04:19+00:00"",""updated_at"":null},""entity"":{""name"":""name-268""}}]}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.GetUserSummary(guid).Result;


                Assert.AreEqual("uaa-id-107", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-04-16T12:04:19+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-339"",
    ""url"": ""/v2/users/uaa-id-339"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""666279ad-80a2-4870-8566-2c16bcd0fcf5"",
    ""default_space_url"": ""/v2/spaces/666279ad-80a2-4870-8566-2c16bcd0fcf5"",
    ""spaces_url"": ""/v2/users/uaa-id-339/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-339/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-339/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-339/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-339/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-339/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-339/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedSpaceWithUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-339", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-339", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("666279ad-80a2-4870-8566-2c16bcd0fcf5", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/666279ad-80a2-4870-8566-2c16bcd0fcf5", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-339/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""202eb183-d26d-4558-a532-8f707d6b50b4"",
        ""url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4"",
        ""created_at"": ""2015-04-16T12:04:37+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1856"",
        ""organization_guid"": ""ba8cbe24-f96b-4bbf-a7c8-d0ef903cd000"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/ba8cbe24-f96b-4bbf-a7c8-d0ef903cd000"",
        ""developers_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/developers"",
        ""managers_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/managers"",
        ""auditors_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/auditors"",
        ""apps_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/apps"",
        ""routes_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/routes"",
        ""domains_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/domains"",
        ""service_instances_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/service_instances"",
        ""app_events_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/app_events"",
        ""events_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/events"",
        ""security_groups_url"": ""/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("202eb183-d26d-4558-a532-8f707d6b50b4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1856", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("ba8cbe24-f96b-4bbf-a7c8-d0ef903cd000", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/ba8cbe24-f96b-4bbf-a7c8-d0ef903cd000", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/202eb183-d26d-4558-a532-8f707d6b50b4/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7e233971-593a-4433-b51e-33381fd83fca"",
        ""url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca"",
        ""created_at"": ""2015-04-16T12:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1771"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""af9627e6-5763-4ecd-8bbb-73533954c309"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/af9627e6-5763-4ecd-8bbb-73533954c309"",
        ""spaces_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/spaces"",
        ""domains_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/domains"",
        ""private_domains_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/private_domains"",
        ""users_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/users"",
        ""managers_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/managers"",
        ""billing_managers_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/billing_managers"",
        ""auditors_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/auditors"",
        ""app_events_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7e233971-593a-4433-b51e-33381fd83fca", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1771", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("af9627e6-5763-4ecd-8bbb-73533954c309", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/af9627e6-5763-4ecd-8bbb-73533954c309", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/7e233971-593a-4433-b51e-33381fd83fca/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""719d1c8f-ea60-4cc5-af5a-4e26f9436bec"",
        ""url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec"",
        ""created_at"": ""2015-04-16T12:04:37+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1883"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""6c7b9263-4e80-41a8-94fc-e81ffd48bc91"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/6c7b9263-4e80-41a8-94fc-e81ffd48bc91"",
        ""spaces_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/spaces"",
        ""domains_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/domains"",
        ""private_domains_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/private_domains"",
        ""users_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/users"",
        ""managers_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/managers"",
        ""billing_managers_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/billing_managers"",
        ""auditors_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/auditors"",
        ""app_events_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("719d1c8f-ea60-4cc5-af5a-4e26f9436bec", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1883", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("6c7b9263-4e80-41a8-94fc-e81ffd48bc91", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/6c7b9263-4e80-41a8-94fc-e81ffd48bc91", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/719d1c8f-ea60-4cc5-af5a-4e26f9436bec/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-308"",
    ""url"": ""/v2/users/uaa-id-308"",
    ""created_at"": ""2015-04-16T12:04:35+00:00"",
    ""updated_at"": ""2015-04-16T12:04:35+00:00""
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""4174508e-caef-4f53-97ce-2824dfcf7875"",
    ""default_space_url"": ""/v2/spaces/4174508e-caef-4f53-97ce-2824dfcf7875"",
    ""spaces_url"": ""/v2/users/uaa-id-308/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-308/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-308/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-308/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-308/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-308/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-308/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserRequest value = new UpdateUserRequest();


                var obj = cfClient.Users.UpdateUser(guid, value).Result;


                Assert.AreEqual("uaa-id-308", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-308", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("4174508e-caef-4f53-97ce-2824dfcf7875", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/4174508e-caef-4f53-97ce-2824dfcf7875", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-308/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-343"",
    ""url"": ""/v2/users/uaa-id-343"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""e19d1024-b183-4466-b142-40ebd4224b68"",
    ""default_space_url"": ""/v2/spaces/e19d1024-b183-4466-b142-40ebd4224b68"",
    ""spaces_url"": ""/v2/users/uaa-id-343/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-343/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-343/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-343/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-343/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-343/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-343/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveSpaceFromUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-343", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-343", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("e19d1024-b183-4466-b142-40ebd4224b68", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/e19d1024-b183-4466-b142-40ebd4224b68", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-343/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-345"",
    ""url"": ""/v2/users/uaa-id-345"",
    ""created_at"": ""2015-04-16T12:04:37+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""b1e75b8e-7733-4c01-a97a-4dd0a29dc665"",
    ""default_space_url"": ""/v2/spaces/b1e75b8e-7733-4c01-a97a-4dd0a29dc665"",
    ""spaces_url"": ""/v2/users/uaa-id-345/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-345/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-345/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-345/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-345/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-345/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-345/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateSpaceWithUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-345", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-345", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("b1e75b8e-7733-4c01-a97a-4dd0a29dc665", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/b1e75b8e-7733-4c01-a97a-4dd0a29dc665", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-310"",
    ""url"": ""/v2/users/uaa-id-310"",
    ""created_at"": ""2015-04-16T12:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""4b16a206-efba-4734-b92a-077987db37c9"",
    ""default_space_url"": ""/v2/spaces/4b16a206-efba-4734-b92a-077987db37c9"",
    ""spaces_url"": ""/v2/users/uaa-id-310/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-310/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-310/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-310/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-310/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-310/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-310/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.RetrieveUser(guid).Result;


                Assert.AreEqual("uaa-id-310", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-310", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("4b16a206-efba-4734-b92a-077987db37c9", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/4b16a206-efba-4734-b92a-077987db37c9", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-310/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-316"",
    ""url"": ""/v2/users/uaa-id-316"",
    ""created_at"": ""2015-04-16T12:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""a8ed5264-b53d-42c6-a62a-fd2eb5e0738d"",
    ""default_space_url"": ""/v2/spaces/a8ed5264-b53d-42c6-a62a-fd2eb5e0738d"",
    ""spaces_url"": ""/v2/users/uaa-id-316/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-316/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-316/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-316/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-316/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-316/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-316/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveBillingManagedOrganizationFromUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-316", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-316", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("a8ed5264-b53d-42c6-a62a-fd2eb5e0738d", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/a8ed5264-b53d-42c6-a62a-fd2eb5e0738d", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllBillingManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8"",
        ""url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8"",
        ""created_at"": ""2015-04-16T12:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1750"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""7f33fb7f-2973-4c81-8154-e5f0c0e9173d"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/7f33fb7f-2973-4c81-8154-e5f0c0e9173d"",
        ""spaces_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/spaces"",
        ""domains_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/domains"",
        ""private_domains_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/private_domains"",
        ""users_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/users"",
        ""managers_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/managers"",
        ""billing_managers_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/billing_managers"",
        ""auditors_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/auditors"",
        ""app_events_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllBillingManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1750", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("7f33fb7f-2973-4c81-8154-e5f0c0e9173d", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/7f33fb7f-2973-4c81-8154-e5f0c0e9173d", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/06eeb5bb-c2ed-4a1c-947d-42dd554cfaa8/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-337"",
    ""url"": ""/v2/users/uaa-id-337"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""21255704-dbe2-468f-bcff-6a5a33ff9aca"",
    ""default_space_url"": ""/v2/spaces/21255704-dbe2-468f-bcff-6a5a33ff9aca"",
    ""spaces_url"": ""/v2/users/uaa-id-337/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-337/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-337/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-337/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-337/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-337/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-337/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedSpaceFromUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-337", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-337", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("21255704-dbe2-468f-bcff-6a5a33ff9aca", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/21255704-dbe2-468f-bcff-6a5a33ff9aca", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-337/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-351"",
    ""url"": ""/v2/users/uaa-id-351"",
    ""created_at"": ""2015-04-16T12:04:37+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""2c6839dd-99b6-48fc-8136-4e2ba04e4a5e"",
    ""default_space_url"": ""/v2/spaces/2c6839dd-99b6-48fc-8136-4e2ba04e4a5e"",
    ""spaces_url"": ""/v2/users/uaa-id-351/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-351/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-351/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-351/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-351/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-351/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-351/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedSpaceWithUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-351", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-351", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("2c6839dd-99b6-48fc-8136-4e2ba04e4a5e", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/2c6839dd-99b6-48fc-8136-4e2ba04e4a5e", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-351/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-318"",
    ""url"": ""/v2/users/uaa-id-318"",
    ""created_at"": ""2015-04-16T12:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""06cf5ac6-89e3-43e8-9932-f30847ae894c"",
    ""default_space_url"": ""/v2/spaces/06cf5ac6-89e3-43e8-9932-f30847ae894c"",
    ""spaces_url"": ""/v2/users/uaa-id-318/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-318/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-318/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-318/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-318/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-318/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-318/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateBillingManagedOrganizationWithUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-318", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-318", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("06cf5ac6-89e3-43e8-9932-f30847ae894c", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/06cf5ac6-89e3-43e8-9932-f30847ae894c", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-318/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-304"",
        ""url"": ""/v2/users/uaa-id-304"",
        ""created_at"": ""2015-04-16T12:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": ""4909192a-7a60-4057-9b32-1116b981a4b0"",
        ""default_space_url"": ""/v2/spaces/4909192a-7a60-4057-9b32-1116b981a4b0"",
        ""spaces_url"": ""/v2/users/uaa-id-304/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-304/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-304/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-304/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-304/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-304/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-304/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-305"",
        ""url"": ""/v2/users/uaa-id-305"",
        ""created_at"": ""2015-04-16T12:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": true,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-305/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-305/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-305/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-305/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-305/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-305/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-305/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Users.ListAllUsers().Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-304", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-304", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("4909192a-7a60-4057-9b32-1116b981a4b0", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/4909192a-7a60-4057-9b32-1116b981a4b0", TestUtil.ToTestableString(obj[0].DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-304/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-305", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-305", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-305/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-305/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9b54b87a-ff65-46db-88b6-06f1187b63c5"",
        ""url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5"",
        ""created_at"": ""2015-04-16T12:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1811"",
        ""organization_guid"": ""f54d94b4-23e4-41de-9f27-822f4963664e"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/f54d94b4-23e4-41de-9f27-822f4963664e"",
        ""developers_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/developers"",
        ""managers_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/managers"",
        ""auditors_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/auditors"",
        ""apps_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/apps"",
        ""routes_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/routes"",
        ""domains_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/domains"",
        ""service_instances_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/service_instances"",
        ""app_events_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/app_events"",
        ""events_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/events"",
        ""security_groups_url"": ""/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9b54b87a-ff65-46db-88b6-06f1187b63c5", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1811", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f54d94b4-23e4-41de-9f27-822f4963664e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/f54d94b4-23e4-41de-9f27-822f4963664e", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9b54b87a-ff65-46db-88b6-06f1187b63c5/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-331"",
    ""url"": ""/v2/users/uaa-id-331"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""e0bab99d-97c8-46b4-8026-353d96ebec26"",
    ""default_space_url"": ""/v2/spaces/e0bab99d-97c8-46b4-8026-353d96ebec26"",
    ""spaces_url"": ""/v2/users/uaa-id-331/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-331/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-331/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-331/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-331/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-331/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-331/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedOrganizationFromUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-331", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-331", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("e0bab99d-97c8-46b4-8026-353d96ebec26", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/e0bab99d-97c8-46b4-8026-353d96ebec26", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-331/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-349"",
    ""url"": ""/v2/users/uaa-id-349"",
    ""created_at"": ""2015-04-16T12:04:37+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""27fec6ae-3c3e-4bae-9c68-7f50d87c2ebc"",
    ""default_space_url"": ""/v2/spaces/27fec6ae-3c3e-4bae-9c68-7f50d87c2ebc"",
    ""spaces_url"": ""/v2/users/uaa-id-349/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-349/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-349/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-349/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-349/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-349/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-349/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedSpaceFromUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-349", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-349", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("27fec6ae-3c3e-4bae-9c68-7f50d87c2ebc", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/27fec6ae-3c3e-4bae-9c68-7f50d87c2ebc", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-349/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""guid-1fa672b9-d2a9-4853-a893-9831c92991f1"",
    ""url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1"",
    ""created_at"": ""2015-04-16T12:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": null,
    ""spaces_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/spaces"",
    ""organizations_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/organizations"",
    ""managed_organizations_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserRequest value = new CreateUserRequest();


                var obj = cfClient.Users.CreateUser(value).Result;


                Assert.AreEqual("guid-1fa672b9-d2a9-4853-a893-9831c92991f1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-1fa672b9-d2a9-4853-a893-9831c92991f1/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-326"",
    ""url"": ""/v2/users/uaa-id-326"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""57d60c15-5bdf-40ba-b5a9-1cd636f79b0c"",
    ""default_space_url"": ""/v2/spaces/57d60c15-5bdf-40ba-b5a9-1cd636f79b0c"",
    ""spaces_url"": ""/v2/users/uaa-id-326/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-326/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-326/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-326/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-326/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-326/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-326/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedOrganizationWithUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-326", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-326", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("57d60c15-5bdf-40ba-b5a9-1cd636f79b0c", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/57d60c15-5bdf-40ba-b5a9-1cd636f79b0c", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""167a25aa-66cf-4439-8c95-ab9ab9293cd4"",
        ""url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4"",
        ""created_at"": ""2015-04-16T12:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1838"",
        ""organization_guid"": ""380fc74a-8e28-4e1d-9e23-6aaeb0249a5c"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/380fc74a-8e28-4e1d-9e23-6aaeb0249a5c"",
        ""developers_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/developers"",
        ""managers_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/managers"",
        ""auditors_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/auditors"",
        ""apps_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/apps"",
        ""routes_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/routes"",
        ""domains_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/domains"",
        ""service_instances_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/service_instances"",
        ""app_events_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/app_events"",
        ""events_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/events"",
        ""security_groups_url"": ""/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("167a25aa-66cf-4439-8c95-ab9ab9293cd4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1838", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("380fc74a-8e28-4e1d-9e23-6aaeb0249a5c", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/380fc74a-8e28-4e1d-9e23-6aaeb0249a5c", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/167a25aa-66cf-4439-8c95-ab9ab9293cd4/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Users.DeleteUser(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-355"",
    ""url"": ""/v2/users/uaa-id-355"",
    ""created_at"": ""2015-04-16T12:04:37+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""ec33fe33-4473-4776-8f1e-06aea776a5e8"",
    ""default_space_url"": ""/v2/spaces/ec33fe33-4473-4776-8f1e-06aea776a5e8"",
    ""spaces_url"": ""/v2/users/uaa-id-355/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-355/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-355/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-355/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-355/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-355/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-355/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveOrganizationFromUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-355", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-355", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("ec33fe33-4473-4776-8f1e-06aea776a5e8", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/ec33fe33-4473-4776-8f1e-06aea776a5e8", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-355/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-323"",
    ""url"": ""/v2/users/uaa-id-323"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""2d465806-e5b5-4200-9b05-d90a660e4eb3"",
    ""default_space_url"": ""/v2/spaces/2d465806-e5b5-4200-9b05-d90a660e4eb3"",
    ""spaces_url"": ""/v2/users/uaa-id-323/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-323/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-323/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-323/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-323/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-323/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-323/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedOrganizationFromUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-323", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-323", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("2d465806-e5b5-4200-9b05-d90a660e4eb3", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/2d465806-e5b5-4200-9b05-d90a660e4eb3", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-323/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4b580c93-727f-4b6f-adb2-861662e79dbc"",
        ""url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc"",
        ""created_at"": ""2015-04-16T12:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1792"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""b7967e8e-d1b1-49f4-90e7-ad8c0745c6a4"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/b7967e8e-d1b1-49f4-90e7-ad8c0745c6a4"",
        ""spaces_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/spaces"",
        ""domains_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/domains"",
        ""private_domains_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/private_domains"",
        ""users_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/users"",
        ""managers_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/managers"",
        ""billing_managers_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/billing_managers"",
        ""auditors_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/auditors"",
        ""app_events_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4b580c93-727f-4b6f-adb2-861662e79dbc", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1792", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("b7967e8e-d1b1-49f4-90e7-ad8c0745c6a4", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/b7967e8e-d1b1-49f4-90e7-ad8c0745c6a4", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/4b580c93-727f-4b6f-adb2-861662e79dbc/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-333"",
    ""url"": ""/v2/users/uaa-id-333"",
    ""created_at"": ""2015-04-16T12:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""0c781681-29f2-47e9-9690-47c1942e8f1e"",
    ""default_space_url"": ""/v2/spaces/0c781681-29f2-47e9-9690-47c1942e8f1e"",
    ""spaces_url"": ""/v2/users/uaa-id-333/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-333/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-333/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-333/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-333/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-333/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-333/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedOrganizationWithUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-333", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-333", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("0c781681-29f2-47e9-9690-47c1942e8f1e", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/0c781681-29f2-47e9-9690-47c1942e8f1e", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-333/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-357"",
    ""url"": ""/v2/users/uaa-id-357"",
    ""created_at"": ""2015-04-16T12:04:37+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""dd87a33c-d303-4da0-ab8f-b39c030b8bb1"",
    ""default_space_url"": ""/v2/spaces/dd87a33c-d303-4da0-ab8f-b39c030b8bb1"",
    ""spaces_url"": ""/v2/users/uaa-id-357/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-357/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-357/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-357/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-357/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-357/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-357/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateOrganizationWithUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-357", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-357", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:37+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("dd87a33c-d303-4da0-ab8f-b39c030b8bb1", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/dd87a33c-d303-4da0-ab8f-b39c030b8bb1", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-357/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

    }
}