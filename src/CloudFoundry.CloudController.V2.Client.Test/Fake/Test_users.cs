//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UsersEndpoint
{
        [TestMethod]
        public void RemoveBillingManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveBillingManagedOrganizationFromUser(guid, billing_managed_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bc70b566-82af-4d1a-9917-9872f9d2402e"",
        ""url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559"",
        ""created_at"": ""2016-09-02T11:52:03Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-462"",
        ""organization_guid"": ""bc70b566-82af-4d1a-9917-9872f9d2402e"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/fee3d5a3-46b4-475a-ac97-2d2ca46e88cb"",
        ""developers_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/developers"",
        ""managers_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/managers"",
        ""auditors_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/auditors"",
        ""apps_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/apps"",
        ""routes_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/routes"",
        ""domains_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/domains"",
        ""service_instances_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/service_instances"",
        ""app_events_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/app_events"",
        ""events_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/events"",
        ""security_groups_url"": ""/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bc70b566-82af-4d1a-9917-9872f9d2402e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-462", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("bc70b566-82af-4d1a-9917-9872f9d2402e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/fee3d5a3-46b4-475a-ac97-2d2ca46e88cb", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3ed23509-a645-4b90-8048-703f6f03c559/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6b97abe8-bd2c-418c-8e2d-530c35a68b3f"",
    ""url"": ""/v2/users/uaa-id-81"",
    ""created_at"": ""2016-09-02T11:52:04Z"",
    ""updated_at"": ""2016-09-02T11:52:04Z""
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""6b97abe8-bd2c-418c-8e2d-530c35a68b3f"",
    ""default_space_url"": ""/v2/spaces/3db7a7cb-7b28-40aa-830e-9d08217dfa56"",
    ""spaces_url"": ""/v2/users/uaa-id-81/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-81/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-81/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-81/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-81/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-81/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-81/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserRequest value = new UpdateUserRequest();


                var obj = cfClient.Users.UpdateUser(guid, value).Result;


                Assert.AreEqual("6b97abe8-bd2c-418c-8e2d-530c35a68b3f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-81", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("6b97abe8-bd2c-418c-8e2d-530c35a68b3f", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/3db7a7cb-7b28-40aa-830e-9d08217dfa56", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-81/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void GetUserSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
    ""created_at"": ""2016-09-02T11:52:33Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""organizations"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2546"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2548""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
              ""created_at"": ""2016-09-02T11:52:33Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2547"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""managed_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2546"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2548""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
              ""created_at"": ""2016-09-02T11:52:33Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2547"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""billing_managed_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2546"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2548""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
              ""created_at"": ""2016-09-02T11:52:33Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2547"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""audited_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2546"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2548""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
              ""created_at"": ""2016-09-02T11:52:33Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2547"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
                ""created_at"": ""2016-09-02T11:52:33Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""spaces"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2548""
        }
      }
    ],
    ""managed_spaces"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2548""
        }
      }
    ],
    ""audited_spaces"": [
      {
        ""metadata"": {
          ""guid"": ""edba0d61-0b3c-4be1-ae26-af0011131953"",
          ""created_at"": ""2016-09-02T11:52:33Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2548""
        }
      }
    ]
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.GetUserSummary(guid).Result;


                Assert.AreEqual("edba0d61-0b3c-4be1-ae26-af0011131953", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-09-02T11:52:33Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void ListAllManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5abcbafd-79f7-4448-8c8b-ed2bc46d7091"",
        ""url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf"",
        ""created_at"": ""2016-09-02T11:52:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-431"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""5abcbafd-79f7-4448-8c8b-ed2bc46d7091"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/e9089c44-a99d-43c0-b59f-ca16fb9d86e2"",
        ""spaces_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/spaces"",
        ""domains_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/domains"",
        ""private_domains_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/private_domains"",
        ""users_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/users"",
        ""managers_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/managers"",
        ""billing_managers_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/billing_managers"",
        ""auditors_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/auditors"",
        ""app_events_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5abcbafd-79f7-4448-8c8b-ed2bc46d7091", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-431", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("5abcbafd-79f7-4448-8c8b-ed2bc46d7091", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/e9089c44-a99d-43c0-b59f-ca16fb9d86e2", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/cc3557c5-cc07-414c-aa9a-a28c2fce60bf/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveManagedOrganizationFromUser(guid, managed_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveManagedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                cfClient.Users.RemoveManagedSpaceFromUser(guid, managed_space_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAuditedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9cf6a726-1d63-4ea8-bf5b-cb8f77a251db"",
    ""url"": ""/v2/users/uaa-id-57"",
    ""created_at"": ""2016-09-02T11:52:03Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""9cf6a726-1d63-4ea8-bf5b-cb8f77a251db"",
    ""default_space_url"": ""/v2/spaces/23235751-d329-4353-8773-8eff0e579565"",
    ""spaces_url"": ""/v2/users/uaa-id-57/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-57/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-57/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-57/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-57/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-57/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-57/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedOrganizationWithUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("9cf6a726-1d63-4ea8-bf5b-cb8f77a251db", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-57", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("9cf6a726-1d63-4ea8-bf5b-cb8f77a251db", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/23235751-d329-4353-8773-8eff0e579565", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-57/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c4e89876-25b8-4ea3-9c2e-d5419d416d88"",
    ""url"": ""/v2/users/uaa-id-49"",
    ""created_at"": ""2016-09-02T11:52:02Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""c4e89876-25b8-4ea3-9c2e-d5419d416d88"",
    ""default_space_url"": ""/v2/spaces/0cbc619e-0bcc-40a9-85f3-9fddf2fd5f7e"",
    ""spaces_url"": ""/v2/users/uaa-id-49/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-49/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-49/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-49/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-49/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-49/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-49/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateSpaceWithUser(guid, space_guid).Result;


                Assert.AreEqual("c4e89876-25b8-4ea3-9c2e-d5419d416d88", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-49", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("c4e89876-25b8-4ea3-9c2e-d5419d416d88", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/0cbc619e-0bcc-40a9-85f3-9fddf2fd5f7e", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-49/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""72ab2d63-b9e8-4270-bc57-2b0fef39b773"",
        ""url"": ""/v2/users/uaa-id-85"",
        ""created_at"": ""2016-09-02T11:52:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": ""72ab2d63-b9e8-4270-bc57-2b0fef39b773"",
        ""username"": ""user@example.com"",
        ""default_space_url"": ""/v2/spaces/d4537fb3-feb6-4ba5-a2e1-8eb2d45c0ab4"",
        ""spaces_url"": ""/v2/users/uaa-id-85/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-85/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-85/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-85/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-85/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-85/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-85/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""72ab2d63-b9e8-4270-bc57-2b0fef39b773"",
        ""url"": ""/v2/users/uaa-id-86"",
        ""created_at"": ""2016-09-02T11:52:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": true,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-86/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-86/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-86/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-86/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-86/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-86/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-86/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Users.ListAllUsers().Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("72ab2d63-b9e8-4270-bc57-2b0fef39b773", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-85", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("72ab2d63-b9e8-4270-bc57-2b0fef39b773", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/spaces/d4537fb3-feb6-4ba5-a2e1-8eb2d45c0ab4", TestUtil.ToTestableString(obj[0].DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("72ab2d63-b9e8-4270-bc57-2b0fef39b773", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-86", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-86/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-86/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""90989846-0031-400b-a0d8-93d9f3d4d003"",
    ""url"": ""/v2/users/uaa-id-36"",
    ""created_at"": ""2016-09-02T11:52:02Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""90989846-0031-400b-a0d8-93d9f3d4d003"",
    ""default_space_url"": ""/v2/spaces/499e7643-425f-47c0-a616-d03835d9dc31"",
    ""spaces_url"": ""/v2/users/uaa-id-36/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-36/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-36/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-36/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-36/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-36/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-36/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedSpaceWithUser(guid, managed_space_guid).Result;


                Assert.AreEqual("90989846-0031-400b-a0d8-93d9f3d4d003", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-36", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("90989846-0031-400b-a0d8-93d9f3d4d003", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/499e7643-425f-47c0-a616-d03835d9dc31", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-36/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b86c3079-f88f-43a5-b2aa-804c798e892d"",
        ""url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9"",
        ""created_at"": ""2016-09-02T11:52:03Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-507"",
        ""organization_guid"": ""b86c3079-f88f-43a5-b2aa-804c798e892d"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/5eb10e4a-3c44-4fbc-8b4b-2d1aefe744af"",
        ""developers_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/developers"",
        ""managers_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/managers"",
        ""auditors_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/auditors"",
        ""apps_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/apps"",
        ""routes_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/routes"",
        ""domains_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/domains"",
        ""service_instances_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/service_instances"",
        ""app_events_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/app_events"",
        ""events_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/events"",
        ""security_groups_url"": ""/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b86c3079-f88f-43a5-b2aa-804c798e892d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-507", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("b86c3079-f88f-43a5-b2aa-804c798e892d", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/5eb10e4a-3c44-4fbc-8b4b-2d1aefe744af", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9303a829-3794-4c13-aa71-27eed4c398b9/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ad7e38bc-318b-4dee-a7e4-48862a412145"",
    ""url"": ""/v2/users/uaa-id-73"",
    ""created_at"": ""2016-09-02T11:52:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""ad7e38bc-318b-4dee-a7e4-48862a412145"",
    ""default_space_url"": ""/v2/spaces/124d6b0b-62e6-4c7d-a344-20f034a63d81"",
    ""spaces_url"": ""/v2/users/uaa-id-73/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-73/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-73/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-73/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-73/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-73/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-73/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateBillingManagedOrganizationWithUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("ad7e38bc-318b-4dee-a7e4-48862a412145", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-73", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("ad7e38bc-318b-4dee-a7e4-48862a412145", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/124d6b0b-62e6-4c7d-a344-20f034a63d81", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-73/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Users.DeleteUser(guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""26f423df-5db9-44a0-a248-61b5bcb72118"",
    ""url"": ""/v2/users/uaa-id-69"",
    ""created_at"": ""2016-09-02T11:52:03Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""26f423df-5db9-44a0-a248-61b5bcb72118"",
    ""default_space_url"": ""/v2/spaces/7894cac7-a4f2-4826-a893-3404020c7dcd"",
    ""spaces_url"": ""/v2/users/uaa-id-69/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-69/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-69/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-69/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-69/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-69/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-69/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateOrganizationWithUser(guid, organization_guid).Result;


                Assert.AreEqual("26f423df-5db9-44a0-a248-61b5bcb72118", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-69", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("26f423df-5db9-44a0-a248-61b5bcb72118", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/7894cac7-a4f2-4826-a893-3404020c7dcd", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-69/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bbea2022-f03b-45d6-ad1f-7e0905cdd867"",
    ""url"": ""/v2/users/uaa-id-43"",
    ""created_at"": ""2016-09-02T11:52:02Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""bbea2022-f03b-45d6-ad1f-7e0905cdd867"",
    ""default_space_url"": ""/v2/spaces/02d283ce-8a35-4883-8768-b821efc71087"",
    ""spaces_url"": ""/v2/users/uaa-id-43/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-43/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-43/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-43/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-43/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-43/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-43/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedOrganizationWithUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("bbea2022-f03b-45d6-ad1f-7e0905cdd867", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-43", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("bbea2022-f03b-45d6-ad1f-7e0905cdd867", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/02d283ce-8a35-4883-8768-b821efc71087", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-43/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""45cc3542-6049-41f0-855d-3497d9ffb571"",
    ""url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474"",
    ""created_at"": ""2016-09-02T11:52:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": null,
    ""spaces_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/spaces"",
    ""organizations_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/organizations"",
    ""managed_organizations_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserRequest value = new CreateUserRequest();


                var obj = cfClient.Users.CreateUser(value).Result;


                Assert.AreEqual("45cc3542-6049-41f0-855d-3497d9ffb571", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/be481ebd-4050-45c7-a8da-d12756fb7474/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e389c58e-ae92-4887-aa90-8862d9cede4f"",
        ""url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041"",
        ""created_at"": ""2016-09-02T11:52:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-402"",
        ""organization_guid"": ""e389c58e-ae92-4887-aa90-8862d9cede4f"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/d1508942-6d28-46ae-a5b7-5ea40d4dc560"",
        ""developers_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/developers"",
        ""managers_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/managers"",
        ""auditors_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/auditors"",
        ""apps_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/apps"",
        ""routes_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/routes"",
        ""domains_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/domains"",
        ""service_instances_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/service_instances"",
        ""app_events_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/app_events"",
        ""events_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/events"",
        ""security_groups_url"": ""/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e389c58e-ae92-4887-aa90-8862d9cede4f", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-402", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("e389c58e-ae92-4887-aa90-8862d9cede4f", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/d1508942-6d28-46ae-a5b7-5ea40d4dc560", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/1210e81a-0ea5-4013-ae4f-e6e7e5b71041/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""56075706-347a-46eb-809e-060f10f75b3c"",
        ""url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33"",
        ""created_at"": ""2016-09-02T11:52:03Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-470"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""56075706-347a-46eb-809e-060f10f75b3c"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/8e075378-959e-4354-9f2d-cacbd5632e13"",
        ""spaces_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/spaces"",
        ""domains_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/domains"",
        ""private_domains_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/private_domains"",
        ""users_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/users"",
        ""managers_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/managers"",
        ""billing_managers_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/billing_managers"",
        ""auditors_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/auditors"",
        ""app_events_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("56075706-347a-46eb-809e-060f10f75b3c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-470", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("56075706-347a-46eb-809e-060f10f75b3c", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/8e075378-959e-4354-9f2d-cacbd5632e13", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/7c46ca64-6d26-430b-ba32-7cc69772fa33/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0cc2e11b-da9e-480f-be5e-ef3ad81d4286"",
        ""url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf"",
        ""created_at"": ""2016-09-02T11:52:03Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-516"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""0cc2e11b-da9e-480f-be5e-ef3ad81d4286"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/0b58c449-5685-4ab1-84c4-8b257660942b"",
        ""spaces_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/spaces"",
        ""domains_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/domains"",
        ""private_domains_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/private_domains"",
        ""users_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/users"",
        ""managers_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/managers"",
        ""billing_managers_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/billing_managers"",
        ""auditors_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/auditors"",
        ""app_events_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0cc2e11b-da9e-480f-be5e-ef3ad81d4286", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-516", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("0cc2e11b-da9e-480f-be5e-ef3ad81d4286", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/0b58c449-5685-4ab1-84c4-8b257660942b", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/f153ba9d-9208-459e-9e88-cf885e82ebaf/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveAuditedOrganizationFromUser(guid, audited_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAuditedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3bec0dfd-09fc-46b0-943b-6d410acfdc33"",
    ""url"": ""/v2/users/uaa-id-63"",
    ""created_at"": ""2016-09-02T11:52:03Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""3bec0dfd-09fc-46b0-943b-6d410acfdc33"",
    ""default_space_url"": ""/v2/spaces/6160aa9a-58fc-47c6-8877-a9f596ed49b5"",
    ""spaces_url"": ""/v2/users/uaa-id-63/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-63/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-63/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-63/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-63/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-63/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-63/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedSpaceWithUser(guid, audited_space_guid).Result;


                Assert.AreEqual("3bec0dfd-09fc-46b0-943b-6d410acfdc33", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-63", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("3bec0dfd-09fc-46b0-943b-6d410acfdc33", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/6160aa9a-58fc-47c6-8877-a9f596ed49b5", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveOrganizationFromUser(guid, organization_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                cfClient.Users.RemoveAuditedSpaceFromUser(guid, audited_space_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllBillingManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3f159d27-bd68-4294-9df2-10bf103f827e"",
        ""url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22"",
        ""created_at"": ""2016-09-02T11:52:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-549"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""3f159d27-bd68-4294-9df2-10bf103f827e"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/0076a223-7463-4004-a22c-0af93f63b6fa"",
        ""spaces_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/spaces"",
        ""domains_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/domains"",
        ""private_domains_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/private_domains"",
        ""users_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/users"",
        ""managers_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/managers"",
        ""billing_managers_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/billing_managers"",
        ""auditors_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/auditors"",
        ""app_events_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllBillingManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3f159d27-bd68-4294-9df2-10bf103f827e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-549", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("3f159d27-bd68-4294-9df2-10bf103f827e", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/0076a223-7463-4004-a22c-0af93f63b6fa", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/4c7e2dcb-1652-47e6-b320-986661749b22/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                cfClient.Users.RemoveSpaceFromUser(guid, space_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""553060e5-526c-42f1-ad4a-3907997d737c"",
    ""url"": ""/v2/users/uaa-id-79"",
    ""created_at"": ""2016-09-02T11:52:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""553060e5-526c-42f1-ad4a-3907997d737c"",
    ""default_space_url"": ""/v2/spaces/7ef0ade9-c411-454a-870b-a4a77c5826bc"",
    ""spaces_url"": ""/v2/users/uaa-id-79/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-79/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-79/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-79/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-79/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-79/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-79/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.RetrieveUser(guid).Result;


                Assert.AreEqual("553060e5-526c-42f1-ad4a-3907997d737c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-79", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("553060e5-526c-42f1-ad4a-3907997d737c", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/7ef0ade9-c411-454a-870b-a4a77c5826bc", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-79/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

    }
}