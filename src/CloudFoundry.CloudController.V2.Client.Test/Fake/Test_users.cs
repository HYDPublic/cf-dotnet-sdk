//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UsersEndpoint
{
        [TestMethod]
        public void RemoveBillingManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveBillingManagedOrganizationFromUser(guid, billing_managed_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""23e3c4f0-0f75-4b2f-b6a5-abf3960724c1"",
        ""url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671"",
        ""created_at"": ""2016-10-12T12:29:31Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1203"",
        ""organization_guid"": ""23e3c4f0-0f75-4b2f-b6a5-abf3960724c1"",
        ""space_quota_definition_guid"": null,
        ""isolation_segment_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/60b0fc83-b8b4-40ef-9e63-ee7c0a8b6ba9"",
        ""developers_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/developers"",
        ""managers_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/managers"",
        ""auditors_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/auditors"",
        ""apps_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/apps"",
        ""routes_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/routes"",
        ""domains_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/domains"",
        ""service_instances_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/service_instances"",
        ""app_events_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/app_events"",
        ""events_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/events"",
        ""security_groups_url"": ""/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("23e3c4f0-0f75-4b2f-b6a5-abf3960724c1", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1203", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("23e3c4f0-0f75-4b2f-b6a5-abf3960724c1", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].IsolationSegmentGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/60b0fc83-b8b4-40ef-9e63-ee7c0a8b6ba9", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/0dd8fa96-3c3e-4f75-9004-1c76c19d7671/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""992c6069-8c26-40ef-ac0b-7975858ccb2c"",
    ""url"": ""/v2/users/uaa-id-277"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": ""2016-10-12T12:29:29Z""
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""992c6069-8c26-40ef-ac0b-7975858ccb2c"",
    ""default_space_url"": ""/v2/spaces/f4f96fc1-dfa6-42fb-a507-9878288873a6"",
    ""spaces_url"": ""/v2/users/uaa-id-277/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-277/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-277/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-277/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-277/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-277/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-277/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserRequest value = new UpdateUserRequest();


                var obj = cfClient.Users.UpdateUser(guid, value).Result;


                Assert.AreEqual("992c6069-8c26-40ef-ac0b-7975858ccb2c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-277", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("992c6069-8c26-40ef-ac0b-7975858ccb2c", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/f4f96fc1-dfa6-42fb-a507-9878288873a6", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-277/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void GetUserSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
    ""created_at"": ""2016-10-12T12:29:39Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""organizations"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2475"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2477""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
              ""created_at"": ""2016-10-12T12:29:39Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2476"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""managed_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2475"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2477""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
              ""created_at"": ""2016-10-12T12:29:39Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2476"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""billing_managed_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2475"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2477""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
              ""created_at"": ""2016-10-12T12:29:39Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2476"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""audited_organizations"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2475"",
          ""billing_enabled"": false,
          ""status"": ""active"",
          ""spaces"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""name"": ""name-2477""
              }
            }
          ],
          ""quota_definition"": {
            ""metadata"": {
              ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
              ""created_at"": ""2016-10-12T12:29:39Z"",
              ""updated_at"": null
            },
            ""entity"": {
              ""name"": ""name-2476"",
              ""non_basic_services_allowed"": true,
              ""total_services"": 60,
              ""memory_limit"": 20480,
              ""trial_db_allowed"": false,
              ""total_routes"": 1000,
              ""instance_memory_limit"": -1,
              ""total_private_domains"": -1,
              ""app_instance_limit"": -1,
              ""app_task_limit"": -1
            }
          },
          ""managers"": [
            {
              ""metadata"": {
                ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
                ""created_at"": ""2016-10-12T12:29:39Z"",
                ""updated_at"": null
              },
              ""entity"": {
                ""admin"": false,
                ""active"": false,
                ""default_space_guid"": null
              }
            }
          ]
        }
      }
    ],
    ""spaces"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2477""
        }
      }
    ],
    ""managed_spaces"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2477""
        }
      }
    ],
    ""audited_spaces"": [
      {
        ""metadata"": {
          ""guid"": ""85810469-d8d5-4a5e-a188-38ea3fc871d4"",
          ""created_at"": ""2016-10-12T12:29:39Z"",
          ""updated_at"": null
        },
        ""entity"": {
          ""name"": ""name-2477""
        }
      }
    ]
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.GetUserSummary(guid).Result;


                Assert.AreEqual("85810469-d8d5-4a5e-a188-38ea3fc871d4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-10-12T12:29:39Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void ListAllManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""36eb5997-9468-456e-92ba-30d4477f5664"",
        ""url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b"",
        ""created_at"": ""2016-10-12T12:29:30Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1119"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""36eb5997-9468-456e-92ba-30d4477f5664"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/25a97608-7616-4769-b69d-004a10344986"",
        ""spaces_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/spaces"",
        ""domains_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/domains"",
        ""private_domains_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/private_domains"",
        ""users_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/users"",
        ""managers_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/managers"",
        ""billing_managers_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/billing_managers"",
        ""auditors_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/auditors"",
        ""app_events_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("36eb5997-9468-456e-92ba-30d4477f5664", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1119", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("36eb5997-9468-456e-92ba-30d4477f5664", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/25a97608-7616-4769-b69d-004a10344986", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/932427de-3738-44bc-b667-d46b919eec1b/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveManagedOrganizationFromUser(guid, managed_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveManagedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                cfClient.Users.RemoveManagedSpaceFromUser(guid, managed_space_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAuditedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""25b1ac0b-d46b-4b8c-b2a4-311e5190c109"",
    ""url"": ""/v2/users/uaa-id-320"",
    ""created_at"": ""2016-10-12T12:29:31Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""25b1ac0b-d46b-4b8c-b2a4-311e5190c109"",
    ""default_space_url"": ""/v2/spaces/353ff8fc-92a0-4ac6-b902-00206fa475b8"",
    ""spaces_url"": ""/v2/users/uaa-id-320/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-320/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-320/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-320/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-320/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-320/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-320/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedOrganizationWithUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("25b1ac0b-d46b-4b8c-b2a4-311e5190c109", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-320", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("25b1ac0b-d46b-4b8c-b2a4-311e5190c109", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/353ff8fc-92a0-4ac6-b902-00206fa475b8", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-320/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d1c9e575-8dd1-43c3-b8c0-25697ca5cf08"",
    ""url"": ""/v2/users/uaa-id-316"",
    ""created_at"": ""2016-10-12T12:29:31Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""d1c9e575-8dd1-43c3-b8c0-25697ca5cf08"",
    ""default_space_url"": ""/v2/spaces/f5d7a983-f117-44fe-9eff-5306d7e47d1d"",
    ""spaces_url"": ""/v2/users/uaa-id-316/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-316/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-316/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-316/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-316/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-316/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-316/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateSpaceWithUser(guid, space_guid).Result;


                Assert.AreEqual("d1c9e575-8dd1-43c3-b8c0-25697ca5cf08", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-316", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("d1c9e575-8dd1-43c3-b8c0-25697ca5cf08", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/f5d7a983-f117-44fe-9eff-5306d7e47d1d", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-316/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa"",
        ""url"": ""/v2/users/uaa-id-275"",
        ""created_at"": ""2016-10-12T12:29:29Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": ""4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa"",
        ""username"": ""user@example.com"",
        ""default_space_url"": ""/v2/spaces/c852b174-186d-4c95-a983-6d4e2529e153"",
        ""spaces_url"": ""/v2/users/uaa-id-275/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-275/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-275/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-275/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-275/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-275/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-275/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa"",
        ""url"": ""/v2/users/uaa-id-276"",
        ""created_at"": ""2016-10-12T12:29:29Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": true,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-276/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-276/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-276/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-276/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-276/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-276/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-276/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Users.ListAllUsers().Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-275", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/spaces/c852b174-186d-4c95-a983-6d4e2529e153", TestUtil.ToTestableString(obj[0].DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-275/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("4bb0cde2-3f3e-45d9-8ccd-7bcc438b64aa", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-276", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-276/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-276/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""98efb723-e3b4-474a-b5d0-abe765906b62"",
    ""url"": ""/v2/users/uaa-id-302"",
    ""created_at"": ""2016-10-12T12:29:30Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""98efb723-e3b4-474a-b5d0-abe765906b62"",
    ""default_space_url"": ""/v2/spaces/80d329f9-ae1b-48a3-a9dd-40dad1d6028a"",
    ""spaces_url"": ""/v2/users/uaa-id-302/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-302/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-302/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-302/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-302/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-302/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-302/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedSpaceWithUser(guid, managed_space_guid).Result;


                Assert.AreEqual("98efb723-e3b4-474a-b5d0-abe765906b62", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-302", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("98efb723-e3b4-474a-b5d0-abe765906b62", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/80d329f9-ae1b-48a3-a9dd-40dad1d6028a", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-302/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""1cc97900-86b0-44f1-be57-986191d05077"",
        ""url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e"",
        ""created_at"": ""2016-10-12T12:29:30Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1090"",
        ""organization_guid"": ""1cc97900-86b0-44f1-be57-986191d05077"",
        ""space_quota_definition_guid"": null,
        ""isolation_segment_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/86a8233e-7959-491f-88d3-3472fce32528"",
        ""developers_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/developers"",
        ""managers_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/managers"",
        ""auditors_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/auditors"",
        ""apps_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/apps"",
        ""routes_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/routes"",
        ""domains_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/domains"",
        ""service_instances_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/service_instances"",
        ""app_events_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/app_events"",
        ""events_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/events"",
        ""security_groups_url"": ""/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("1cc97900-86b0-44f1-be57-986191d05077", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1090", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("1cc97900-86b0-44f1-be57-986191d05077", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].IsolationSegmentGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/86a8233e-7959-491f-88d3-3472fce32528", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/996803a0-4ba4-4fd9-b2ca-fc4d6fec703e/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b17fbdb6-d2d9-4cd8-8fbb-5d5fe1223ef8"",
    ""url"": ""/v2/users/uaa-id-298"",
    ""created_at"": ""2016-10-12T12:29:30Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""b17fbdb6-d2d9-4cd8-8fbb-5d5fe1223ef8"",
    ""default_space_url"": ""/v2/spaces/b2229328-6824-4661-9e28-f85087b91b9a"",
    ""spaces_url"": ""/v2/users/uaa-id-298/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-298/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-298/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-298/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-298/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-298/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-298/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateBillingManagedOrganizationWithUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("b17fbdb6-d2d9-4cd8-8fbb-5d5fe1223ef8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-298", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("b17fbdb6-d2d9-4cd8-8fbb-5d5fe1223ef8", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/b2229328-6824-4661-9e28-f85087b91b9a", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-298/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Users.DeleteUser(guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1e5effdf-6b1d-459f-8246-e7493c897af9"",
    ""url"": ""/v2/users/uaa-id-306"",
    ""created_at"": ""2016-10-12T12:29:31Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""1e5effdf-6b1d-459f-8246-e7493c897af9"",
    ""default_space_url"": ""/v2/spaces/ef380fcc-f5d0-4d38-b506-6164d474d0b5"",
    ""spaces_url"": ""/v2/users/uaa-id-306/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-306/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-306/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-306/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-306/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-306/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-306/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateOrganizationWithUser(guid, organization_guid).Result;


                Assert.AreEqual("1e5effdf-6b1d-459f-8246-e7493c897af9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-306", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("1e5effdf-6b1d-459f-8246-e7493c897af9", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/ef380fcc-f5d0-4d38-b506-6164d474d0b5", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-306/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""34226e73-e5d1-40b4-ad64-84a9af450ed8"",
    ""url"": ""/v2/users/uaa-id-288"",
    ""created_at"": ""2016-10-12T12:29:30Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""34226e73-e5d1-40b4-ad64-84a9af450ed8"",
    ""default_space_url"": ""/v2/spaces/a494a277-d385-410a-9019-54d354eef71c"",
    ""spaces_url"": ""/v2/users/uaa-id-288/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-288/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-288/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-288/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-288/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-288/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-288/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedOrganizationWithUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("34226e73-e5d1-40b4-ad64-84a9af450ed8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-288", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("34226e73-e5d1-40b4-ad64-84a9af450ed8", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/a494a277-d385-410a-9019-54d354eef71c", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-288/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""61138bc6-ae5b-44f5-b543-90c64edb60ff"",
    ""url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": null,
    ""spaces_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/spaces"",
    ""organizations_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/organizations"",
    ""managed_organizations_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/29756154-10c7-4f3a-922e-b6f582095093/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserRequest value = new CreateUserRequest();


                var obj = cfClient.Users.CreateUser(value).Result;


                Assert.AreEqual("61138bc6-ae5b-44f5-b543-90c64edb60ff", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/29756154-10c7-4f3a-922e-b6f582095093/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""93bc4dbb-a1e4-483b-b9b6-4f716379bf86"",
        ""url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31"",
        ""created_at"": ""2016-10-12T12:29:30Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1177"",
        ""organization_guid"": ""93bc4dbb-a1e4-483b-b9b6-4f716379bf86"",
        ""space_quota_definition_guid"": null,
        ""isolation_segment_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/cba26059-4e2c-4b22-8c78-b4fff9f01d11"",
        ""developers_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/developers"",
        ""managers_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/managers"",
        ""auditors_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/auditors"",
        ""apps_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/apps"",
        ""routes_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/routes"",
        ""domains_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/domains"",
        ""service_instances_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/service_instances"",
        ""app_events_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/app_events"",
        ""events_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/events"",
        ""security_groups_url"": ""/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("93bc4dbb-a1e4-483b-b9b6-4f716379bf86", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1177", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("93bc4dbb-a1e4-483b-b9b6-4f716379bf86", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].IsolationSegmentGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/cba26059-4e2c-4b22-8c78-b4fff9f01d11", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/f990a117-4f62-4788-93a9-fbb6da48ee31/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b0078de6-3f1e-4111-8270-742a132086b9"",
        ""url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f"",
        ""created_at"": ""2016-10-12T12:29:31Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1237"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""b0078de6-3f1e-4111-8270-742a132086b9"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/375b495a-e447-4978-928b-7fc0385f09ba"",
        ""spaces_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/spaces"",
        ""domains_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/domains"",
        ""private_domains_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/private_domains"",
        ""users_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/users"",
        ""managers_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/managers"",
        ""billing_managers_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/billing_managers"",
        ""auditors_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/auditors"",
        ""app_events_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b0078de6-3f1e-4111-8270-742a132086b9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1237", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("b0078de6-3f1e-4111-8270-742a132086b9", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/375b495a-e447-4978-928b-7fc0385f09ba", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/15dc103c-7aac-41b7-be06-5db2ead06b5f/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d26870af-828a-48d9-9d98-59a97a53b0e4"",
        ""url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5"",
        ""created_at"": ""2016-10-12T12:29:31Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1198"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""d26870af-828a-48d9-9d98-59a97a53b0e4"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/d7ff8956-1036-4195-ac82-5339afd30226"",
        ""spaces_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/spaces"",
        ""domains_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/domains"",
        ""private_domains_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/private_domains"",
        ""users_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/users"",
        ""managers_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/managers"",
        ""billing_managers_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/billing_managers"",
        ""auditors_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/auditors"",
        ""app_events_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d26870af-828a-48d9-9d98-59a97a53b0e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:31Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1198", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("d26870af-828a-48d9-9d98-59a97a53b0e4", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/d7ff8956-1036-4195-ac82-5339afd30226", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/13e12e11-cb9d-4124-9c15-f63df21d3ae5/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveAuditedOrganizationFromUser(guid, audited_organization_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAuditedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f8069153-6ad3-42b1-9d53-275fd2be7a2f"",
    ""url"": ""/v2/users/uaa-id-281"",
    ""created_at"": ""2016-10-12T12:29:30Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""f8069153-6ad3-42b1-9d53-275fd2be7a2f"",
    ""default_space_url"": ""/v2/spaces/f105683b-5520-496a-a8a2-7f09938fe661"",
    ""spaces_url"": ""/v2/users/uaa-id-281/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-281/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-281/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-281/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-281/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-281/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-281/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedSpaceWithUser(guid, audited_space_guid).Result;


                Assert.AreEqual("f8069153-6ad3-42b1-9d53-275fd2be7a2f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-281", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("f8069153-6ad3-42b1-9d53-275fd2be7a2f", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/f105683b-5520-496a-a8a2-7f09938fe661", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                cfClient.Users.RemoveOrganizationFromUser(guid, organization_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                cfClient.Users.RemoveAuditedSpaceFromUser(guid, audited_space_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllBillingManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""df294ed0-10ec-463d-b162-7c945cfde18e"",
        ""url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f"",
        ""created_at"": ""2016-10-12T12:29:30Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1140"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""df294ed0-10ec-463d-b162-7c945cfde18e"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/8e6d77ea-9582-48f7-bb5a-c3c19ee20fd6"",
        ""spaces_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/spaces"",
        ""domains_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/domains"",
        ""private_domains_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/private_domains"",
        ""users_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/users"",
        ""managers_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/managers"",
        ""billing_managers_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/billing_managers"",
        ""auditors_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/auditors"",
        ""app_events_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllBillingManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("df294ed0-10ec-463d-b162-7c945cfde18e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:30Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1140", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("df294ed0-10ec-463d-b162-7c945cfde18e", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/8e6d77ea-9582-48f7-bb5a-c3c19ee20fd6", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/25702887-fa35-4dda-9bd6-8b9d7c46c56f/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                cfClient.Users.RemoveSpaceFromUser(guid, space_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrieveUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1de40d2c-7973-4127-98bc-a91a38bfade4"",
    ""url"": ""/v2/users/uaa-id-269"",
    ""created_at"": ""2016-10-12T12:29:29Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""1de40d2c-7973-4127-98bc-a91a38bfade4"",
    ""default_space_url"": ""/v2/spaces/4462175f-e885-4450-9cee-34d4e9cee980"",
    ""spaces_url"": ""/v2/users/uaa-id-269/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-269/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-269/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-269/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-269/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-269/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-269/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.RetrieveUser(guid).Result;


                Assert.AreEqual("1de40d2c-7973-4127-98bc-a91a38bfade4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-269", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("1de40d2c-7973-4127-98bc-a91a38bfade4", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/4462175f-e885-4450-9cee-34d4e9cee980", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-269/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

    }
}