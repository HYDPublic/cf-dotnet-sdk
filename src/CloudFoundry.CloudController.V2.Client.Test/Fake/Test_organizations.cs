//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""150a96dd-8f4a-4dd7-8f80-97edb6dc1fb3"",
        ""url"": ""/v2/space_quota_definitions/66fdcf66-eed3-418c-a583-8681dd3a6b06"",
        ""created_at"": ""2016-07-27T14:02:42Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-746"",
        ""organization_guid"": ""150a96dd-8f4a-4dd7-8f80-97edb6dc1fb3"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""app_instance_limit"": -1,
        ""app_task_limit"": 5,
        ""total_service_keys"": 600,
        ""total_reserved_route_ports"": -1,
        ""organization_url"": ""/v2/organizations/b610960f-d3ab-4fb7-8cea-d06f1570b978"",
        ""spaces_url"": ""/v2/space_quota_definitions/66fdcf66-eed3-418c-a583-8681dd3a6b06/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("150a96dd-8f4a-4dd7-8f80-97edb6dc1fb3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/66fdcf66-eed3-418c-a583-8681dd3a6b06", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:42Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-746", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("150a96dd-8f4a-4dd7-8f80-97edb6dc1fb3", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj[0].AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj[0].TotalServiceKeys), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].TotalReservedRoutePorts), true);
                Assert.AreEqual("/v2/organizations/b610960f-d3ab-4fb7-8cea-d06f1570b978", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/66fdcf66-eed3-418c-a583-8681dd3a6b06/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d3873a21-d475-49f9-880f-bd694a09c0a4"",
        ""url"": ""/v2/private_domains/db9a930d-c653-4923-b2fb-ad225c6be1ad"",
        ""created_at"": ""2016-07-27T14:02:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-64.example.com"",
        ""owning_organization_guid"": ""d3873a21-d475-49f9-880f-bd694a09c0a4"",
        ""owning_organization_url"": ""/v2/organizations/a6f6186d-e733-4651-b6f9-f91a14bf484f"",
        ""shared_organizations_url"": ""/v2/private_domains/db9a930d-c653-4923-b2fb-ad225c6be1ad/shared_organizations""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d3873a21-d475-49f9-880f-bd694a09c0a4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/db9a930d-c653-4923-b2fb-ad225c6be1ad", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-64.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("d3873a21-d475-49f9-880f-bd694a09c0a4", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/a6f6186d-e733-4651-b6f9-f91a14bf484f", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/private_domains/db9a930d-c653-4923-b2fb-ad225c6be1ad/shared_organizations", TestUtil.ToTestableString(obj[0].SharedOrganizationsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0bd88bab-00de-40d9-82eb-8212b7786611"",
        ""url"": ""/v2/services/df7d4bd9-06ac-4b58-a968-abee5f0704ba"",
        ""created_at"": ""2016-07-27T14:02:42Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-39"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-121"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""1a5f7451-7d20-4a7e-b082-32287c674a78"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""0bd88bab-00de-40d9-82eb-8212b7786611"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/df7d4bd9-06ac-4b58-a968-abee5f0704ba/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0bd88bab-00de-40d9-82eb-8212b7786611", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/df7d4bd9-06ac-4b58-a968-abee5f0704ba", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:42Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-39", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-121", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("1a5f7451-7d20-4a7e-b082-32287c674a78", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("0bd88bab-00de-40d9-82eb-8212b7786611", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/df7d4bd9-06ac-4b58-a968-abee5f0704ba/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrievingOrganizationInstanceUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""instance_usage"": 3
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationInstanceUsage(guid).Result;


                Assert.AreEqual("3", TestUtil.ToTestableString(obj.InstanceUsage), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ec439a8f-7388-4e0a-bd21-412265d8809a"",
    ""url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-698"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""ec439a8f-7388-4e0a-bd21-412265d8809a"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/0e868d20-2bc9-4259-85f8-1ffcfa04534e"",
    ""spaces_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/spaces"",
    ""domains_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/domains"",
    ""private_domains_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/private_domains"",
    ""users_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/users"",
    ""managers_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/managers"",
    ""billing_managers_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/billing_managers"",
    ""auditors_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/auditors"",
    ""app_events_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("ec439a8f-7388-4e0a-bd21-412265d8809a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-698", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("ec439a8f-7388-4e0a-bd21-412265d8809a", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/0e868d20-2bc9-4259-85f8-1ffcfa04534e", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/0210794e-9d9e-4e43-bd71-4f43c05df6f3/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c0541368-fbbc-46e9-b8f9-19c743be1afb"",
    ""url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": ""2016-07-27T14:02:40Z""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""c0541368-fbbc-46e9-b8f9-19c743be1afb"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/b9299fac-1115-4c48-be14-154eef456c2a"",
    ""spaces_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/spaces"",
    ""domains_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/domains"",
    ""private_domains_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/private_domains"",
    ""users_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/users"",
    ""managers_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/managers"",
    ""billing_managers_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/billing_managers"",
    ""auditors_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/auditors"",
    ""app_events_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("c0541368-fbbc-46e9-b8f9-19c743be1afb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("c0541368-fbbc-46e9-b8f9-19c743be1afb", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/b9299fac-1115-4c48-be14-154eef456c2a", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/c243c588-c269-47c0-8a54-5a5b6547473c/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""846da821-984f-4160-bac6-0269b7f291d7"",
    ""url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8"",
    ""created_at"": ""2016-07-27T14:02:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-702"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""846da821-984f-4160-bac6-0269b7f291d7"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/de36552c-cac7-4000-8f53-d1c69dec238b"",
    ""spaces_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/spaces"",
    ""domains_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/domains"",
    ""private_domains_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/private_domains"",
    ""users_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/users"",
    ""managers_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/managers"",
    ""billing_managers_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/auditors"",
    ""app_events_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateAuditorWithOrganizationByUsernameRequest value = new AssociateAuditorWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("846da821-984f-4160-bac6-0269b7f291d7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-702", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("846da821-984f-4160-bac6-0269b7f291d7", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/de36552c-cac7-4000-8f53-d1c69dec238b", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/1c2b2e58-eda8-4170-8604-4de567c554b8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""81138c87-df0d-4a77-a19e-6e2d69c558cc"",
    ""url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066"",
    ""created_at"": ""2016-07-27T14:02:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-712"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""81138c87-df0d-4a77-a19e-6e2d69c558cc"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/9068140b-ee7a-4dcd-846f-805c41a29318"",
    ""spaces_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/spaces"",
    ""domains_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/domains"",
    ""private_domains_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/private_domains"",
    ""users_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/users"",
    ""managers_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/managers"",
    ""billing_managers_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/billing_managers"",
    ""auditors_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/auditors"",
    ""app_events_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateUserWithOrganizationByUsernameRequest value = new AssociateUserWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateUserWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("81138c87-df0d-4a77-a19e-6e2d69c558cc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-712", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("81138c87-df0d-4a77-a19e-6e2d69c558cc", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/9068140b-ee7a-4dcd-846f-805c41a29318", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/6b737ef8-f19a-4e45-b57d-65cc67bfb066/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3620064f-1a3f-4cb0-9b88-23acc82a4dd7"",
        ""url"": ""/v2/users/uaa-id-103"",
        ""created_at"": ""2016-07-27T14:02:40Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-103/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-103/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-103/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-103/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-103/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-103/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-103/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3620064f-1a3f-4cb0-9b88-23acc82a4dd7", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-103", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-103/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-103/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""927076d4-107f-421a-9085-c33a66cb538a"",
        ""url"": ""/v2/users/uaa-id-96"",
        ""created_at"": ""2016-07-27T14:02:40Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""billing_manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-96/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-96/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-96/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-96/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-96/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-96/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-96/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("927076d4-107f-421a-9085-c33a66cb538a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-96", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("billing_manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-96/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-96/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveManagerWithOrganizationByUsernameRequest value = new RemoveManagerWithOrganizationByUsernameRequest();


                cfClient.Organizations.RemoveManagerWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d6913994-4896-442a-b9d4-1b519a1e86b7"",
    ""url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea"",
    ""created_at"": ""2016-07-27T14:02:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-722"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""d6913994-4896-442a-b9d4-1b519a1e86b7"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/4b1938ec-433b-43a4-bd21-1f938fbd02d2"",
    ""spaces_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/spaces"",
    ""domains_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/domains"",
    ""private_domains_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/private_domains"",
    ""users_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/users"",
    ""managers_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/managers"",
    ""billing_managers_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/billing_managers"",
    ""auditors_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/auditors"",
    ""app_events_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("d6913994-4896-442a-b9d4-1b519a1e86b7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-722", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("d6913994-4896-442a-b9d4-1b519a1e86b7", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/4b1938ec-433b-43a4-bd21-1f938fbd02d2", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/70ec27fb-2958-474f-9b24-72785c849dea/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemovePrivateDomainFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                cfClient.Organizations.RemovePrivateDomainFromOrganization(guid, private_domain_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""memory_usage_in_mb"": 0
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""66706c63-7213-40a6-a2cc-5733669368b7"",
    ""url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-690"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""66706c63-7213-40a6-a2cc-5733669368b7"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/59559028-d82c-4c9f-afc5-ff683982ff4f"",
    ""spaces_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/spaces"",
    ""domains_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/domains"",
    ""private_domains_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/private_domains"",
    ""users_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/users"",
    ""managers_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/managers"",
    ""billing_managers_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/billing_managers"",
    ""auditors_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/auditors"",
    ""app_events_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("66706c63-7213-40a6-a2cc-5733669368b7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-690", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("66706c63-7213-40a6-a2cc-5733669368b7", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/59559028-d82c-4c9f-afc5-ff683982ff4f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/4589433f-2513-4e50-b6d7-0ced5d724c6c/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7b479499-13ad-4eae-8ac1-d73360d513ba"",
    ""url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02"",
    ""created_at"": ""2016-07-27T14:02:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-706"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""7b479499-13ad-4eae-8ac1-d73360d513ba"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/6787bf82-5ec3-4e6d-bf2a-4bd3aa18e42f"",
    ""spaces_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/spaces"",
    ""domains_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/domains"",
    ""private_domains_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/private_domains"",
    ""users_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/users"",
    ""managers_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/managers"",
    ""billing_managers_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/billing_managers"",
    ""auditors_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/auditors"",
    ""app_events_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("7b479499-13ad-4eae-8ac1-d73360d513ba", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-706", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("7b479499-13ad-4eae-8ac1-d73360d513ba", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/6787bf82-5ec3-4e6d-bf2a-4bd3aa18e42f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/c3f73642-27ae-4c4c-a10f-56353b4a3a02/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveBillingManagerWithOrganizationByUsernameRequest value = new RemoveBillingManagerWithOrganizationByUsernameRequest();


                cfClient.Organizations.RemoveBillingManagerWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""afe474c3-2e9f-439f-adfe-a648310d2618"",
        ""url"": ""/v2/users/uaa-id-131"",
        ""created_at"": ""2016-07-27T14:02:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-131/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-131/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-131/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-131/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-131/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-131/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-131/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""afe474c3-2e9f-439f-adfe-a648310d2618"",
        ""url"": ""/v2/users/uaa-id-132"",
        ""created_at"": ""2016-07-27T14:02:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-132/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-132/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-132/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-132/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-132/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-132/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-132/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("afe474c3-2e9f-439f-adfe-a648310d2618", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-131", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-131/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-131/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("afe474c3-2e9f-439f-adfe-a648310d2618", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-132", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-132/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-132/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveAuditorWithOrganizationByUsernameRequest value = new RemoveAuditorWithOrganizationByUsernameRequest();


                cfClient.Organizations.RemoveAuditorWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a4ab5221-bf11-4b62-833e-ac7cfab5f330"",
        ""url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8"",
        ""created_at"": ""2016-07-27T14:02:33Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""a4ab5221-bf11-4b62-833e-ac7cfab5f330"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/da27fe63-ead3-4a2b-81fd-b4b5821b1133"",
        ""spaces_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/spaces"",
        ""domains_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/domains"",
        ""private_domains_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/private_domains"",
        ""users_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/users"",
        ""managers_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/managers"",
        ""billing_managers_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/billing_managers"",
        ""auditors_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/auditors"",
        ""app_events_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a4ab5221-bf11-4b62-833e-ac7cfab5f330", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:33Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("a4ab5221-bf11-4b62-833e-ac7cfab5f330", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/da27fe63-ead3-4a2b-81fd-b4b5821b1133", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/27060599-e107-4e51-aff9-3d71292bb4f8/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c1e752f2-d07c-44f0-b9b8-e0add87b0da3"",
        ""url"": ""/v2/users/uaa-id-119"",
        ""created_at"": ""2016-07-27T14:02:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""user@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-119/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-119/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-119/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-119/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-119/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-119/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-119/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c1e752f2-d07c-44f0-b9b8-e0add87b0da3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-119", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-119/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-119/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c7093780-99d0-4a0d-a08a-e32f3cc81136"",
        ""url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968"",
        ""created_at"": ""2016-07-27T14:02:42Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-736"",
        ""organization_guid"": ""c7093780-99d0-4a0d-a08a-e32f3cc81136"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/889d7c10-6566-4823-9235-caac1a21e640"",
        ""developers_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/developers"",
        ""managers_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/managers"",
        ""auditors_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/auditors"",
        ""apps_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/apps"",
        ""routes_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/routes"",
        ""domains_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/domains"",
        ""service_instances_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/service_instances"",
        ""app_events_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/app_events"",
        ""events_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/events"",
        ""security_groups_url"": ""/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c7093780-99d0-4a0d-a08a-e32f3cc81136", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:42Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-736", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("c7093780-99d0-4a0d-a08a-e32f3cc81136", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/889d7c10-6566-4823-9235-caac1a21e640", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4f05989d-4f41-4ee7-9d4d-ca9e45237968/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 2,
  ""prev_url"": null,
  ""next_url"": ""/v2/organizations/f2a88fb7-27e4-4a1e-a953-bd03bc59b235/user_roles?order-direction=asc=2=1"",
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""87cc74bf-17bb-45b9-b65d-7222535d4e6e"",
        ""url"": ""/v2/users/uaa-id-146"",
        ""created_at"": ""2016-07-27T14:02:42Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""organization_roles"": [
          ""org_user"",
          ""org_manager"",
          ""org_auditor"",
          ""billing_manager""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-146/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-146/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-146/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-146/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-146/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-146/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-146/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingRolesOfAllUsersInOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("/v2/organizations/f2a88fb7-27e4-4a1e-a953-bd03bc59b235/user_roles?order-direction=asc=2=1", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("87cc74bf-17bb-45b9-b65d-7222535d4e6e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-146", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:42Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-146/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-146/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e8f29e06-96d7-4b94-8aa4-3394221aecf9"",
    ""url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2"",
    ""created_at"": ""2016-07-27T14:02:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-716"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""e8f29e06-96d7-4b94-8aa4-3394221aecf9"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/e9c003d2-a73e-43b1-9b8f-ae08ce2199ba"",
    ""spaces_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/spaces"",
    ""domains_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/domains"",
    ""private_domains_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/private_domains"",
    ""users_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/users"",
    ""managers_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/managers"",
    ""billing_managers_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/billing_managers"",
    ""auditors_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/auditors"",
    ""app_events_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateManagerWithOrganizationByUsernameRequest value = new AssociateManagerWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateManagerWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("e8f29e06-96d7-4b94-8aa4-3394221aecf9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-716", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("e8f29e06-96d7-4b94-8aa4-3394221aecf9", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/e9c003d2-a73e-43b1-9b8f-ae08ce2199ba", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/60fa520e-7834-49cc-9791-5014d7bb72d2/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6d0c9b20-85c9-40db-9e14-5c895a7479b9"",
    ""url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-684"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""6d0c9b20-85c9-40db-9e14-5c895a7479b9"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/c8963401-fe4f-4d2c-aafd-f2177051d5da"",
    ""spaces_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/spaces"",
    ""domains_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/domains"",
    ""private_domains_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/private_domains"",
    ""users_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/users"",
    ""managers_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/managers"",
    ""billing_managers_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/billing_managers"",
    ""auditors_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/auditors"",
    ""app_events_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateBillingManagerWithOrganizationByUsernameRequest value = new AssociateBillingManagerWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("6d0c9b20-85c9-40db-9e14-5c895a7479b9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-684", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("6d0c9b20-85c9-40db-9e14-5c895a7479b9", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/c8963401-fe4f-4d2c-aafd-f2177051d5da", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/f9bd5212-be45-45a1-9076-b30a5a326bcb/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociatePrivateDomainWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""93d3867a-94d7-4396-a394-b2bedc9bc90f"",
    ""url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-678"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""93d3867a-94d7-4396-a394-b2bedc9bc90f"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/07fe5059-dbeb-4707-85c9-a2e1591eb8eb"",
    ""spaces_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/spaces"",
    ""domains_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/domains"",
    ""private_domains_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/private_domains"",
    ""users_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/users"",
    ""managers_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/managers"",
    ""billing_managers_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/billing_managers"",
    ""auditors_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/auditors"",
    ""app_events_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociatePrivateDomainWithOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("93d3867a-94d7-4396-a394-b2bedc9bc90f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-678", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("93d3867a-94d7-4396-a394-b2bedc9bc90f", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/07fe5059-dbeb-4707-85c9-a2e1591eb8eb", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/880a1081-4053-4f84-8c22-4cc72dfe1d7b/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""1c9ad0b1-fc40-4193-b518-a2de2bef664b"",
        ""url"": ""/v2/shared_domains/3af4ca56-718e-483c-b7c1-d22b3fd25caa"",
        ""created_at"": ""2016-07-27T14:02:33Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""1c9ad0b1-fc40-4193-b518-a2de2bef664b"",
        ""url"": ""/v2/shared_domains/4f14ea33-0692-4045-9c3e-1851ad32085d"",
        ""created_at"": ""2016-07-27T14:02:33Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("1c9ad0b1-fc40-4193-b518-a2de2bef664b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/3af4ca56-718e-483c-b7c1-d22b3fd25caa", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:33Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupType), true);
                Assert.AreEqual("1c9ad0b1-fc40-4193-b518-a2de2bef664b", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/4f14ea33-0692-4045-9c3e-1851ad32085d", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:33Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupType), true);

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""58a5b61e-438c-4e78-a63a-e730473b852f"",
  ""name"": ""name-621"",
  ""status"": ""active"",
  ""spaces"": [
    {
      ""guid"": ""58a5b61e-438c-4e78-a63a-e730473b852f"",
      ""name"": ""name-623"",
      ""service_count"": 0,
      ""app_count"": 0,
      ""mem_dev_total"": 0,
      ""mem_prod_total"": 0
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("58a5b61e-438c-4e78-a63a-e730473b852f", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-621", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void RemoveUserWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveUserWithOrganizationByUsernameRequest value = new RemoveUserWithOrganizationByUsernameRequest();


                cfClient.Organizations.RemoveUserWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""40c3762a-eda4-4e96-b449-25a4eb2ba281"",
    ""url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""40c3762a-eda4-4e96-b449-25a4eb2ba281"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/10bafab8-a205-4a59-ac99-71038d65dddd"",
    ""spaces_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/spaces"",
    ""domains_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/domains"",
    ""private_domains_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/private_domains"",
    ""users_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/users"",
    ""managers_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/managers"",
    ""billing_managers_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/billing_managers"",
    ""auditors_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/auditors"",
    ""app_events_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("40c3762a-eda4-4e96-b449-25a4eb2ba281", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("40c3762a-eda4-4e96-b449-25a4eb2ba281", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/10bafab8-a205-4a59-ac99-71038d65dddd", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/451548c6-305f-4820-a252-9f882df111fa/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0ba56f54-2d79-451f-bb4b-e41b3621d3a1"",
    ""url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0"",
    ""created_at"": ""2016-07-27T14:02:40Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-666"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""0ba56f54-2d79-451f-bb4b-e41b3621d3a1"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/08028aa4-ff4d-400e-82ee-83cdf5f38b65"",
    ""spaces_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/spaces"",
    ""domains_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/domains"",
    ""private_domains_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/private_domains"",
    ""users_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/users"",
    ""managers_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/managers"",
    ""billing_managers_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/billing_managers"",
    ""auditors_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/auditors"",
    ""app_events_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("0ba56f54-2d79-451f-bb4b-e41b3621d3a1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-27T14:02:40Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-666", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("0ba56f54-2d79-451f-bb4b-e41b3621d3a1", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/08028aa4-ff4d-400e-82ee-83cdf5f38b65", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/706a09f3-0c40-47db-b764-7faefeea5bc0/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}