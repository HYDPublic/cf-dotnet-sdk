//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-335"",
        ""url"": ""/v2/users/uaa-id-335"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-335/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-335/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-335/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-335/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-335/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-335/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-335/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-335", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-335", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-335/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""de2ac534-0f0a-4a85-83a1-b5f495a012f6"",
        ""url"": ""/v2/domains/de2ac534-0f0a-4a85-83a1-b5f495a012f6"",
        ""created_at"": ""2015-03-25T13:48:57+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ce1467f4-e038-4958-8877-96a260e79cf6"",
        ""url"": ""/v2/domains/ce1467f4-e038-4958-8877-96a260e79cf6"",
        ""created_at"": ""2015-03-25T13:48:57+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("de2ac534-0f0a-4a85-83a1-b5f495a012f6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/de2ac534-0f0a-4a85-83a1-b5f495a012f6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:57+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("ce1467f4-e038-4958-8877-96a260e79cf6", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/ce1467f4-e038-4958-8877-96a260e79cf6", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:57+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-328"",
        ""url"": ""/v2/users/uaa-id-328"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-328/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-328/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-328/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-328/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-328/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-328/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-328/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-328", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-328", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-328/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-328/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-352"",
        ""url"": ""/v2/users/uaa-id-352"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-352/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-352/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-352/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-352/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-352/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-352/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-352/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-352", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-352", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-352/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-352/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bdfa9a68-ff32-4999-8768-b82d5d8ec270"",
        ""url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270"",
        ""created_at"": ""2015-03-25T13:48:58+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1836"",
        ""organization_guid"": ""5d7a6dad-14b8-4fad-af13-5f9c61823630"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/5d7a6dad-14b8-4fad-af13-5f9c61823630"",
        ""developers_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/developers"",
        ""managers_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/managers"",
        ""auditors_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/auditors"",
        ""apps_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/apps"",
        ""routes_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/routes"",
        ""domains_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/domains"",
        ""service_instances_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/service_instances"",
        ""app_events_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/app_events"",
        ""events_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/events"",
        ""security_groups_url"": ""/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bdfa9a68-ff32-4999-8768-b82d5d8ec270", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:58+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1836", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5d7a6dad-14b8-4fad-af13-5f9c61823630", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/5d7a6dad-14b8-4fad-af13-5f9c61823630", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/bdfa9a68-ff32-4999-8768-b82d5d8ec270/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a7c4aaae-52de-41ad-a483-15fccb6e7619"",
    ""url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1858"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""853b9cf2-d1c5-4443-8b4a-8b351f0dbbba"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/853b9cf2-d1c5-4443-8b4a-8b351f0dbbba"",
    ""spaces_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/spaces"",
    ""domains_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/domains"",
    ""private_domains_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/private_domains"",
    ""users_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/users"",
    ""managers_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/managers"",
    ""billing_managers_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/billing_managers"",
    ""auditors_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/auditors"",
    ""app_events_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("a7c4aaae-52de-41ad-a483-15fccb6e7619", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1858", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("853b9cf2-d1c5-4443-8b4a-8b351f0dbbba", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/853b9cf2-d1c5-4443-8b4a-8b351f0dbbba", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/a7c4aaae-52de-41ad-a483-15fccb6e7619/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""cf8711a2-9491-43c6-98a0-945c48b51bce"",
    ""url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce"",
    ""created_at"": ""2015-03-25T13:48:58+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1848"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""9a0b5652-1284-49b2-a721-a21f1633224e"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/9a0b5652-1284-49b2-a721-a21f1633224e"",
    ""spaces_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/spaces"",
    ""domains_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/domains"",
    ""private_domains_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/private_domains"",
    ""users_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/users"",
    ""managers_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/managers"",
    ""billing_managers_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/billing_managers"",
    ""auditors_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/auditors"",
    ""app_events_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("cf8711a2-9491-43c6-98a0-945c48b51bce", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1848", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("9a0b5652-1284-49b2-a721-a21f1633224e", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/9a0b5652-1284-49b2-a721-a21f1633224e", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/cf8711a2-9491-43c6-98a0-945c48b51bce/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5e69b37f-9988-4ef5-8f8b-bb4901d9ab35"",
        ""url"": ""/v2/space_quota_definitions/5e69b37f-9988-4ef5-8f8b-bb4901d9ab35"",
        ""created_at"": ""2015-03-25T13:48:58+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1843"",
        ""organization_guid"": ""f8bda3af-80d8-4eb7-849c-cf0d64f9d125"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/f8bda3af-80d8-4eb7-849c-cf0d64f9d125"",
        ""spaces_url"": ""/v2/space_quota_definitions/5e69b37f-9988-4ef5-8f8b-bb4901d9ab35/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5e69b37f-9988-4ef5-8f8b-bb4901d9ab35", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/5e69b37f-9988-4ef5-8f8b-bb4901d9ab35", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:58+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1843", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f8bda3af-80d8-4eb7-849c-cf0d64f9d125", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/f8bda3af-80d8-4eb7-849c-cf0d64f9d125", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/5e69b37f-9988-4ef5-8f8b-bb4901d9ab35/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ec1c576f-2940-4b15-8287-0eb15f9e9c2b"",
    ""url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1866"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""f25187ad-1e96-4fdd-947b-a4c0aa263829"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/f25187ad-1e96-4fdd-947b-a4c0aa263829"",
    ""spaces_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/spaces"",
    ""domains_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/domains"",
    ""private_domains_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/private_domains"",
    ""users_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/users"",
    ""managers_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/managers"",
    ""billing_managers_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/billing_managers"",
    ""auditors_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/auditors"",
    ""app_events_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("ec1c576f-2940-4b15-8287-0eb15f9e9c2b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1866", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("f25187ad-1e96-4fdd-947b-a4c0aa263829", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/f25187ad-1e96-4fdd-947b-a4c0aa263829", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ec1c576f-2940-4b15-8287-0eb15f9e9c2b/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d766a342-033f-4cae-88b1-847644765073"",
    ""url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073"",
    ""created_at"": ""2015-03-25T13:48:58+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1846"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""86a7e77e-7033-4849-929f-0a605600bf2f"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/86a7e77e-7033-4849-929f-0a605600bf2f"",
    ""spaces_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/spaces"",
    ""domains_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/domains"",
    ""private_domains_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/private_domains"",
    ""users_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/users"",
    ""managers_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/managers"",
    ""billing_managers_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/auditors"",
    ""app_events_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d766a342-033f-4cae-88b1-847644765073/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("d766a342-033f-4cae-88b1-847644765073", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1846", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("86a7e77e-7033-4849-929f-0a605600bf2f", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/86a7e77e-7033-4849-929f-0a605600bf2f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d766a342-033f-4cae-88b1-847644765073/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bf8027d8-4647-499c-97c7-c540b108c6de"",
    ""url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1877"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""b8d32a6a-605c-47d0-aa21-dbd322a7aa44"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/b8d32a6a-605c-47d0-aa21-dbd322a7aa44"",
    ""spaces_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/spaces"",
    ""domains_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/domains"",
    ""private_domains_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/private_domains"",
    ""users_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/users"",
    ""managers_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/managers"",
    ""billing_managers_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/billing_managers"",
    ""auditors_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/auditors"",
    ""app_events_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("bf8027d8-4647-499c-97c7-c540b108c6de", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1877", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("b8d32a6a-605c-47d0-aa21-dbd322a7aa44", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/b8d32a6a-605c-47d0-aa21-dbd322a7aa44", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/bf8027d8-4647-499c-97c7-c540b108c6de/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""492abc73-8c28-4ce0-b27a-26f23ab7e44e"",
    ""url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1864"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""b3f6dc21-9b2f-4dcf-b233-9d5b310c47aa"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/b3f6dc21-9b2f-4dcf-b233-9d5b310c47aa"",
    ""spaces_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/spaces"",
    ""domains_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/domains"",
    ""private_domains_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/private_domains"",
    ""users_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/users"",
    ""managers_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/managers"",
    ""billing_managers_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/billing_managers"",
    ""auditors_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/auditors"",
    ""app_events_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("492abc73-8c28-4ce0-b27a-26f23ab7e44e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1864", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("b3f6dc21-9b2f-4dcf-b233-9d5b310c47aa", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/b3f6dc21-9b2f-4dcf-b233-9d5b310c47aa", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/492abc73-8c28-4ce0-b27a-26f23ab7e44e/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""545ef161-1971-403b-9dc5-f0524c16229f"",
    ""url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": ""2015-03-25T13:48:59+00:00""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""2bb6cef9-cd1b-4d3d-a15b-a99cc0450c7c"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/2bb6cef9-cd1b-4d3d-a15b-a99cc0450c7c"",
    ""spaces_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/spaces"",
    ""domains_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/domains"",
    ""private_domains_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/private_domains"",
    ""users_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/users"",
    ""managers_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/managers"",
    ""billing_managers_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/billing_managers"",
    ""auditors_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/auditors"",
    ""app_events_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("545ef161-1971-403b-9dc5-f0524c16229f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("2bb6cef9-cd1b-4d3d-a15b-a99cc0450c7c", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/2bb6cef9-cd1b-4d3d-a15b-a99cc0450c7c", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/545ef161-1971-403b-9dc5-f0524c16229f/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b2171b18-5567-4bb9-a847-8ab18b239068"",
        ""url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068"",
        ""created_at"": ""2015-03-25T13:48:57+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""9244791f-c7a5-46de-92f4-243ac23ab296"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/9244791f-c7a5-46de-92f4-243ac23ab296"",
        ""spaces_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/spaces"",
        ""domains_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/domains"",
        ""private_domains_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/private_domains"",
        ""users_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/users"",
        ""managers_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/managers"",
        ""billing_managers_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/billing_managers"",
        ""auditors_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/auditors"",
        ""app_events_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b2171b18-5567-4bb9-a847-8ab18b239068", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:57+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("9244791f-c7a5-46de-92f4-243ac23ab296", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/9244791f-c7a5-46de-92f4-243ac23ab296", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/b2171b18-5567-4bb9-a847-8ab18b239068/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-344"",
        ""url"": ""/v2/users/uaa-id-344"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-344/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-344/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-344/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-344/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-344/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-344/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-344/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-345"",
        ""url"": ""/v2/users/uaa-id-345"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-345/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-345/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-345/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-345/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-345/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-345/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-345/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-344", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-344", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-344/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-344/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-345", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-345", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-345/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-345/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b0ff1b3a-39a9-42fa-9018-22cb4723430a"",
        ""url"": ""/v2/services/b0ff1b3a-39a9-42fa-9018-22cb4723430a"",
        ""created_at"": ""2015-03-25T13:48:59+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-71"",
        ""provider"": ""provider-62"",
        ""url"": ""https://foo.com/url-91"",
        ""description"": ""desc-165"",
        ""long_description"": null,
        ""version"": ""version-46"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""5d771e6b-4cad-4efb-a441-55de5929df4d"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/b0ff1b3a-39a9-42fa-9018-22cb4723430a/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b0ff1b3a-39a9-42fa-9018-22cb4723430a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/b0ff1b3a-39a9-42fa-9018-22cb4723430a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-71", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-62", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-91", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-165", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-46", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("5d771e6b-4cad-4efb-a441-55de5929df4d", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/b0ff1b3a-39a9-42fa-9018-22cb4723430a/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""01022033-09c6-4b73-bbfc-359fcfca32b9"",
    ""url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1854"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""d0a318bb-52e3-4244-9419-bffdb27bc919"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/d0a318bb-52e3-4244-9419-bffdb27bc919"",
    ""spaces_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/spaces"",
    ""domains_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/domains"",
    ""private_domains_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/private_domains"",
    ""users_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/users"",
    ""managers_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/managers"",
    ""billing_managers_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/billing_managers"",
    ""auditors_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/auditors"",
    ""app_events_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("01022033-09c6-4b73-bbfc-359fcfca32b9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1854", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("d0a318bb-52e3-4244-9419-bffdb27bc919", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/d0a318bb-52e3-4244-9419-bffdb27bc919", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/01022033-09c6-4b73-bbfc-359fcfca32b9/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9b7bbf07-61c9-42bf-be46-0b62fe54525a"",
    ""url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""7149c35d-b512-47ca-baf7-5554a41453a6"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/7149c35d-b512-47ca-baf7-5554a41453a6"",
    ""spaces_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/spaces"",
    ""domains_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/domains"",
    ""private_domains_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/private_domains"",
    ""users_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/users"",
    ""managers_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/managers"",
    ""billing_managers_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/billing_managers"",
    ""auditors_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/auditors"",
    ""app_events_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("9b7bbf07-61c9-42bf-be46-0b62fe54525a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("7149c35d-b512-47ca-baf7-5554a41453a6", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/7149c35d-b512-47ca-baf7-5554a41453a6", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/9b7bbf07-61c9-42bf-be46-0b62fe54525a/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ba5883d3-6249-4704-9a6e-b21c3130aff4"",
        ""url"": ""/v2/private_domains/ba5883d3-6249-4704-9a6e-b21c3130aff4"",
        ""created_at"": ""2015-03-25T13:48:58+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-55.example.com"",
        ""owning_organization_guid"": ""938250a3-b0aa-47f1-aee3-d0dfd96f000d"",
        ""owning_organization_url"": ""/v2/organizations/938250a3-b0aa-47f1-aee3-d0dfd96f000d""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ba5883d3-6249-4704-9a6e-b21c3130aff4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/ba5883d3-6249-4704-9a6e-b21c3130aff4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:58+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-55.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("938250a3-b0aa-47f1-aee3-d0dfd96f000d", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/938250a3-b0aa-47f1-aee3-d0dfd96f000d", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""66c3cd4b-b3f3-4f1b-9873-66b16e1aa6ac"",""name"":""name-660"",""status"":""active"",""spaces"":[{""guid"":""c3ee8dc7-9be5-4e4b-8e27-910d865032ae"",""name"":""name-662"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("66c3cd4b-b3f3-4f1b-9873-66b16e1aa6ac", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-660", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ceef3f2f-8d83-4516-900a-4a708c0c0e97"",
    ""url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1860"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8faa8c78-05c2-4967-abbd-159ebc3e7a1b"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/8faa8c78-05c2-4967-abbd-159ebc3e7a1b"",
    ""spaces_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/spaces"",
    ""domains_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/domains"",
    ""private_domains_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/private_domains"",
    ""users_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/users"",
    ""managers_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/managers"",
    ""billing_managers_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/billing_managers"",
    ""auditors_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/auditors"",
    ""app_events_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("ceef3f2f-8d83-4516-900a-4a708c0c0e97", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1860", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8faa8c78-05c2-4967-abbd-159ebc3e7a1b", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/8faa8c78-05c2-4967-abbd-159ebc3e7a1b", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ceef3f2f-8d83-4516-900a-4a708c0c0e97/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""77b1e857-c91f-4a54-aaba-54a60b3c6013"",
    ""url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1852"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""afc095b6-9515-477a-ad3f-a6d96776f134"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/afc095b6-9515-477a-ad3f-a6d96776f134"",
    ""spaces_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/spaces"",
    ""domains_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/domains"",
    ""private_domains_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/private_domains"",
    ""users_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/users"",
    ""managers_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/managers"",
    ""billing_managers_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/billing_managers"",
    ""auditors_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/auditors"",
    ""app_events_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("77b1e857-c91f-4a54-aaba-54a60b3c6013", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1852", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("afc095b6-9515-477a-ad3f-a6d96776f134", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/afc095b6-9515-477a-ad3f-a6d96776f134", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/77b1e857-c91f-4a54-aaba-54a60b3c6013/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}