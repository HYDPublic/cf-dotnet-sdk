//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-273"",
        ""url"": ""/v2/users/uaa-id-273"",
        ""created_at"": ""2015-05-19T15:27:20+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-273/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-273/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-273/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-273/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-273/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-273/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-273/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-273", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-273", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-273/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-273/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f649fd17-eec5-4402-902a-1715c9f7ec31"",
        ""url"": ""/v2/domains/f649fd17-eec5-4402-902a-1715c9f7ec31"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""f7380c81-e199-4a7d-86ec-6e1791326df3"",
        ""url"": ""/v2/domains/f7380c81-e199-4a7d-86ec-6e1791326df3"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f649fd17-eec5-4402-902a-1715c9f7ec31", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/f649fd17-eec5-4402-902a-1715c9f7ec31", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("f7380c81-e199-4a7d-86ec-6e1791326df3", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/f7380c81-e199-4a7d-86ec-6e1791326df3", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-265"",
        ""url"": ""/v2/users/uaa-id-265"",
        ""created_at"": ""2015-05-19T15:27:20+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-265/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-265/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-265/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-265/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-265/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-265/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-265/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-265", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-265", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-265/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-265/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-281"",
        ""url"": ""/v2/users/uaa-id-281"",
        ""created_at"": ""2015-05-19T15:27:20+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-281/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-281/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-281/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-281/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-281/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-281/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-281/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-281", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-281", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-281/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-281/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ec7bb568-8c77-432b-abee-e26393476452"",
        ""url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452"",
        ""created_at"": ""2015-05-19T15:27:19+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1625"",
        ""organization_guid"": ""efc1c343-ea49-4382-90fe-052ed11790b9"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/efc1c343-ea49-4382-90fe-052ed11790b9"",
        ""developers_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/developers"",
        ""managers_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/managers"",
        ""auditors_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/auditors"",
        ""apps_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/apps"",
        ""routes_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/routes"",
        ""domains_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/domains"",
        ""service_instances_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/service_instances"",
        ""app_events_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/app_events"",
        ""events_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/events"",
        ""security_groups_url"": ""/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ec7bb568-8c77-432b-abee-e26393476452", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1625", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("efc1c343-ea49-4382-90fe-052ed11790b9", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/efc1c343-ea49-4382-90fe-052ed11790b9", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/ec7bb568-8c77-432b-abee-e26393476452/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3eb21ef5-97f8-426a-aa53-255fbd31de43"",
    ""url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43"",
    ""created_at"": ""2015-05-19T15:27:19+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1617"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8ad70084-e930-4198-9590-655b7136e4d5"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/8ad70084-e930-4198-9590-655b7136e4d5"",
    ""spaces_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/spaces"",
    ""domains_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/domains"",
    ""private_domains_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/private_domains"",
    ""users_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/users"",
    ""managers_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/managers"",
    ""billing_managers_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/billing_managers"",
    ""auditors_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/auditors"",
    ""app_events_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("3eb21ef5-97f8-426a-aa53-255fbd31de43", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1617", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8ad70084-e930-4198-9590-655b7136e4d5", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/8ad70084-e930-4198-9590-655b7136e4d5", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/3eb21ef5-97f8-426a-aa53-255fbd31de43/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd"",
    ""url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1634"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""58cd4a13-e565-428c-bb25-e52bfe84fb15"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/58cd4a13-e565-428c-bb25-e52bfe84fb15"",
    ""spaces_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/spaces"",
    ""domains_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/domains"",
    ""private_domains_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/private_domains"",
    ""users_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/users"",
    ""managers_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/managers"",
    ""billing_managers_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/billing_managers"",
    ""auditors_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/auditors"",
    ""app_events_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1634", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("58cd4a13-e565-428c-bb25-e52bfe84fb15", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/58cd4a13-e565-428c-bb25-e52bfe84fb15", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ae2ab2f0-e5e6-41b1-88c2-73adc35fc8fd/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a105b58e-551d-4890-9079-190a832483b8"",
        ""url"": ""/v2/space_quota_definitions/a105b58e-551d-4890-9079-190a832483b8"",
        ""created_at"": ""2015-05-19T15:27:20+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1640"",
        ""organization_guid"": ""5139ac93-3324-4245-ac4e-96ef4cecbf38"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/5139ac93-3324-4245-ac4e-96ef4cecbf38"",
        ""spaces_url"": ""/v2/space_quota_definitions/a105b58e-551d-4890-9079-190a832483b8/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a105b58e-551d-4890-9079-190a832483b8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/a105b58e-551d-4890-9079-190a832483b8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1640", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5139ac93-3324-4245-ac4e-96ef4cecbf38", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/5139ac93-3324-4245-ac4e-96ef4cecbf38", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/a105b58e-551d-4890-9079-190a832483b8/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d"",
    ""url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1651"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""26e9b769-c83e-4c70-aabe-8576314391c5"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/26e9b769-c83e-4c70-aabe-8576314391c5"",
    ""spaces_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/spaces"",
    ""domains_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/domains"",
    ""private_domains_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/private_domains"",
    ""users_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/users"",
    ""managers_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/managers"",
    ""billing_managers_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/billing_managers"",
    ""auditors_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/auditors"",
    ""app_events_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1651", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("26e9b769-c83e-4c70-aabe-8576314391c5", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/26e9b769-c83e-4c70-aabe-8576314391c5", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/9ad9cc07-1e72-4fb4-8c50-db081a6bbe9d/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3462e286-d75c-4970-9604-1f160aab4aaf"",
    ""url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1632"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8842713b-b8ee-4f61-81d7-d7ce2699ea5b"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/8842713b-b8ee-4f61-81d7-d7ce2699ea5b"",
    ""spaces_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/spaces"",
    ""domains_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/domains"",
    ""private_domains_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/private_domains"",
    ""users_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/users"",
    ""managers_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/managers"",
    ""billing_managers_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/billing_managers"",
    ""auditors_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/auditors"",
    ""app_events_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("3462e286-d75c-4970-9604-1f160aab4aaf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1632", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8842713b-b8ee-4f61-81d7-d7ce2699ea5b", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/8842713b-b8ee-4f61-81d7-d7ce2699ea5b", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/3462e286-d75c-4970-9604-1f160aab4aaf/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""fdf10fb5-a3d9-4385-9329-463092147ea7"",
    ""url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1655"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""c7bf4e68-4dad-47f1-9108-fdde478843f9"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/c7bf4e68-4dad-47f1-9108-fdde478843f9"",
    ""spaces_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/spaces"",
    ""domains_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/domains"",
    ""private_domains_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/private_domains"",
    ""users_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/users"",
    ""managers_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/managers"",
    ""billing_managers_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/billing_managers"",
    ""auditors_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/auditors"",
    ""app_events_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("fdf10fb5-a3d9-4385-9329-463092147ea7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1655", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("c7bf4e68-4dad-47f1-9108-fdde478843f9", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/c7bf4e68-4dad-47f1-9108-fdde478843f9", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/fdf10fb5-a3d9-4385-9329-463092147ea7/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c4c81d96-2edf-4e9c-a8be-e49c362d1743"",
    ""url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1649"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""54db099d-7eec-4d86-ac86-e8778e3037a6"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/54db099d-7eec-4d86-ac86-e8778e3037a6"",
    ""spaces_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/spaces"",
    ""domains_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/domains"",
    ""private_domains_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/private_domains"",
    ""users_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/users"",
    ""managers_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/managers"",
    ""billing_managers_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/billing_managers"",
    ""auditors_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/auditors"",
    ""app_events_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("c4c81d96-2edf-4e9c-a8be-e49c362d1743", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1649", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("54db099d-7eec-4d86-ac86-e8778e3037a6", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/54db099d-7eec-4d86-ac86-e8778e3037a6", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/c4c81d96-2edf-4e9c-a8be-e49c362d1743/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1806ec7c-8a5f-449a-927c-beaf4c0b66c1"",
    ""url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": ""2015-05-19T15:27:20+00:00""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""1bd41263-5150-462d-ada4-073df672295f"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/1bd41263-5150-462d-ada4-073df672295f"",
    ""spaces_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/spaces"",
    ""domains_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/domains"",
    ""private_domains_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/private_domains"",
    ""users_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/users"",
    ""managers_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/managers"",
    ""billing_managers_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/billing_managers"",
    ""auditors_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/auditors"",
    ""app_events_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("1806ec7c-8a5f-449a-927c-beaf4c0b66c1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("1bd41263-5150-462d-ada4-073df672295f", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/1bd41263-5150-462d-ada4-073df672295f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/1806ec7c-8a5f-449a-927c-beaf4c0b66c1/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0a949a57-ed53-4d72-9205-c4432df8f118"",
        ""url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""f7bdf4f9-8fce-446b-950a-6ad01340331b"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/f7bdf4f9-8fce-446b-950a-6ad01340331b"",
        ""spaces_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/spaces"",
        ""domains_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/domains"",
        ""private_domains_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/private_domains"",
        ""users_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/users"",
        ""managers_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/managers"",
        ""billing_managers_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/billing_managers"",
        ""auditors_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/auditors"",
        ""app_events_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("f7bdf4f9-8fce-446b-950a-6ad01340331b", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/f7bdf4f9-8fce-446b-950a-6ad01340331b", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-254"",
        ""url"": ""/v2/users/uaa-id-254"",
        ""created_at"": ""2015-05-19T15:27:19+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-254/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-254/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-254/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-254/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-254/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-254/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-254/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-255"",
        ""url"": ""/v2/users/uaa-id-255"",
        ""created_at"": ""2015-05-19T15:27:19+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-255/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-255/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-255/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-255/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-255/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-255/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-255/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-254", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-254", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-254/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-254/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-255", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-255", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-255/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-255/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bd5d0454-5068-432d-9bfd-86cce84780fb"",
        ""url"": ""/v2/services/bd5d0454-5068-432d-9bfd-86cce84780fb"",
        ""created_at"": ""2015-05-19T15:27:20+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-80"",
        ""provider"": ""provider-71"",
        ""url"": ""https://foo.com/url-101"",
        ""description"": ""desc-179"",
        ""long_description"": null,
        ""version"": ""version-55"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""545544cf-8c9a-40a9-baa9-ccc7c2633fdb"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/bd5d0454-5068-432d-9bfd-86cce84780fb/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bd5d0454-5068-432d-9bfd-86cce84780fb", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/bd5d0454-5068-432d-9bfd-86cce84780fb", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-80", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-71", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-101", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-179", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-55", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("545544cf-8c9a-40a9-baa9-ccc7c2633fdb", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/bd5d0454-5068-432d-9bfd-86cce84780fb/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ecbc1f9c-6791-4313-97ee-ecd723badbc8"",
    ""url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1643"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""c23accf4-79df-43b9-b5e5-b4134cc3dafc"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/c23accf4-79df-43b9-b5e5-b4134cc3dafc"",
    ""spaces_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/spaces"",
    ""domains_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/domains"",
    ""private_domains_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/private_domains"",
    ""users_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/users"",
    ""managers_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/managers"",
    ""billing_managers_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/auditors"",
    ""app_events_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("ecbc1f9c-6791-4313-97ee-ecd723badbc8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1643", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("c23accf4-79df-43b9-b5e5-b4134cc3dafc", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/c23accf4-79df-43b9-b5e5-b4134cc3dafc", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ecbc1f9c-6791-4313-97ee-ecd723badbc8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d424c3c2-8a40-4f87-8540-b1fecebd602a"",
    ""url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""1e863ed8-2c0b-44a2-bc27-9c670b6bbc39"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/1e863ed8-2c0b-44a2-bc27-9c670b6bbc39"",
    ""spaces_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/spaces"",
    ""domains_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/domains"",
    ""private_domains_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/private_domains"",
    ""users_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/users"",
    ""managers_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/managers"",
    ""billing_managers_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/auditors"",
    ""app_events_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("d424c3c2-8a40-4f87-8540-b1fecebd602a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("1e863ed8-2c0b-44a2-bc27-9c670b6bbc39", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/1e863ed8-2c0b-44a2-bc27-9c670b6bbc39", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d424c3c2-8a40-4f87-8540-b1fecebd602a/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4aa5dbdf-b458-4047-a7b1-ab45957f0399"",
        ""url"": ""/v2/private_domains/4aa5dbdf-b458-4047-a7b1-ab45957f0399"",
        ""created_at"": ""2015-05-19T15:27:19+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-45.example.com"",
        ""owning_organization_guid"": ""5c44407c-a52e-440e-b253-afa976c517f4"",
        ""owning_organization_url"": ""/v2/organizations/5c44407c-a52e-440e-b253-afa976c517f4""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4aa5dbdf-b458-4047-a7b1-ab45957f0399", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/4aa5dbdf-b458-4047-a7b1-ab45957f0399", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-45.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5c44407c-a52e-440e-b253-afa976c517f4", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/5c44407c-a52e-440e-b253-afa976c517f4", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""1746b80b-5f72-4ede-9c8c-f0539e11ce36"",""name"":""name-439"",""status"":""active"",""spaces"":[{""guid"":""6825dc97-fdb6-40c0-ba68-459690696afa"",""name"":""name-441"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("1746b80b-5f72-4ede-9c8c-f0539e11ce36", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-439", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0fdd50dc-6f14-4ac9-ab61-85201e2200eb"",
    ""url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb"",
    ""created_at"": ""2015-05-19T15:27:19+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1619"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""1c3fa5c8-281b-44f9-9bbf-c58bfb60d159"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/1c3fa5c8-281b-44f9-9bbf-c58bfb60d159"",
    ""spaces_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/spaces"",
    ""domains_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/domains"",
    ""private_domains_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/private_domains"",
    ""users_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/users"",
    ""managers_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/managers"",
    ""billing_managers_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/billing_managers"",
    ""auditors_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/auditors"",
    ""app_events_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("0fdd50dc-6f14-4ac9-ab61-85201e2200eb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:19+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1619", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("1c3fa5c8-281b-44f9-9bbf-c58bfb60d159", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/1c3fa5c8-281b-44f9-9bbf-c58bfb60d159", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/0fdd50dc-6f14-4ac9-ab61-85201e2200eb/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5d87c2a3-db52-4828-9ed5-eafa0ec717b7"",
    ""url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7"",
    ""created_at"": ""2015-05-19T15:27:20+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1641"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""b38d0509-e3df-4203-87d5-76c5d4dc184e"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/b38d0509-e3df-4203-87d5-76c5d4dc184e"",
    ""spaces_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/spaces"",
    ""domains_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/domains"",
    ""private_domains_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/private_domains"",
    ""users_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/users"",
    ""managers_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/managers"",
    ""billing_managers_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/billing_managers"",
    ""auditors_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/auditors"",
    ""app_events_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("5d87c2a3-db52-4828-9ed5-eafa0ec717b7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:20+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1641", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("b38d0509-e3df-4203-87d5-76c5d4dc184e", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/b38d0509-e3df-4203-87d5-76c5d4dc184e", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/5d87c2a3-db52-4828-9ed5-eafa0ec717b7/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}