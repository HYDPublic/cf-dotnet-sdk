//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void DisassociateUserWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateUserWithOrganizationByUsernameRequest value = new DisassociateUserWithOrganizationByUsernameRequest();


                cfClient.Organizations.DisassociateUserWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5b042d9f-c5e4-46cd-a05d-0dd3b70b7953"",
        ""url"": ""/v2/space_quota_definitions/229a94cc-3e93-44c8-bb15-19bcf8e1fc0f"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-34"",
        ""organization_guid"": ""5b042d9f-c5e4-46cd-a05d-0dd3b70b7953"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""app_instance_limit"": -1,
        ""app_task_limit"": 5,
        ""total_service_keys"": 600,
        ""organization_url"": ""/v2/organizations/c7afcbd8-b6f2-4b70-b1fb-22a33af1ac93"",
        ""spaces_url"": ""/v2/space_quota_definitions/229a94cc-3e93-44c8-bb15-19bcf8e1fc0f/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5b042d9f-c5e4-46cd-a05d-0dd3b70b7953", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/229a94cc-3e93-44c8-bb15-19bcf8e1fc0f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-34", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5b042d9f-c5e4-46cd-a05d-0dd3b70b7953", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].AppInstanceLimit), true);
                Assert.AreEqual("5", TestUtil.ToTestableString(obj[0].AppTaskLimit), true);
                Assert.AreEqual("600", TestUtil.ToTestableString(obj[0].TotalServiceKeys), true);
                Assert.AreEqual("/v2/organizations/c7afcbd8-b6f2-4b70-b1fb-22a33af1ac93", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/229a94cc-3e93-44c8-bb15-19bcf8e1fc0f/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""30db2919-9921-465d-ad2e-6f0e1c6ca05e"",
        ""url"": ""/v2/private_domains/e78b8c96-161c-4a60-9f92-6273d0f290ec"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-1.example.com"",
        ""owning_organization_guid"": ""30db2919-9921-465d-ad2e-6f0e1c6ca05e"",
        ""owning_organization_url"": ""/v2/organizations/d811d4e6-1648-4699-8fad-617d022407bb"",
        ""shared_organizations_url"": ""/v2/private_domains/e78b8c96-161c-4a60-9f92-6273d0f290ec/shared_organizations""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("30db2919-9921-465d-ad2e-6f0e1c6ca05e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/e78b8c96-161c-4a60-9f92-6273d0f290ec", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-1.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("30db2919-9921-465d-ad2e-6f0e1c6ca05e", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/d811d4e6-1648-4699-8fad-617d022407bb", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/private_domains/e78b8c96-161c-4a60-9f92-6273d0f290ec/shared_organizations", TestUtil.ToTestableString(obj[0].SharedOrganizationsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e873ca70-b18a-41f8-85aa-9e2537448041"",
        ""url"": ""/v2/services/e3f2215f-a676-42bf-a6dc-a9f431b59879"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-1"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-1"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""57112582-9413-486f-9a8f-3890623e81fd"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""e873ca70-b18a-41f8-85aa-9e2537448041"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/e3f2215f-a676-42bf-a6dc-a9f431b59879/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e873ca70-b18a-41f8-85aa-9e2537448041", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/e3f2215f-a676-42bf-a6dc-a9f431b59879", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-1", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-1", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("57112582-9413-486f-9a8f-3890623e81fd", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("e873ca70-b18a-41f8-85aa-9e2537448041", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/e3f2215f-a676-42bf-a6dc-a9f431b59879/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrievingOrganizationInstanceUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""instance_usage"": 3
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationInstanceUsage(guid).Result;


                Assert.AreEqual("3", TestUtil.ToTestableString(obj.InstanceUsage), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2b58466a-b546-444b-a4d0-039f1caaed73"",
    ""url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07"",
    ""created_at"": ""2016-03-30T10:15:06Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-71"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""2b58466a-b546-444b-a4d0-039f1caaed73"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/4840d56e-2578-49d4-a980-effc9ad690d6"",
    ""spaces_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/spaces"",
    ""domains_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/domains"",
    ""private_domains_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/private_domains"",
    ""users_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/users"",
    ""managers_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/managers"",
    ""billing_managers_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/billing_managers"",
    ""auditors_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/auditors"",
    ""app_events_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("2b58466a-b546-444b-a4d0-039f1caaed73", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:06Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-71", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("2b58466a-b546-444b-a4d0-039f1caaed73", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/4840d56e-2578-49d4-a980-effc9ad690d6", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/5c653a4a-99ef-4942-8109-20e79e0d4c07/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6cd46d2a-f061-4b31-ac7a-ef89d368d521"",
    ""url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39"",
    ""created_at"": ""2016-03-30T10:15:06Z"",
    ""updated_at"": ""2016-03-30T10:15:06Z""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""6cd46d2a-f061-4b31-ac7a-ef89d368d521"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/0ed82438-dd00-4fb2-8789-48ef7613578c"",
    ""spaces_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/spaces"",
    ""domains_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/domains"",
    ""private_domains_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/private_domains"",
    ""users_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/users"",
    ""managers_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/managers"",
    ""billing_managers_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/billing_managers"",
    ""auditors_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/auditors"",
    ""app_events_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("6cd46d2a-f061-4b31-ac7a-ef89d368d521", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:06Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:06Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("6cd46d2a-f061-4b31-ac7a-ef89d368d521", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/0ed82438-dd00-4fb2-8789-48ef7613578c", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/7551f2b2-e58a-4d42-87d0-577a0b1fac39/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""010dfb37-590d-4f3a-9199-977aceef6dc6"",
    ""url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2"",
    ""created_at"": ""2016-03-30T10:15:05Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-67"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""010dfb37-590d-4f3a-9199-977aceef6dc6"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/7b190924-efb3-4603-a82f-2f685222c58f"",
    ""spaces_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/spaces"",
    ""domains_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/domains"",
    ""private_domains_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/private_domains"",
    ""users_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/users"",
    ""managers_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/managers"",
    ""billing_managers_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/billing_managers"",
    ""auditors_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/auditors"",
    ""app_events_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateAuditorWithOrganizationByUsernameRequest value = new AssociateAuditorWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("010dfb37-590d-4f3a-9199-977aceef6dc6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-67", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("010dfb37-590d-4f3a-9199-977aceef6dc6", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/7b190924-efb3-4603-a82f-2f685222c58f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/dfdd7d83-f15d-48b2-975b-73cacb4227e2/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5a6f02f7-201b-484d-b18c-a8b4cfce5a0d"",
    ""url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9"",
    ""created_at"": ""2016-03-30T10:15:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-17"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""5a6f02f7-201b-484d-b18c-a8b4cfce5a0d"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/bbb97dc0-941c-4e27-9576-c5dc79f4c93e"",
    ""spaces_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/spaces"",
    ""domains_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/domains"",
    ""private_domains_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/private_domains"",
    ""users_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/users"",
    ""managers_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/managers"",
    ""billing_managers_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/billing_managers"",
    ""auditors_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/auditors"",
    ""app_events_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateUserWithOrganizationByUsernameRequest value = new AssociateUserWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateUserWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("5a6f02f7-201b-484d-b18c-a8b4cfce5a0d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-17", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("5a6f02f7-201b-484d-b18c-a8b4cfce5a0d", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/bbb97dc0-941c-4e27-9576-c5dc79f4c93e", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/03106cb0-019d-4206-88e5-3f5744c5a2d9/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2c7ed7dd-2563-433c-ad3f-029fe15be960"",
        ""url"": ""/v2/users/uaa-id-55"",
        ""created_at"": ""2016-03-30T10:15:05Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-55/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-55/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-55/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-55/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-55/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-55/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-55/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2c7ed7dd-2563-433c-ad3f-029fe15be960", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-55", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-55/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-55/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DisassociateManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateManagerWithOrganizationByUsernameRequest value = new DisassociateManagerWithOrganizationByUsernameRequest();


                cfClient.Organizations.DisassociateManagerWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""fc460063-348a-464c-b06e-8ffeeea11f8b"",
        ""url"": ""/v2/users/uaa-id-5"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""billing_manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-5/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-5/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-5/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-5/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-5/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-5/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-5/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("fc460063-348a-464c-b06e-8ffeeea11f8b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("billing_manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-5/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-5/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3618237f-47f2-4257-8577-7fbc4fe508ad"",
    ""url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0"",
    ""created_at"": ""2016-03-30T10:15:05Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-63"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""3618237f-47f2-4257-8577-7fbc4fe508ad"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/359b2bff-a5e1-4ffa-8a72-906b68344d67"",
    ""spaces_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/spaces"",
    ""domains_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/domains"",
    ""private_domains_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/private_domains"",
    ""users_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/users"",
    ""managers_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/managers"",
    ""billing_managers_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/billing_managers"",
    ""auditors_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/auditors"",
    ""app_events_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("3618237f-47f2-4257-8577-7fbc4fe508ad", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-63", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("3618237f-47f2-4257-8577-7fbc4fe508ad", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/359b2bff-a5e1-4ffa-8a72-906b68344d67", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/96bd23af-caeb-40ed-99fe-1bc4cc2f7ca0/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemovePrivateDomainFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                cfClient.Organizations.RemovePrivateDomainFromOrganization(guid, private_domain_guid).Wait();

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""memory_usage_in_mb"": 0
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""93fda63e-bbc1-4e56-b2f4-10a13586794d"",
    ""url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6"",
    ""created_at"": ""2016-03-30T10:15:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-7"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""93fda63e-bbc1-4e56-b2f4-10a13586794d"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/a7b2bae7-3164-4efb-8f30-e8a3672bf210"",
    ""spaces_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/spaces"",
    ""domains_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/domains"",
    ""private_domains_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/private_domains"",
    ""users_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/users"",
    ""managers_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/managers"",
    ""billing_managers_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/billing_managers"",
    ""auditors_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/auditors"",
    ""app_events_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("93fda63e-bbc1-4e56-b2f4-10a13586794d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-7", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("93fda63e-bbc1-4e56-b2f4-10a13586794d", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/a7b2bae7-3164-4efb-8f30-e8a3672bf210", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/553fe556-8675-4ebf-8296-3a175b73d4d6/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""66ea0d9c-c6d6-4964-baa0-2f18f3db8769"",
    ""url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8"",
    ""created_at"": ""2016-03-30T10:15:04Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-13"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""66ea0d9c-c6d6-4964-baa0-2f18f3db8769"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/0ea1f526-09d2-4b27-9c24-9455051cc054"",
    ""spaces_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/spaces"",
    ""domains_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/domains"",
    ""private_domains_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/private_domains"",
    ""users_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/users"",
    ""managers_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/managers"",
    ""billing_managers_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/auditors"",
    ""app_events_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("66ea0d9c-c6d6-4964-baa0-2f18f3db8769", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-13", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("66ea0d9c-c6d6-4964-baa0-2f18f3db8769", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/0ea1f526-09d2-4b27-9c24-9455051cc054", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/aee29aa6-0e08-4f84-acee-e99688c455e8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""25b7a8c4-7432-4185-af34-8baeb1b844a3"",
        ""url"": ""/v2/users/uaa-id-41"",
        ""created_at"": ""2016-03-30T10:15:05Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-41/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-41/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-41/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-41/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-41/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-41/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-41/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""25b7a8c4-7432-4185-af34-8baeb1b844a3"",
        ""url"": ""/v2/users/uaa-id-42"",
        ""created_at"": ""2016-03-30T10:15:05Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-42/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-42/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-42/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-42/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-42/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-42/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-42/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("25b7a8c4-7432-4185-af34-8baeb1b844a3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-41", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-41/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("25b7a8c4-7432-4185-af34-8baeb1b844a3", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-42", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-42/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-42/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DisassociateBillingManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateBillingManagerWithOrganizationByUsernameRequest value = new DisassociateBillingManagerWithOrganizationByUsernameRequest();


                cfClient.Organizations.DisassociateBillingManagerWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""658a28a6-cfe3-4c6a-81f3-385598a68b85"",
        ""url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642"",
        ""created_at"": ""2016-03-30T10:15:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""658a28a6-cfe3-4c6a-81f3-385598a68b85"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/3ab9080b-643d-4d2c-85c1-88c356300741"",
        ""spaces_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/spaces"",
        ""domains_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/domains"",
        ""private_domains_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/private_domains"",
        ""users_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/users"",
        ""managers_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/managers"",
        ""billing_managers_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/billing_managers"",
        ""auditors_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/auditors"",
        ""app_events_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("658a28a6-cfe3-4c6a-81f3-385598a68b85", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("658a28a6-cfe3-4c6a-81f3-385598a68b85", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/3ab9080b-643d-4d2c-85c1-88c356300741", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/ee67d2b2-6520-41ac-bd96-d7a4fcd59642/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""70ed0363-8feb-422c-ba04-b6f43562dbb2"",
        ""url"": ""/v2/users/uaa-id-12"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""user@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-12/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-12/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-12/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-12/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-12/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-12/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-12/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("70ed0363-8feb-422c-ba04-b6f43562dbb2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-12", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-12/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-12/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8a3fb6d6-93fb-4c0b-992a-fe528e88a2c2"",
        ""url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa"",
        ""created_at"": ""2016-03-30T10:15:05Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-49"",
        ""organization_guid"": ""8a3fb6d6-93fb-4c0b-992a-fe528e88a2c2"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/7433a7b0-983a-4e47-8fea-238e72002146"",
        ""developers_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/developers"",
        ""managers_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/managers"",
        ""auditors_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/auditors"",
        ""apps_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/apps"",
        ""routes_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/routes"",
        ""domains_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/domains"",
        ""service_instances_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/service_instances"",
        ""app_events_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/app_events"",
        ""events_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/events"",
        ""security_groups_url"": ""/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8a3fb6d6-93fb-4c0b-992a-fe528e88a2c2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-49", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("8a3fb6d6-93fb-4c0b-992a-fe528e88a2c2", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/7433a7b0-983a-4e47-8fea-238e72002146", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/2e10ec02-1bd9-4518-b11d-909db7e520aa/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 2,
  ""prev_url"": null,
  ""next_url"": ""/v2/organizations/6b300397-6404-4aaa-9221-c3126776f651/user_roles?order-direction=asc=2=1"",
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""012bec23-af48-4b14-9269-3baf8e7304fe"",
        ""url"": ""/v2/users/uaa-id-25"",
        ""created_at"": ""2016-03-30T10:15:04Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""organization_roles"": [
          ""org_user"",
          ""org_manager"",
          ""org_auditor"",
          ""billing_manager""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-25/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-25/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-25/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-25/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-25/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-25/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-25/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingRolesOfAllUsersInOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("/v2/organizations/6b300397-6404-4aaa-9221-c3126776f651/user_roles?order-direction=asc=2=1", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("012bec23-af48-4b14-9269-3baf8e7304fe", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-25", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:04Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-25/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-25/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8ab38a4b-fa28-40c0-b64a-56a157328fa4"",
    ""url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe"",
    ""created_at"": ""2016-03-30T10:15:05Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-55"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8ab38a4b-fa28-40c0-b64a-56a157328fa4"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/78b419a4-5340-409a-bdf4-2c84966b6d01"",
    ""spaces_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/spaces"",
    ""domains_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/domains"",
    ""private_domains_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/private_domains"",
    ""users_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/users"",
    ""managers_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/managers"",
    ""billing_managers_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/billing_managers"",
    ""auditors_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/auditors"",
    ""app_events_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateManagerWithOrganizationByUsernameRequest value = new AssociateManagerWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateManagerWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("8ab38a4b-fa28-40c0-b64a-56a157328fa4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-55", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8ab38a4b-fa28-40c0-b64a-56a157328fa4", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/78b419a4-5340-409a-bdf4-2c84966b6d01", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/1e160ef7-8ffd-4351-8d26-17c4aeb58cfe/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8d63a2ae-3878-4c58-9577-be1bcae9f302"",
    ""url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8"",
    ""created_at"": ""2016-03-30T10:15:03Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8d63a2ae-3878-4c58-9577-be1bcae9f302"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/69c354e5-5871-434c-8d12-56a6844fc223"",
    ""spaces_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/spaces"",
    ""domains_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/domains"",
    ""private_domains_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/private_domains"",
    ""users_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/users"",
    ""managers_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/managers"",
    ""billing_managers_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/auditors"",
    ""app_events_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateBillingManagerWithOrganizationByUsernameRequest value = new AssociateBillingManagerWithOrganizationByUsernameRequest();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganizationByUsername(guid, value).Result;


                Assert.AreEqual("8d63a2ae-3878-4c58-9577-be1bcae9f302", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:03Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8d63a2ae-3878-4c58-9577-be1bcae9f302", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/69c354e5-5871-434c-8d12-56a6844fc223", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/f78e439c-0102-477e-89bf-aafb8dece4f8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociatePrivateDomainWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5c88cc62-1caa-417c-96dd-9249c91e1f33"",
    ""url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab"",
    ""created_at"": ""2016-03-30T10:15:05Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-37"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""5c88cc62-1caa-417c-96dd-9249c91e1f33"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/1a68f7ba-6d41-4455-8d16-6ac6525bdb3f"",
    ""spaces_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/spaces"",
    ""domains_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/domains"",
    ""private_domains_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/private_domains"",
    ""users_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/users"",
    ""managers_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/managers"",
    ""billing_managers_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/auditors"",
    ""app_events_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociatePrivateDomainWithOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("5c88cc62-1caa-417c-96dd-9249c91e1f33", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:05Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-37", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("5c88cc62-1caa-417c-96dd-9249c91e1f33", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/1a68f7ba-6d41-4455-8d16-6ac6525bdb3f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d02650b8-8ede-4d4b-85fb-a0d53be2c8ab/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ca0611bc-d0ee-4b48-9980-d8828f4cbe58"",
        ""url"": ""/v2/domains/af546537-2df7-490e-ad1e-5f6153a86650"",
        ""created_at"": ""2016-03-30T10:15:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ca0611bc-d0ee-4b48-9980-d8828f4cbe58"",
        ""url"": ""/v2/domains/6c748ab3-c29b-49ec-9b02-2cb8850ab970"",
        ""created_at"": ""2016-03-30T10:15:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ca0611bc-d0ee-4b48-9980-d8828f4cbe58", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/af546537-2df7-490e-ad1e-5f6153a86650", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("ca0611bc-d0ee-4b48-9980-d8828f4cbe58", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/6c748ab3-c29b-49ec-9b02-2cb8850ab970", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:02Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void DisassociateAuditorWithOrganizationByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateAuditorWithOrganizationByUsernameRequest value = new DisassociateAuditorWithOrganizationByUsernameRequest();


                cfClient.Organizations.DisassociateAuditorWithOrganizationByUsername(guid, value).Wait();

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""07d16abf-156a-4830-9820-a039938609ca"",
  ""name"": ""name-83"",
  ""status"": ""active"",
  ""spaces"": [
    {
      ""guid"": ""07d16abf-156a-4830-9820-a039938609ca"",
      ""name"": ""name-85"",
      ""service_count"": 0,
      ""app_count"": 0,
      ""mem_dev_total"": 0,
      ""mem_prod_total"": 0
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("07d16abf-156a-4830-9820-a039938609ca", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-83", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8a2c5218-5288-4d15-9a51-659080bcf0ec"",
    ""url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd"",
    ""created_at"": ""2016-03-30T10:15:06Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8a2c5218-5288-4d15-9a51-659080bcf0ec"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/91b8635d-ecdd-4233-a020-a69d903d479a"",
    ""spaces_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/spaces"",
    ""domains_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/domains"",
    ""private_domains_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/private_domains"",
    ""users_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/users"",
    ""managers_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/managers"",
    ""billing_managers_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/billing_managers"",
    ""auditors_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/auditors"",
    ""app_events_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("8a2c5218-5288-4d15-9a51-659080bcf0ec", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:06Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8a2c5218-5288-4d15-9a51-659080bcf0ec", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/91b8635d-ecdd-4233-a020-a69d903d479a", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/1126c7eb-62fc-44c8-9bd5-934fd392ebfd/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f3e84eb3-5aa7-4b78-9591-f68635dea3b0"",
    ""url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469"",
    ""created_at"": ""2016-03-30T10:15:06Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-78"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""f3e84eb3-5aa7-4b78-9591-f68635dea3b0"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/e5d7205a-8b55-4a79-8d36-2f2b71c63e91"",
    ""spaces_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/spaces"",
    ""domains_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/domains"",
    ""private_domains_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/private_domains"",
    ""users_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/users"",
    ""managers_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/managers"",
    ""billing_managers_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/billing_managers"",
    ""auditors_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/auditors"",
    ""app_events_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("f3e84eb3-5aa7-4b78-9591-f68635dea3b0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:06Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-78", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("f3e84eb3-5aa7-4b78-9591-f68635dea3b0", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/e5d7205a-8b55-4a79-8d36-2f2b71c63e91", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/64eb3d67-3bda-4fca-ad61-4c021fe7c469/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}