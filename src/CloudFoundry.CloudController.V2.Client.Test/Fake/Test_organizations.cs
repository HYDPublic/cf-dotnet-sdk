//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-31"",
        ""url"": ""/v2/users/uaa-id-31"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""billing_manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-31/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-31/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-31/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-31/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-31/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-31/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-31/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-31", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-31", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("billing_manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-31/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-31/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e60bea4e-6457-4ad0-abee-98ced423ce13"",
        ""url"": ""/v2/domains/e60bea4e-6457-4ad0-abee-98ced423ce13"",
        ""created_at"": ""2015-07-28T12:58:58Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""119dd6e7-688e-4c0a-b142-19c9d5ed41a0"",
        ""url"": ""/v2/domains/119dd6e7-688e-4c0a-b142-19c9d5ed41a0"",
        ""created_at"": ""2015-07-28T12:58:58Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e60bea4e-6457-4ad0-abee-98ced423ce13", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/e60bea4e-6457-4ad0-abee-98ced423ce13", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:58Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("119dd6e7-688e-4c0a-b142-19c9d5ed41a0", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/119dd6e7-688e-4c0a-b142-19c9d5ed41a0", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:58Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-41"",
        ""url"": ""/v2/users/uaa-id-41"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-41/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-41/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-41/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-41/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-41/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-41/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-41/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-41", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-41", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-41/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-41/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-23"",
        ""url"": ""/v2/users/uaa-id-23"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""user@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-23/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-23/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-23/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-23/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-23/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-23/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-23/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-23", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-23", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-23/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-23/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d08c2d0f-327d-4eff-95ca-50f0ed527864"",
        ""url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-89"",
        ""organization_guid"": ""b243d6fc-7dc1-4afb-bdda-32821ca16ad0"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/b243d6fc-7dc1-4afb-bdda-32821ca16ad0"",
        ""developers_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/developers"",
        ""managers_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/managers"",
        ""auditors_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/auditors"",
        ""apps_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/apps"",
        ""routes_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/routes"",
        ""domains_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/domains"",
        ""service_instances_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/service_instances"",
        ""app_events_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/app_events"",
        ""events_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/events"",
        ""security_groups_url"": ""/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d08c2d0f-327d-4eff-95ca-50f0ed527864", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-89", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("b243d6fc-7dc1-4afb-bdda-32821ca16ad0", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/b243d6fc-7dc1-4afb-bdda-32821ca16ad0", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d08c2d0f-327d-4eff-95ca-50f0ed527864/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""91af500d-100c-4faf-8b5a-3f651ff91f35"",
    ""url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-83"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""9aee69ce-c649-4598-aa73-0dbb18812a14"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/9aee69ce-c649-4598-aa73-0dbb18812a14"",
    ""spaces_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/spaces"",
    ""domains_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/domains"",
    ""private_domains_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/private_domains"",
    ""users_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/users"",
    ""managers_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/managers"",
    ""billing_managers_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/billing_managers"",
    ""auditors_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/auditors"",
    ""app_events_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("91af500d-100c-4faf-8b5a-3f651ff91f35", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-83", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("9aee69ce-c649-4598-aa73-0dbb18812a14", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/9aee69ce-c649-4598-aa73-0dbb18812a14", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/91af500d-100c-4faf-8b5a-3f651ff91f35/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""dc21cd6e-6de5-447e-b80d-8308e8fe2dcd"",
    ""url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-75"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""0fc447a5-8939-4d64-ae4c-531a2f94f8a7"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/0fc447a5-8939-4d64-ae4c-531a2f94f8a7"",
    ""spaces_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/spaces"",
    ""domains_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/domains"",
    ""private_domains_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/private_domains"",
    ""users_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/users"",
    ""managers_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/managers"",
    ""billing_managers_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/billing_managers"",
    ""auditors_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/auditors"",
    ""app_events_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("dc21cd6e-6de5-447e-b80d-8308e8fe2dcd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-75", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("0fc447a5-8939-4d64-ae4c-531a2f94f8a7", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/0fc447a5-8939-4d64-ae4c-531a2f94f8a7", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/dc21cd6e-6de5-447e-b80d-8308e8fe2dcd/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""276da3be-cad8-4650-9e30-8420ea0a5355"",
        ""url"": ""/v2/space_quota_definitions/276da3be-cad8-4650-9e30-8420ea0a5355"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-38"",
        ""organization_guid"": ""381dce5c-d89a-45f5-93c4-f34fa7a6d828"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/381dce5c-d89a-45f5-93c4-f34fa7a6d828"",
        ""spaces_url"": ""/v2/space_quota_definitions/276da3be-cad8-4650-9e30-8420ea0a5355/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("276da3be-cad8-4650-9e30-8420ea0a5355", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/276da3be-cad8-4650-9e30-8420ea0a5355", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-38", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("381dce5c-d89a-45f5-93c4-f34fa7a6d828", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/381dce5c-d89a-45f5-93c4-f34fa7a6d828", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/276da3be-cad8-4650-9e30-8420ea0a5355/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""387b3b34-77f5-4b5d-ad89-727fe421f46a"",
    ""url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-47"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""ca7c1e99-a60b-4ca6-b388-a37c6b2d32db"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/ca7c1e99-a60b-4ca6-b388-a37c6b2d32db"",
    ""spaces_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/spaces"",
    ""domains_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/domains"",
    ""private_domains_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/private_domains"",
    ""users_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/users"",
    ""managers_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/managers"",
    ""billing_managers_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/billing_managers"",
    ""auditors_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/auditors"",
    ""app_events_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("387b3b34-77f5-4b5d-ad89-727fe421f46a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-47", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("ca7c1e99-a60b-4ca6-b388-a37c6b2d32db", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/ca7c1e99-a60b-4ca6-b388-a37c6b2d32db", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/387b3b34-77f5-4b5d-ad89-727fe421f46a/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""49aab30f-79c3-4416-aca7-a7167ef16d71"",
    ""url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-77"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""015fed92-d991-472f-b5f1-9247a1eb9108"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/015fed92-d991-472f-b5f1-9247a1eb9108"",
    ""spaces_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/spaces"",
    ""domains_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/domains"",
    ""private_domains_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/private_domains"",
    ""users_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/users"",
    ""managers_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/managers"",
    ""billing_managers_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/billing_managers"",
    ""auditors_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/auditors"",
    ""app_events_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("49aab30f-79c3-4416-aca7-a7167ef16d71", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-77", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("015fed92-d991-472f-b5f1-9247a1eb9108", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/015fed92-d991-472f-b5f1-9247a1eb9108", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/49aab30f-79c3-4416-aca7-a7167ef16d71/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""87d8bdf9-69a7-4446-a351-6d86ed828e02"",
    ""url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-90"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""1ba2034a-5574-43f9-802d-00e9e0fdaa3a"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/1ba2034a-5574-43f9-802d-00e9e0fdaa3a"",
    ""spaces_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/spaces"",
    ""domains_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/domains"",
    ""private_domains_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/private_domains"",
    ""users_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/users"",
    ""managers_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/managers"",
    ""billing_managers_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/billing_managers"",
    ""auditors_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/auditors"",
    ""app_events_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("87d8bdf9-69a7-4446-a351-6d86ed828e02", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-90", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("1ba2034a-5574-43f9-802d-00e9e0fdaa3a", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/1ba2034a-5574-43f9-802d-00e9e0fdaa3a", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/87d8bdf9-69a7-4446-a351-6d86ed828e02/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""aca339d3-a8c5-4de2-9bcb-520e109727ab"",
    ""url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-49"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""88031ffc-9a04-43d8-84a8-84c389db26d1"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/88031ffc-9a04-43d8-84a8-84c389db26d1"",
    ""spaces_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/spaces"",
    ""domains_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/domains"",
    ""private_domains_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/private_domains"",
    ""users_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/users"",
    ""managers_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/managers"",
    ""billing_managers_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/billing_managers"",
    ""auditors_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/auditors"",
    ""app_events_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("aca339d3-a8c5-4de2-9bcb-520e109727ab", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-49", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("88031ffc-9a04-43d8-84a8-84c389db26d1", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/88031ffc-9a04-43d8-84a8-84c389db26d1", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/aca339d3-a8c5-4de2-9bcb-520e109727ab/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""520501df-7cc4-43db-8031-ab2550c89024"",
    ""url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024"",
    ""created_at"": ""2015-07-28T12:59:00Z"",
    ""updated_at"": ""2015-07-28T12:59:00Z""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""58e3da9a-8132-475f-b64c-4e8193f00781"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/58e3da9a-8132-475f-b64c-4e8193f00781"",
    ""spaces_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/spaces"",
    ""domains_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/domains"",
    ""private_domains_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/private_domains"",
    ""users_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/users"",
    ""managers_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/managers"",
    ""billing_managers_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/billing_managers"",
    ""auditors_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/auditors"",
    ""app_events_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("520501df-7cc4-43db-8031-ab2550c89024", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-07-28T12:59:00Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("58e3da9a-8132-475f-b64c-4e8193f00781", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/58e3da9a-8132-475f-b64c-4e8193f00781", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/520501df-7cc4-43db-8031-ab2550c89024/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemovePrivateDomainFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f9572ae6-a6c0-4f40-8a48-bf9354eaa63f"",
    ""url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-61"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""547f0402-31ff-4055-a4f8-a7f3826f1ec8"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/547f0402-31ff-4055-a4f8-a7f3826f1ec8"",
    ""spaces_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/spaces"",
    ""domains_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/domains"",
    ""private_domains_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/private_domains"",
    ""users_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/users"",
    ""managers_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/managers"",
    ""billing_managers_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/billing_managers"",
    ""auditors_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/auditors"",
    ""app_events_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemovePrivateDomainFromOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("f9572ae6-a6c0-4f40-8a48-bf9354eaa63f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-61", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("547f0402-31ff-4055-a4f8-a7f3826f1ec8", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/547f0402-31ff-4055-a4f8-a7f3826f1ec8", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/f9572ae6-a6c0-4f40-8a48-bf9354eaa63f/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a774e5e6-66e9-4884-b2d4-32d75b7744fa"",
        ""url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa"",
        ""created_at"": ""2015-07-28T12:58:58Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""559b2273-5309-481c-a211-03125a27907d"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/559b2273-5309-481c-a211-03125a27907d"",
        ""spaces_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/spaces"",
        ""domains_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/domains"",
        ""private_domains_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/private_domains"",
        ""users_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/users"",
        ""managers_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/managers"",
        ""billing_managers_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/billing_managers"",
        ""auditors_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/auditors"",
        ""app_events_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a774e5e6-66e9-4884-b2d4-32d75b7744fa", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:58Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("559b2273-5309-481c-a211-03125a27907d", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/559b2273-5309-481c-a211-03125a27907d", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/a774e5e6-66e9-4884-b2d4-32d75b7744fa/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-50"",
        ""url"": ""/v2/users/uaa-id-50"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-50/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-50/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-50/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-50/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-50/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-50/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-50/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-51"",
        ""url"": ""/v2/users/uaa-id-51"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-51/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-51/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-51/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-51/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-51/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-51/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-51/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-50", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-50", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-50/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-50/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-51", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-51", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-51/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-51/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f"",
        ""url"": ""/v2/services/f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-1"",
        ""provider"": ""provider-1"",
        ""url"": ""https://foo.com/url-1"",
        ""description"": ""desc-1"",
        ""long_description"": null,
        ""version"": ""version-1"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""94725102-f72d-43a4-915a-de829aeed2d7"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-1", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-1", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-1", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-1", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-1", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("94725102-f72d-43a4-915a-de829aeed2d7", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/f9d7acb9-71ce-4be6-a52f-7dcfc7dc1f1f/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3726314b-539e-4f34-8648-f6a15d02ddf3"",
    ""url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-55"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""f3d2d2c1-8479-46d5-bbfd-33ae3f99449e"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/f3d2d2c1-8479-46d5-bbfd-33ae3f99449e"",
    ""spaces_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/spaces"",
    ""domains_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/domains"",
    ""private_domains_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/private_domains"",
    ""users_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/users"",
    ""managers_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/managers"",
    ""billing_managers_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/billing_managers"",
    ""auditors_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/auditors"",
    ""app_events_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("3726314b-539e-4f34-8648-f6a15d02ddf3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-55", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("f3d2d2c1-8479-46d5-bbfd-33ae3f99449e", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/f3d2d2c1-8479-46d5-bbfd-33ae3f99449e", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/3726314b-539e-4f34-8648-f6a15d02ddf3/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""49b832ae-fb9c-4322-bd74-3e335b2a207f"",
    ""url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f"",
    ""created_at"": ""2015-07-28T12:59:00Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""6b8d6cd1-0529-42dd-8618-58b29a2199ff"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/6b8d6cd1-0529-42dd-8618-58b29a2199ff"",
    ""spaces_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/spaces"",
    ""domains_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/domains"",
    ""private_domains_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/private_domains"",
    ""users_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/users"",
    ""managers_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/managers"",
    ""billing_managers_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/billing_managers"",
    ""auditors_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/auditors"",
    ""app_events_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("49b832ae-fb9c-4322-bd74-3e335b2a207f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:59:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("6b8d6cd1-0529-42dd-8618-58b29a2199ff", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/6b8d6cd1-0529-42dd-8618-58b29a2199ff", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/49b832ae-fb9c-4322-bd74-3e335b2a207f/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociatePrivateDomainWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""32022d4a-d847-4ce6-9013-e94fdabb619b"",
    ""url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-65"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8d68aa1f-a101-4bdc-8554-71a568dd365c"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/8d68aa1f-a101-4bdc-8554-71a568dd365c"",
    ""spaces_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/spaces"",
    ""domains_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/domains"",
    ""private_domains_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/private_domains"",
    ""users_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/users"",
    ""managers_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/managers"",
    ""billing_managers_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/billing_managers"",
    ""auditors_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/auditors"",
    ""app_events_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociatePrivateDomainWithOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("32022d4a-d847-4ce6-9013-e94fdabb619b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-65", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8d68aa1f-a101-4bdc-8554-71a568dd365c", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/8d68aa1f-a101-4bdc-8554-71a568dd365c", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/32022d4a-d847-4ce6-9013-e94fdabb619b/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b54e2c07-fcd0-4bf6-a3ae-c61728f81190"",
        ""url"": ""/v2/private_domains/b54e2c07-fcd0-4bf6-a3ae-c61728f81190"",
        ""created_at"": ""2015-07-28T12:58:59Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-5.example.com"",
        ""owning_organization_guid"": ""403d0f31-cc5b-4400-aca7-296c36f9a612"",
        ""owning_organization_url"": ""/v2/organizations/403d0f31-cc5b-4400-aca7-296c36f9a612"",
        ""shared_organizations_url"": ""/v2/private_domains/b54e2c07-fcd0-4bf6-a3ae-c61728f81190/shared_organizations""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b54e2c07-fcd0-4bf6-a3ae-c61728f81190", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/b54e2c07-fcd0-4bf6-a3ae-c61728f81190", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-5.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("403d0f31-cc5b-4400-aca7-296c36f9a612", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/403d0f31-cc5b-4400-aca7-296c36f9a612", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/private_domains/b54e2c07-fcd0-4bf6-a3ae-c61728f81190/shared_organizations", TestUtil.ToTestableString(obj[0].SharedOrganizationsUrl), true);

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""64339304-cd24-47a5-b6e2-3aa3d33a580e"",""name"":""name-1411"",""status"":""active"",""spaces"":[{""guid"":""7a560c34-4734-4c25-9587-1a1aa166fadf"",""name"":""name-1413"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("64339304-cd24-47a5-b6e2-3aa3d33a580e", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1411", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8"",
    ""url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-81"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""e08c8902-1db2-4651-8ae2-0c6fc0830f2a"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/e08c8902-1db2-4651-8ae2-0c6fc0830f2a"",
    ""spaces_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/spaces"",
    ""domains_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/domains"",
    ""private_domains_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/private_domains"",
    ""users_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/users"",
    ""managers_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/managers"",
    ""billing_managers_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/auditors"",
    ""app_events_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-81", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("e08c8902-1db2-4651-8ae2-0c6fc0830f2a", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/e08c8902-1db2-4651-8ae2-0c6fc0830f2a", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/87420ac3-3bf8-4b1c-a2c0-32b1bc429fd8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""12e39375-42af-4f8d-80ef-4eabdf1e849f"",
    ""url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f"",
    ""created_at"": ""2015-07-28T12:58:59Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-57"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""af65d684-c6d8-42ea-9e3f-452c2fa47817"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/af65d684-c6d8-42ea-9e3f-452c2fa47817"",
    ""spaces_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/spaces"",
    ""domains_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/domains"",
    ""private_domains_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/private_domains"",
    ""users_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/users"",
    ""managers_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/managers"",
    ""billing_managers_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/billing_managers"",
    ""auditors_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/auditors"",
    ""app_events_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("12e39375-42af-4f8d-80ef-4eabdf1e849f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-07-28T12:58:59Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-57", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("af65d684-c6d8-42ea-9e3f-452c2fa47817", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/af65d684-c6d8-42ea-9e3f-452c2fa47817", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/12e39375-42af-4f8d-80ef-4eabdf1e849f/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}