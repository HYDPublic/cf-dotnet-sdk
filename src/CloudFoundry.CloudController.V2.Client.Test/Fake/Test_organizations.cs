//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-82"",
        ""url"": ""/v2/users/uaa-id-82"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-82/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-82/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-82/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-82/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-82/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-82/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-82/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-82", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-82", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-82/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-82/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0210f9ef-64f7-48c4-b37e-5cd5e4080da5"",
        ""url"": ""/v2/domains/0210f9ef-64f7-48c4-b37e-5cd5e4080da5"",
        ""created_at"": ""2015-04-16T12:04:14+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""0359e25a-338d-42e0-ac6c-f7fc3dd3032d"",
        ""url"": ""/v2/domains/0359e25a-338d-42e0-ac6c-f7fc3dd3032d"",
        ""created_at"": ""2015-04-16T12:04:14+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0210f9ef-64f7-48c4-b37e-5cd5e4080da5", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/0210f9ef-64f7-48c4-b37e-5cd5e4080da5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:14+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("0359e25a-338d-42e0-ac6c-f7fc3dd3032d", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/0359e25a-338d-42e0-ac6c-f7fc3dd3032d", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:14+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-89"",
        ""url"": ""/v2/users/uaa-id-89"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-89/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-89/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-89/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-89/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-89/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-89/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-89/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-89", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-89", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-89/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-89/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-63"",
        ""url"": ""/v2/users/uaa-id-63"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-63/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-63/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-63/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-63/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-63/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-63/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-63/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-63", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-63", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-63/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-63/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""65430f21-110c-421f-82b0-0ed11d795417"",
        ""url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417"",
        ""created_at"": ""2015-04-16T12:04:19+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-239"",
        ""organization_guid"": ""6dd67d9f-9586-40b4-8541-37a4f1e857c8"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/6dd67d9f-9586-40b4-8541-37a4f1e857c8"",
        ""developers_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/developers"",
        ""managers_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/managers"",
        ""auditors_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/auditors"",
        ""apps_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/apps"",
        ""routes_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/routes"",
        ""domains_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/domains"",
        ""service_instances_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/service_instances"",
        ""app_events_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/app_events"",
        ""events_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/events"",
        ""security_groups_url"": ""/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("65430f21-110c-421f-82b0-0ed11d795417", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:19+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-239", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("6dd67d9f-9586-40b4-8541-37a4f1e857c8", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/6dd67d9f-9586-40b4-8541-37a4f1e857c8", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/65430f21-110c-421f-82b0-0ed11d795417/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b26d3050-06dd-4641-a1ec-6d306c7f98a0"",
    ""url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-215"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""dd84100c-6055-46ee-803f-a0e830a862e3"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/dd84100c-6055-46ee-803f-a0e830a862e3"",
    ""spaces_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/spaces"",
    ""domains_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/domains"",
    ""private_domains_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/private_domains"",
    ""users_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/users"",
    ""managers_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/managers"",
    ""billing_managers_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/billing_managers"",
    ""auditors_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/auditors"",
    ""app_events_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("b26d3050-06dd-4641-a1ec-6d306c7f98a0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-215", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("dd84100c-6055-46ee-803f-a0e830a862e3", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/dd84100c-6055-46ee-803f-a0e830a862e3", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/b26d3050-06dd-4641-a1ec-6d306c7f98a0/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6cf75696-19d1-4849-a40e-3f37417de9be"",
    ""url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-231"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""51947834-40d1-47a4-9aeb-f6f2ee488504"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/51947834-40d1-47a4-9aeb-f6f2ee488504"",
    ""spaces_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/spaces"",
    ""domains_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/domains"",
    ""private_domains_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/private_domains"",
    ""users_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/users"",
    ""managers_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/managers"",
    ""billing_managers_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/billing_managers"",
    ""auditors_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/auditors"",
    ""app_events_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("6cf75696-19d1-4849-a40e-3f37417de9be", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-231", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("51947834-40d1-47a4-9aeb-f6f2ee488504", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/51947834-40d1-47a4-9aeb-f6f2ee488504", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/6cf75696-19d1-4849-a40e-3f37417de9be/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5cd1752d-6c31-4fa5-9a34-50f65a3f3222"",
        ""url"": ""/v2/space_quota_definitions/5cd1752d-6c31-4fa5-9a34-50f65a3f3222"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-204"",
        ""organization_guid"": ""719105d8-aab5-4939-a32c-79bbc22801e2"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/719105d8-aab5-4939-a32c-79bbc22801e2"",
        ""spaces_url"": ""/v2/space_quota_definitions/5cd1752d-6c31-4fa5-9a34-50f65a3f3222/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5cd1752d-6c31-4fa5-9a34-50f65a3f3222", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/5cd1752d-6c31-4fa5-9a34-50f65a3f3222", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-204", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("719105d8-aab5-4939-a32c-79bbc22801e2", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/719105d8-aab5-4939-a32c-79bbc22801e2", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/5cd1752d-6c31-4fa5-9a34-50f65a3f3222/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""18a4a035-8e64-4824-af2a-fcf9572fd34e"",
    ""url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-207"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""55d2b50b-0ce2-4116-a603-e961772cd4bf"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/55d2b50b-0ce2-4116-a603-e961772cd4bf"",
    ""spaces_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/spaces"",
    ""domains_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/domains"",
    ""private_domains_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/private_domains"",
    ""users_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/users"",
    ""managers_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/managers"",
    ""billing_managers_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/billing_managers"",
    ""auditors_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/auditors"",
    ""app_events_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("18a4a035-8e64-4824-af2a-fcf9572fd34e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-207", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("55d2b50b-0ce2-4116-a603-e961772cd4bf", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/55d2b50b-0ce2-4116-a603-e961772cd4bf", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/18a4a035-8e64-4824-af2a-fcf9572fd34e/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5ebe93af-0068-4475-8d7d-3f6b0cec1039"",
    ""url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-233"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""8664ef71-0723-448a-befd-f0b6e67394a1"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/8664ef71-0723-448a-befd-f0b6e67394a1"",
    ""spaces_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/spaces"",
    ""domains_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/domains"",
    ""private_domains_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/private_domains"",
    ""users_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/users"",
    ""managers_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/managers"",
    ""billing_managers_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/billing_managers"",
    ""auditors_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/auditors"",
    ""app_events_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("5ebe93af-0068-4475-8d7d-3f6b0cec1039", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-233", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("8664ef71-0723-448a-befd-f0b6e67394a1", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/8664ef71-0723-448a-befd-f0b6e67394a1", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/5ebe93af-0068-4475-8d7d-3f6b0cec1039/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8cfb052d-c7f8-450a-a948-79585aec6843"",
    ""url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-199"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""2cf9d902-46e8-413d-8d6e-597b5caba76a"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/2cf9d902-46e8-413d-8d6e-597b5caba76a"",
    ""spaces_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/spaces"",
    ""domains_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/domains"",
    ""private_domains_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/private_domains"",
    ""users_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/users"",
    ""managers_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/managers"",
    ""billing_managers_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/billing_managers"",
    ""auditors_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/auditors"",
    ""app_events_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("8cfb052d-c7f8-450a-a948-79585aec6843", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-199", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("2cf9d902-46e8-413d-8d6e-597b5caba76a", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/2cf9d902-46e8-413d-8d6e-597b5caba76a", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/8cfb052d-c7f8-450a-a948-79585aec6843/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""35d4854c-fda3-4db4-b834-03cb71320342"",
    ""url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-209"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""850d064f-7390-49b8-b176-b000267611bc"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/850d064f-7390-49b8-b176-b000267611bc"",
    ""spaces_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/spaces"",
    ""domains_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/domains"",
    ""private_domains_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/private_domains"",
    ""users_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/users"",
    ""managers_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/managers"",
    ""billing_managers_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/billing_managers"",
    ""auditors_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/auditors"",
    ""app_events_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("35d4854c-fda3-4db4-b834-03cb71320342", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-209", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("850d064f-7390-49b8-b176-b000267611bc", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/850d064f-7390-49b8-b176-b000267611bc", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/35d4854c-fda3-4db4-b834-03cb71320342/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""835f54cd-72c2-4064-ab1e-80ff9c1b5e56"",
    ""url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": ""2015-04-16T12:04:18+00:00""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""fc8e1595-c555-4449-a6c2-8bc4b51b6e11"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/fc8e1595-c555-4449-a6c2-8bc4b51b6e11"",
    ""spaces_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/spaces"",
    ""domains_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/domains"",
    ""private_domains_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/private_domains"",
    ""users_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/users"",
    ""managers_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/managers"",
    ""billing_managers_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/billing_managers"",
    ""auditors_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/auditors"",
    ""app_events_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("835f54cd-72c2-4064-ab1e-80ff9c1b5e56", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("fc8e1595-c555-4449-a6c2-8bc4b51b6e11", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/fc8e1595-c555-4449-a6c2-8bc4b51b6e11", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/835f54cd-72c2-4064-ab1e-80ff9c1b5e56/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""68378f1b-b6b1-4b89-8614-ff80330b6ae0"",
        ""url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0"",
        ""created_at"": ""2015-04-16T12:04:14+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""9011b60e-be73-4f50-9bbf-0f10aad76c8a"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/9011b60e-be73-4f50-9bbf-0f10aad76c8a"",
        ""spaces_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/spaces"",
        ""domains_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/domains"",
        ""private_domains_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/private_domains"",
        ""users_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/users"",
        ""managers_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/managers"",
        ""billing_managers_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/billing_managers"",
        ""auditors_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/auditors"",
        ""app_events_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("68378f1b-b6b1-4b89-8614-ff80330b6ae0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:14+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("9011b60e-be73-4f50-9bbf-0f10aad76c8a", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/9011b60e-be73-4f50-9bbf-0f10aad76c8a", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/68378f1b-b6b1-4b89-8614-ff80330b6ae0/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-70"",
        ""url"": ""/v2/users/uaa-id-70"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-70/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-70/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-70/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-70/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-70/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-70/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-70/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-71"",
        ""url"": ""/v2/users/uaa-id-71"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-71/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-71/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-71/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-71/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-71/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-71/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-71/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-70", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-70", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-70/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-70/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-71", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-71", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-71/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""89e6614c-b47b-4f1f-a794-edb6262f9e94"",
        ""url"": ""/v2/services/89e6614c-b47b-4f1f-a794-edb6262f9e94"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-27"",
        ""provider"": ""provider-27"",
        ""url"": ""https://foo.com/url-17"",
        ""description"": ""desc-34"",
        ""long_description"": null,
        ""version"": ""version-11"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""7ea06ed2-de6a-4542-a1b5-09603dc552e2"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/89e6614c-b47b-4f1f-a794-edb6262f9e94/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("89e6614c-b47b-4f1f-a794-edb6262f9e94", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/89e6614c-b47b-4f1f-a794-edb6262f9e94", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-27", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-27", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-17", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-34", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-11", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("7ea06ed2-de6a-4542-a1b5-09603dc552e2", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/89e6614c-b47b-4f1f-a794-edb6262f9e94/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6606eb5a-7ec2-41aa-af73-f2c181b3e8fc"",
    ""url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-225"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""573e9989-a90a-4533-ab3a-06317b88ef14"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/573e9989-a90a-4533-ab3a-06317b88ef14"",
    ""spaces_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/spaces"",
    ""domains_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/domains"",
    ""private_domains_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/private_domains"",
    ""users_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/users"",
    ""managers_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/managers"",
    ""billing_managers_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/billing_managers"",
    ""auditors_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/auditors"",
    ""app_events_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("6606eb5a-7ec2-41aa-af73-f2c181b3e8fc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-225", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("573e9989-a90a-4533-ab3a-06317b88ef14", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/573e9989-a90a-4533-ab3a-06317b88ef14", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/6606eb5a-7ec2-41aa-af73-f2c181b3e8fc/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d926db7a-22c2-41a8-87e7-6bb283c69373"",
    ""url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""4abc3bfe-4f49-488d-bea7-3e0763b110fd"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/4abc3bfe-4f49-488d-bea7-3e0763b110fd"",
    ""spaces_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/spaces"",
    ""domains_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/domains"",
    ""private_domains_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/private_domains"",
    ""users_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/users"",
    ""managers_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/managers"",
    ""billing_managers_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/auditors"",
    ""app_events_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("d926db7a-22c2-41a8-87e7-6bb283c69373", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("4abc3bfe-4f49-488d-bea7-3e0763b110fd", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/4abc3bfe-4f49-488d-bea7-3e0763b110fd", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d926db7a-22c2-41a8-87e7-6bb283c69373/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7dfe5b5f-984f-45df-b6c3-45abd65b5c35"",
        ""url"": ""/v2/private_domains/7dfe5b5f-984f-45df-b6c3-45abd65b5c35"",
        ""created_at"": ""2015-04-16T12:04:18+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-10.example.com"",
        ""owning_organization_guid"": ""dfe4e5d2-8d2b-4be5-ae2f-a0114fb1c540"",
        ""owning_organization_url"": ""/v2/organizations/dfe4e5d2-8d2b-4be5-ae2f-a0114fb1c540""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7dfe5b5f-984f-45df-b6c3-45abd65b5c35", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/7dfe5b5f-984f-45df-b6c3-45abd65b5c35", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-10.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("dfe4e5d2-8d2b-4be5-ae2f-a0114fb1c540", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/dfe4e5d2-8d2b-4be5-ae2f-a0114fb1c540", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""1de22f5f-2b4e-478a-b339-7bfeef80d867"",""name"":""name-123"",""status"":""active"",""spaces"":[{""guid"":""225b6ffe-45f4-4086-b5d6-a3e1627bc985"",""name"":""name-125"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("1de22f5f-2b4e-478a-b339-7bfeef80d867", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-123", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3"",
    ""url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-213"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""6b197673-1879-40f3-af34-f2092c258758"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/6b197673-1879-40f3-af34-f2092c258758"",
    ""spaces_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/spaces"",
    ""domains_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/domains"",
    ""private_domains_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/private_domains"",
    ""users_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/users"",
    ""managers_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/managers"",
    ""billing_managers_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/billing_managers"",
    ""auditors_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/auditors"",
    ""app_events_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-213", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("6b197673-1879-40f3-af34-f2092c258758", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/6b197673-1879-40f3-af34-f2092c258758", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/87839a1b-5ce3-4b8e-afaf-3fc66f8ecbf3/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""15d1e9ea-8ce1-40d7-b2ec-01309b39873e"",
    ""url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e"",
    ""created_at"": ""2015-04-16T12:04:18+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-227"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""32c59898-ecdb-4946-a0e9-d0e67d28cb30"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/32c59898-ecdb-4946-a0e9-d0e67d28cb30"",
    ""spaces_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/spaces"",
    ""domains_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/domains"",
    ""private_domains_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/private_domains"",
    ""users_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/users"",
    ""managers_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/managers"",
    ""billing_managers_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/billing_managers"",
    ""auditors_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/auditors"",
    ""app_events_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("15d1e9ea-8ce1-40d7-b2ec-01309b39873e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:18+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-227", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("32c59898-ecdb-4946-a0e9-d0e67d28cb30", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/32c59898-ecdb-4946-a0e9-d0e67d28cb30", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/15d1e9ea-8ce1-40d7-b2ec-01309b39873e/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}