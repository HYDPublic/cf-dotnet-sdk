//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicesEndpoint
{
        [TestMethod]
        public void DeleteServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Services.DeleteService(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServicesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a12142ba-a90b-4b67-9b78-45b162b37d5a"",
        ""url"": ""/v2/services/a12142ba-a90b-4b67-9b78-45b162b37d5a"",
        ""created_at"": ""2015-04-16T12:04:16+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-5"",
        ""provider"": ""provider-5"",
        ""url"": ""https://foo.com/url-6"",
        ""description"": ""desc-27"",
        ""long_description"": null,
        ""version"": ""version-5"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""5bfc0aca-d642-49d6-aefd-1c985bd19120"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""e6ae9345-46ac-4106-ab47-7a868d4dd3e0"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/a12142ba-a90b-4b67-9b78-45b162b37d5a/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Services.ListAllServices().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a12142ba-a90b-4b67-9b78-45b162b37d5a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/a12142ba-a90b-4b67-9b78-45b162b37d5a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:16+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-5", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-5", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-6", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-27", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-5", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("5bfc0aca-d642-49d6-aefd-1c985bd19120", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("e6ae9345-46ac-4106-ab47-7a868d4dd3e0", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/a12142ba-a90b-4b67-9b78-45b162b37d5a/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansForServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c5e0b23e-67f6-441d-9d23-2eafdcb6e729"",
        ""url"": ""/v2/service_plans/c5e0b23e-67f6-441d-9d23-2eafdcb6e729"",
        ""created_at"": ""2015-04-16T12:04:17+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-157"",
        ""free"": false,
        ""description"": ""desc-33"",
        ""service_guid"": ""edf7b399-fddf-46fc-a38a-576e60e1e27f"",
        ""extra"": null,
        ""unique_id"": ""5b21b680-5809-45cc-824e-115736f50a9e"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/edf7b399-fddf-46fc-a38a-576e60e1e27f"",
        ""service_instances_url"": ""/v2/service_plans/c5e0b23e-67f6-441d-9d23-2eafdcb6e729/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Services.ListAllServicePlansForService(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c5e0b23e-67f6-441d-9d23-2eafdcb6e729", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/c5e0b23e-67f6-441d-9d23-2eafdcb6e729", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:17+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-157", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-33", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("edf7b399-fddf-46fc-a38a-576e60e1e27f", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("5b21b680-5809-45cc-824e-115736f50a9e", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/edf7b399-fddf-46fc-a38a-576e60e1e27f", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/c5e0b23e-67f6-441d-9d23-2eafdcb6e729/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void CreateServiceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5e4d2d06-183c-4d96-96f8-efd638169100"",
    ""url"": ""/v2/services/5e4d2d06-183c-4d96-96f8-efd638169100"",
    ""created_at"": ""2015-04-16T12:04:17+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": false,
    ""bindable"": true,
    ""unique_id"": null,
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": null,
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/5e4d2d06-183c-4d96-96f8-efd638169100/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceDeprecatedRequest value = new CreateServiceDeprecatedRequest();


                var obj = cfClient.Services.CreateServiceDeprecated(value).Result;


                Assert.AreEqual("5e4d2d06-183c-4d96-96f8-efd638169100", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/5e4d2d06-183c-4d96-96f8-efd638169100", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:17+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/5e4d2d06-183c-4d96-96f8-efd638169100/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServiceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a6abf8b5-db40-4b5a-b1bc-25739e7c08bb"",
    ""url"": ""/v2/services/a6abf8b5-db40-4b5a-b1bc-25739e7c08bb"",
    ""created_at"": ""2015-04-16T12:04:16+00:00"",
    ""updated_at"": ""2015-04-16T12:04:16+00:00""
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""2c59b749-0763-494c-b0aa-c5749040be2d"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""d9dc5ee3-f209-4e1b-bb50-edf7229e2479"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/a6abf8b5-db40-4b5a-b1bc-25739e7c08bb/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServiceDeprecatedRequest value = new UpdateServiceDeprecatedRequest();


                var obj = cfClient.Services.UpdateServiceDeprecated(value).Result;


                Assert.AreEqual("a6abf8b5-db40-4b5a-b1bc-25739e7c08bb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/a6abf8b5-db40-4b5a-b1bc-25739e7c08bb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:16+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:16+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("2c59b749-0763-494c-b0aa-c5749040be2d", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("d9dc5ee3-f209-4e1b-bb50-edf7229e2479", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/a6abf8b5-db40-4b5a-b1bc-25739e7c08bb/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1e3382c9-a360-4358-85e2-d6c9842b0697"",
    ""url"": ""/v2/services/1e3382c9-a360-4358-85e2-d6c9842b0697"",
    ""created_at"": ""2015-04-16T12:04:16+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-8"",
    ""provider"": ""provider-8"",
    ""url"": ""https://foo.com/url-12"",
    ""description"": ""desc-30"",
    ""long_description"": null,
    ""version"": ""version-8"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""1e5e02f7-f8bd-4be9-84b2-7407eaa07650"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""7fce336f-ac74-4a44-81a5-91cef1d38e05"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/1e3382c9-a360-4358-85e2-d6c9842b0697/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Services.RetrieveService(guid).Result;


                Assert.AreEqual("1e3382c9-a360-4358-85e2-d6c9842b0697", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/1e3382c9-a360-4358-85e2-d6c9842b0697", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:16+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-8", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("provider-8", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("https://foo.com/url-12", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("desc-30", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("version-8", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("1e5e02f7-f8bd-4be9-84b2-7407eaa07650", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("7fce336f-ac74-4a44-81a5-91cef1d38e05", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/1e3382c9-a360-4358-85e2-d6c9842b0697/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

    }
}