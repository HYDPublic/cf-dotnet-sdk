//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServicesEndpoint
{
        [TestMethod]
        public void DeleteServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Services.DeleteService(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServicesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cbc029bf-050c-4fcc-aef5-4968fcea77e4"",
        ""url"": ""/v2/services/cbc029bf-050c-4fcc-aef5-4968fcea77e4"",
        ""created_at"": ""2015-04-10T19:41:58+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-37"",
        ""provider"": ""provider-28"",
        ""url"": ""https://foo.com/url-47"",
        ""description"": ""desc-72"",
        ""long_description"": null,
        ""version"": ""version-28"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""775f814d-24fc-431b-a3de-54e615e0ab3b"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""73df8562-dfdf-4361-8d1b-39dbd19c7e02"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/cbc029bf-050c-4fcc-aef5-4968fcea77e4/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Services.ListAllServices().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cbc029bf-050c-4fcc-aef5-4968fcea77e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/cbc029bf-050c-4fcc-aef5-4968fcea77e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-37", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-28", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-47", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-72", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-28", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("775f814d-24fc-431b-a3de-54e615e0ab3b", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("73df8562-dfdf-4361-8d1b-39dbd19c7e02", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/cbc029bf-050c-4fcc-aef5-4968fcea77e4/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicePlansForServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d70706ff-4c96-4aec-9762-68daf878d742"",
        ""url"": ""/v2/service_plans/d70706ff-4c96-4aec-9762-68daf878d742"",
        ""created_at"": ""2015-04-10T19:41:58+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1170"",
        ""free"": false,
        ""description"": ""desc-78"",
        ""service_guid"": ""b063bb5a-5604-41ce-b966-3f4f0ec3e8b2"",
        ""extra"": null,
        ""unique_id"": ""96727355-1186-49e0-aaef-afaeb9c3600d"",
        ""public"": true,
        ""active"": true,
        ""service_url"": ""/v2/services/b063bb5a-5604-41ce-b966-3f4f0ec3e8b2"",
        ""service_instances_url"": ""/v2/service_plans/d70706ff-4c96-4aec-9762-68daf878d742/service_instances""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Services.ListAllServicePlansForService(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d70706ff-4c96-4aec-9762-68daf878d742", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_plans/d70706ff-4c96-4aec-9762-68daf878d742", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1170", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Free), true);
                Assert.AreEqual("desc-78", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("b063bb5a-5604-41ce-b966-3f4f0ec3e8b2", TestUtil.ToTestableString(obj[0].ServiceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("96727355-1186-49e0-aaef-afaeb9c3600d", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Public), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("/v2/services/b063bb5a-5604-41ce-b966-3f4f0ec3e8b2", TestUtil.ToTestableString(obj[0].ServiceUrl), true);
                Assert.AreEqual("/v2/service_plans/d70706ff-4c96-4aec-9762-68daf878d742/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);

            }
        }

        [TestMethod]
        public void CreateServiceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f06ce6e6-ced9-4512-a983-8549154a3391"",
    ""url"": ""/v2/services/f06ce6e6-ced9-4512-a983-8549154a3391"",
    ""created_at"": ""2015-04-10T19:41:58+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": false,
    ""bindable"": true,
    ""unique_id"": null,
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": null,
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/f06ce6e6-ced9-4512-a983-8549154a3391/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceDeprecatedRequest value = new CreateServiceDeprecatedRequest();


                var obj = cfClient.Services.CreateServiceDeprecated(value).Result;


                Assert.AreEqual("f06ce6e6-ced9-4512-a983-8549154a3391", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/f06ce6e6-ced9-4512-a983-8549154a3391", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/f06ce6e6-ced9-4512-a983-8549154a3391/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServiceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""38b5f725-886b-4470-a794-a2ea44cc376a"",
    ""url"": ""/v2/services/38b5f725-886b-4470-a794-a2ea44cc376a"",
    ""created_at"": ""2015-04-10T19:41:58+00:00"",
    ""updated_at"": ""2015-04-10T19:41:58+00:00""
  },
  ""entity"": {
    ""label"": ""SomeMysqlService"",
    ""provider"": ""MySql Provider"",
    ""url"": ""http://myql.provider.com"",
    ""description"": ""Mysql stores things for you"",
    ""long_description"": null,
    ""version"": ""2.0"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""e0ff2b16-3520-424c-a103-2bbf98dc324c"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""d0c25b99-1c49-4084-a181-28a721d2359d"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/38b5f725-886b-4470-a794-a2ea44cc376a/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateServiceDeprecatedRequest value = new UpdateServiceDeprecatedRequest();


                var obj = cfClient.Services.UpdateServiceDeprecated(value).Result;


                Assert.AreEqual("38b5f725-886b-4470-a794-a2ea44cc376a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/38b5f725-886b-4470-a794-a2ea44cc376a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("SomeMysqlService", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("MySql Provider", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("http://myql.provider.com", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("Mysql stores things for you", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("2.0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("e0ff2b16-3520-424c-a103-2bbf98dc324c", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("d0c25b99-1c49-4084-a181-28a721d2359d", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/38b5f725-886b-4470-a794-a2ea44cc376a/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f26ee044-e801-4b81-bd31-6a5e503f8522"",
    ""url"": ""/v2/services/f26ee044-e801-4b81-bd31-6a5e503f8522"",
    ""created_at"": ""2015-04-10T19:41:58+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-41"",
    ""provider"": ""provider-32"",
    ""url"": ""https://foo.com/url-55"",
    ""description"": ""desc-76"",
    ""long_description"": null,
    ""version"": ""version-32"",
    ""info_url"": null,
    ""active"": true,
    ""bindable"": true,
    ""unique_id"": ""b118ac12-e476-4045-9ee3-6c56c5ca3763"",
    ""extra"": null,
    ""tags"": [

    ],
    ""requires"": [

    ],
    ""documentation_url"": null,
    ""service_broker_guid"": ""593f3235-7eae-4ee4-93b7-c488bca5883f"",
    ""plan_updateable"": false,
    ""service_plans_url"": ""/v2/services/f26ee044-e801-4b81-bd31-6a5e503f8522/service_plans""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Services.RetrieveService(guid).Result;


                Assert.AreEqual("f26ee044-e801-4b81-bd31-6a5e503f8522", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/f26ee044-e801-4b81-bd31-6a5e503f8522", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:58+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-41", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("provider-32", TestUtil.ToTestableString(obj.Provider), true);
                Assert.AreEqual("https://foo.com/url-55", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("desc-76", TestUtil.ToTestableString(obj.Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LongDescription), true);
                Assert.AreEqual("version-32", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Bindable), true);
                Assert.AreEqual("b118ac12-e476-4045-9ee3-6c56c5ca3763", TestUtil.ToTestableString(obj.UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DocumentationUrl), true);
                Assert.AreEqual("593f3235-7eae-4ee4-93b7-c488bca5883f", TestUtil.ToTestableString(obj.ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.PlanUpdateable), true);
                Assert.AreEqual("/v2/services/f26ee044-e801-4b81-bd31-6a5e503f8522/service_plans", TestUtil.ToTestableString(obj.ServicePlansUrl), true);

            }
        }

    }
}