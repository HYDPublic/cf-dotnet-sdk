//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_id"": ""77d25c0b-0ba6-44ce-9a60-cd66525cd01a"",
      ""application_version"": ""9c9974e3-056f-4fe6-b1ac-0377cdd221dd"",
      ""application_name"": ""name-577"",
      ""application_uris"": [

      ],
      ""version"": ""9c9974e3-056f-4fe6-b1ac-0377cdd221dd"",
      ""name"": ""name-577"",
      ""space_name"": ""name-578"",
      ""space_id"": ""c49d7eec-f395-45f4-996c-51fece420b04"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""url"": ""/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178"",
        ""created_at"": ""2016-03-21T10:59:29Z"",
        ""updated_at"": ""2016-03-21T10:59:29Z""
      },
      ""entity"": {
        ""name"": ""name-491"",
        ""production"": false,
        ""space_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""stack_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""53a64b9b-ad9a-4756-b866-ce33407a7688"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-21T10:59:29Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/cebc2aee-af8d-412c-bbb4-27e8b8f41ebf"",
        ""stack_url"": ""/v2/stacks/796fd250-1461-4c4b-9b4b-a45422c3b09d"",
        ""events_url"": ""/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/events"",
        ""service_bindings_url"": ""/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/service_bindings"",
        ""routes_url"": ""/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/routes"",
        ""route_mappings_url"": ""/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""url"": ""/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e"",
        ""created_at"": ""2016-03-21T10:59:28Z"",
        ""updated_at"": ""2016-03-21T10:59:28Z""
      },
      ""entity"": {
        ""name"": ""name-481"",
        ""production"": false,
        ""space_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""stack_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""5f3285f8-aff0-4fe0-9180-23beb315bb9d"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-21T10:59:28Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/87845990-7f0e-4397-99e5-622fe275b6f7"",
        ""stack_url"": ""/v2/stacks/608559e0-c431-4724-8507-1333fb512873"",
        ""events_url"": ""/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/events"",
        ""service_bindings_url"": ""/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/service_bindings"",
        ""routes_url"": ""/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/routes"",
        ""route_mappings_url"": ""/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""url"": ""/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93"",
        ""created_at"": ""2016-03-21T10:59:29Z"",
        ""updated_at"": ""2016-03-21T10:59:29Z""
      },
      ""entity"": {
        ""name"": ""name-486"",
        ""production"": false,
        ""space_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""stack_guid"": ""e59fa949-146d-48be-9603-8a6bd3dc4816"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""b081e42a-b75e-45b0-8e83-82a5e108917a"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-21T10:59:28Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/c804d2e5-ee0e-4859-901b-06962652cfd2"",
        ""stack_url"": ""/v2/stacks/905cdd6b-9997-4e8c-b894-aa5931e82e73"",
        ""events_url"": ""/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/events"",
        ""service_bindings_url"": ""/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/service_bindings"",
        ""routes_url"": ""/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/routes"",
        ""route_mappings_url"": ""/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-491", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("53a64b9b-ad9a-4756-b866-ce33407a7688", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/cebc2aee-af8d-412c-bbb4-27e8b8f41ebf", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/796fd250-1461-4c4b-9b4b-a45422c3b09d", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/0b8ea3af-e1ed-464c-921b-d62e29a8f178/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:28Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:28Z", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-481", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("5f3285f8-aff0-4fe0-9180-23beb315bb9d", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:28Z", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Ports), true);
                Assert.AreEqual("/v2/spaces/87845990-7f0e-4397-99e5-622fe275b6f7", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/608559e0-c431-4724-8507-1333fb512873", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/44b8b05c-f9ce-4263-8e2e-b6579000dd7e/route_mappings", TestUtil.ToTestableString(obj[1].RouteMappingsUrl), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-486", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("e59fa949-146d-48be-9603-8a6bd3dc4816", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("b081e42a-b75e-45b0-8e83-82a5e108917a", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:28Z", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[2].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Ports), true);
                Assert.AreEqual("/v2/spaces/c804d2e5-ee0e-4859-901b-06962652cfd2", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/905cdd6b-9997-4e8c-b894-aa5931e82e73", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/d5978177-bd6e-4bec-b92d-98d5057ada93/route_mappings", TestUtil.ToTestableString(obj[2].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""46b045df-794a-4c75-9cf4-dd67af8cf9d8"",
        ""url"": ""/v2/service_bindings/c6376fe0-260e-4747-bdf9-711b27a9f92c"",
        ""created_at"": ""2016-03-21T10:59:30Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""46b045df-794a-4c75-9cf4-dd67af8cf9d8"",
        ""service_instance_guid"": ""46b045df-794a-4c75-9cf4-dd67af8cf9d8"",
        ""credentials"": {
          ""creds-key-10"": ""creds-val-10""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/039b6742-e53b-4d19-97a6-80d04e9a3509"",
        ""service_instance_url"": ""/v2/service_instances/6a388031-b6d0-4716-9769-63c7fc9361dc""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("46b045df-794a-4c75-9cf4-dd67af8cf9d8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/c6376fe0-260e-4747-bdf9-711b27a9f92c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:30Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("46b045df-794a-4c75-9cf4-dd67af8cf9d8", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("46b045df-794a-4c75-9cf4-dd67af8cf9d8", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/039b6742-e53b-4d19-97a6-80d04e9a3509", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/6a388031-b6d0-4716-9769-63c7fc9361dc", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9"",
    ""url"": ""/v2/apps/7e959bcc-ee82-4217-a671-3dfe695fc33a"",
    ""created_at"": ""2016-03-21T10:59:54Z"",
    ""updated_at"": ""2016-03-21T10:59:54Z""
  },
  ""entity"": {
    ""name"": ""name-2654"",
    ""production"": false,
    ""space_guid"": ""cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9"",
    ""stack_guid"": ""cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""e4f37b3d-282c-41fb-8181-55196e6997cf"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-21T10:59:54Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/7e959bcc-ee82-4217-a671-3dfe695fc33a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2654", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("cb1c7c9d-ee0c-4871-a7f1-a34c6a34b1b9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("e4f37b3d-282c-41fb-8181-55196e6997cf", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:54Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ca659b05-6af0-4664-aa8e-e56a3e15221a"",
        ""url"": ""/v2/routes/febda472-e98d-4835-814b-769ba8845e2c"",
        ""created_at"": ""2016-03-21T10:59:31Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-14"",
        ""path"": """",
        ""domain_guid"": ""ca659b05-6af0-4664-aa8e-e56a3e15221a"",
        ""space_guid"": ""ca659b05-6af0-4664-aa8e-e56a3e15221a"",
        ""service_instance_guid"": null,
        ""port"": 0,
        ""domain_url"": ""/v2/domains/3367bba6-4378-4c3f-b931-f16db498954e"",
        ""space_url"": ""/v2/spaces/b04a1087-d148-4042-87dc-209f40a4a38c"",
        ""apps_url"": ""/v2/routes/febda472-e98d-4835-814b-769ba8845e2c/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ca659b05-6af0-4664-aa8e-e56a3e15221a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/febda472-e98d-4835-814b-769ba8845e2c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:31Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-14", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("ca659b05-6af0-4664-aa8e-e56a3e15221a", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("ca659b05-6af0-4664-aa8e-e56a3e15221a", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/3367bba6-4378-4c3f-b931-f16db498954e", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/b04a1087-d148-4042-87dc-209f40a4a38c", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/febda472-e98d-4835-814b-769ba8845e2c/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""213f7cef-6e86-49d5-8359-5d3ea10537e9"",
    ""url"": ""/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507"",
    ""created_at"": ""2016-03-21T10:59:30Z"",
    ""updated_at"": ""2016-03-21T10:59:31Z""
  },
  ""entity"": {
    ""name"": ""name-624"",
    ""production"": false,
    ""space_guid"": ""213f7cef-6e86-49d5-8359-5d3ea10537e9"",
    ""stack_guid"": ""213f7cef-6e86-49d5-8359-5d3ea10537e9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""c7188084-58f9-447e-84a9-826d5b9b0b91"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-21T10:59:30Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/6ff51c46-d299-4b7c-8b4b-4bc7463c802a"",
    ""stack_url"": ""/v2/stacks/981099ae-417a-4eec-a029-f9b8283072fa"",
    ""events_url"": ""/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/events"",
    ""service_bindings_url"": ""/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/service_bindings"",
    ""routes_url"": ""/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/routes"",
    ""route_mappings_url"": ""/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("213f7cef-6e86-49d5-8359-5d3ea10537e9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:30Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:31Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-624", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("213f7cef-6e86-49d5-8359-5d3ea10537e9", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("213f7cef-6e86-49d5-8359-5d3ea10537e9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("c7188084-58f9-447e-84a9-826d5b9b0b91", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:30Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/6ff51c46-d299-4b7c-8b4b-4bc7463c802a", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/981099ae-417a-4eec-a029-f9b8283072fa", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/0d72b21b-5aff-43c1-9811-ed466a284507/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
  ""name"": ""name-2673"",
  ""routes"": [
    {
      ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
      ""host"": ""host-33"",
      ""path"": """",
      ""domain"": {
        ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
        ""name"": ""domain-82.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
      ""name"": ""name-2675"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
        ""name"": ""name-2676"",
        ""service"": {
          ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
          ""label"": ""label-76"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
      ""name"": ""domain-82.example.com"",
      ""owning_organization_guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642""
    },
    {
      ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_types"": null
    },
    {
      ""guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_types"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
  ""stack_guid"": ""ab15a4b0-3081-438f-8e7a-41882b551642"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""3ab57a1a-ae08-494a-ac59-d685987fb715"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-03-21T10:59:55Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("ab15a4b0-3081-438f-8e7a-41882b551642", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-2673", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("ab15a4b0-3081-438f-8e7a-41882b551642", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("ab15a4b0-3081-438f-8e7a-41882b551642", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("3ab57a1a-ae08-494a-ac59-d685987fb715", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:55Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void UploadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ba1a6123-b2de-4546-8b05-030586a8431a"",
    ""created_at"": ""2016-03-21T10:59:20Z"",
    ""url"": ""/v2/jobs/8c729c1c-c710-4084-8623-046c5d137f37""
  },
  ""entity"": {
    ""guid"": ""ba1a6123-b2de-4546-8b05-030586a8431a"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                dynamic value = null;


                var obj = cfClient.Apps.UploadsBitsForApp(guid, value).Result;


                Assert.AreEqual("ba1a6123-b2de-4546-8b05-030586a8431a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-21T10:59:20Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/8c729c1c-c710-4084-8623-046c5d137f37", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("ba1a6123-b2de-4546-8b05-030586a8431a", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""92c3e67a-6be6-4ff8-9c78-12c7d58cfc30"",
    ""url"": ""/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a"",
    ""created_at"": ""2016-03-21T10:59:29Z"",
    ""updated_at"": ""2016-03-21T10:59:29Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""92c3e67a-6be6-4ff8-9c78-12c7d58cfc30"",
    ""stack_guid"": ""92c3e67a-6be6-4ff8-9c78-12c7d58cfc30"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""57a0f927-8bc0-476b-bbdb-5d88b05765dd"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-21T10:59:29Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/308ea9c1-f503-4b14-b75f-d342667b4168"",
    ""stack_url"": ""/v2/stacks/e3599c4a-26ab-4be6-91da-d8c475d346f6"",
    ""events_url"": ""/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/events"",
    ""service_bindings_url"": ""/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/service_bindings"",
    ""routes_url"": ""/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/routes"",
    ""route_mappings_url"": ""/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("92c3e67a-6be6-4ff8-9c78-12c7d58cfc30", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("92c3e67a-6be6-4ff8-9c78-12c7d58cfc30", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("92c3e67a-6be6-4ff8-9c78-12c7d58cfc30", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("57a0f927-8bc0-476b-bbdb-5d88b05765dd", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/308ea9c1-f503-4b14-b75f-d342667b4168", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e3599c4a-26ab-4be6-91da-d8c475d346f6", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/8b9e5c95-4bea-40ca-a5ca-0f8d4502eb4a/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void DownloadsStagedDropletForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsStagedDropletForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void DownloadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsBitsForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f312300f-2d62-44fe-b7e3-a951b53e129f"",
    ""url"": ""/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f"",
    ""created_at"": ""2016-03-21T10:59:29Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""f312300f-2d62-44fe-b7e3-a951b53e129f"",
    ""stack_guid"": ""f312300f-2d62-44fe-b7e3-a951b53e129f"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""3c89b0a1-3932-42e2-81f0-b060556b3afa"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/11693716-50ac-47bc-98a3-1a6d0a5a160b"",
    ""stack_url"": ""/v2/stacks/807b8bf0-1654-4818-ae35-6ef65a2fd556"",
    ""events_url"": ""/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/events"",
    ""service_bindings_url"": ""/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/service_bindings"",
    ""routes_url"": ""/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/routes"",
    ""route_mappings_url"": ""/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("f312300f-2d62-44fe-b7e3-a951b53e129f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("f312300f-2d62-44fe-b7e3-a951b53e129f", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("f312300f-2d62-44fe-b7e3-a951b53e129f", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("3c89b0a1-3932-42e2-81f0-b060556b3afa", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/11693716-50ac-47bc-98a3-1a6d0a5a160b", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/807b8bf0-1654-4818-ae35-6ef65a2fd556", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/2a772a58-5915-45c4-8dbd-464d3a10a49f/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6197ee19-7dae-4883-a94c-2d3d84cd9ba7"",
    ""created_at"": ""2016-03-21T10:59:19Z"",
    ""url"": ""/v2/jobs/aa08b83a-a337-4e6e-877d-2b50359cf452""
  },
  ""entity"": {
    ""guid"": ""6197ee19-7dae-4883-a94c-2d3d84cd9ba7"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("6197ee19-7dae-4883-a94c-2d3d84cd9ba7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-21T10:59:19Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/aa08b83a-a337-4e6e-877d-2b50359cf452", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("6197ee19-7dae-4883-a94c-2d3d84cd9ba7", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e463565d-3778-494b-a85a-bb1ff19fb506"",
    ""url"": ""/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3"",
    ""created_at"": ""2016-03-21T10:59:29Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""e463565d-3778-494b-a85a-bb1ff19fb506"",
    ""stack_guid"": ""e463565d-3778-494b-a85a-bb1ff19fb506"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""ca7e1a23-8cdb-4ace-ac0e-e8c65bc1a80c"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2016-03-21T10:59:29Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      8080
    ],
    ""space_url"": ""/v2/spaces/c1a10f49-bbd7-4f19-97fd-47092de22e8b"",
    ""stack_url"": ""/v2/stacks/807b8bf0-1654-4818-ae35-6ef65a2fd556"",
    ""events_url"": ""/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/events"",
    ""service_bindings_url"": ""/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/service_bindings"",
    ""routes_url"": ""/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/routes"",
    ""route_mappings_url"": ""/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("e463565d-3778-494b-a85a-bb1ff19fb506", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("e463565d-3778-494b-a85a-bb1ff19fb506", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("e463565d-3778-494b-a85a-bb1ff19fb506", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ca7e1a23-8cdb-4ace-ac0e-e8c65bc1a80c", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/c1a10f49-bbd7-4f19-97fd-47092de22e8b", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/807b8bf0-1654-4818-ae35-6ef65a2fd556", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/4b0353f0-a4d5-442c-a172-52eb9f0e2ab3/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""afba78b5-77e8-4215-a66a-de3b5fcff0ac"",
    ""url"": ""/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218"",
    ""created_at"": ""2016-03-21T10:59:29Z"",
    ""updated_at"": ""2016-03-21T10:59:29Z""
  },
  ""entity"": {
    ""name"": ""name-496"",
    ""production"": false,
    ""space_guid"": ""afba78b5-77e8-4215-a66a-de3b5fcff0ac"",
    ""stack_guid"": ""afba78b5-77e8-4215-a66a-de3b5fcff0ac"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""06d37587-13fe-4455-8f44-4a35bb1398f8"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-21T10:59:29Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/7fa03afa-ad0b-44f7-9fc0-6f0d3a0ddb93"",
    ""stack_url"": ""/v2/stacks/d946b88d-0eb1-42bf-8d64-8b2e93901ddc"",
    ""events_url"": ""/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/events"",
    ""service_bindings_url"": ""/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/service_bindings"",
    ""routes_url"": ""/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/routes"",
    ""route_mappings_url"": ""/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("afba78b5-77e8-4215-a66a-de3b5fcff0ac", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-496", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("afba78b5-77e8-4215-a66a-de3b5fcff0ac", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("afba78b5-77e8-4215-a66a-de3b5fcff0ac", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("06d37587-13fe-4455-8f44-4a35bb1398f8", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:29Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/7fa03afa-ad0b-44f7-9fc0-6f0d3a0ddb93", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/d946b88d-0eb1-42bf-8d64-8b2e93901ddc", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/0b4bd531-3a05-4543-8964-e5f2693cf218/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}