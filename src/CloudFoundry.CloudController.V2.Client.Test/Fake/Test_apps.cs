//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2d3ba02d-d3b0-43d9-ab52-16244733b714"",
    ""url"": ""/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714"",
    ""created_at"": ""2015-03-25T13:48:46+00:00"",
    ""updated_at"": ""2015-03-25T13:48:46+00:00""
  },
  ""entity"": {
    ""name"": ""name-476"",
    ""production"": false,
    ""space_guid"": ""d913635c-3c14-48eb-90be-30e13520a9e1"",
    ""stack_guid"": ""57b76690-760d-426d-868c-12127e03903d"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""74649b0b-afb2-41a6-9c04-833f38b43607"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:46+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/d913635c-3c14-48eb-90be-30e13520a9e1"",
    ""stack_url"": ""/v2/stacks/57b76690-760d-426d-868c-12127e03903d"",
    ""events_url"": ""/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/events"",
    ""service_bindings_url"": ""/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/service_bindings"",
    ""routes_url"": ""/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Result;


                Assert.AreEqual("2d3ba02d-d3b0-43d9-ab52-16244733b714", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-476", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("d913635c-3c14-48eb-90be-30e13520a9e1", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("57b76690-760d-426d-868c-12127e03903d", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("74649b0b-afb2-41a6-9c04-833f38b43607", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/d913635c-3c14-48eb-90be-30e13520a9e1", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/57b76690-760d-426d-868c-12127e03903d", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/2d3ba02d-d3b0-43d9-ab52-16244733b714/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""09d110c9-afdb-4b61-9319-91a9e1227e0a"",
    ""url"": ""/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a"",
    ""created_at"": ""2015-03-25T13:48:45+00:00"",
    ""updated_at"": ""2015-03-25T13:48:46+00:00""
  },
  ""entity"": {
    ""name"": ""name-471"",
    ""production"": false,
    ""space_guid"": ""af41e6b8-25ad-479f-b962-1389f8dbcf59"",
    ""stack_guid"": ""7506e258-e21c-41f2-9c71-88fa264b2133"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""56335623-9959-4d45-9207-559d1bafc3d1"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:45+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/af41e6b8-25ad-479f-b962-1389f8dbcf59"",
    ""stack_url"": ""/v2/stacks/7506e258-e21c-41f2-9c71-88fa264b2133"",
    ""events_url"": ""/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/events"",
    ""service_bindings_url"": ""/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/service_bindings"",
    ""routes_url"": ""/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("09d110c9-afdb-4b61-9319-91a9e1227e0a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:45+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-471", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("af41e6b8-25ad-479f-b962-1389f8dbcf59", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("7506e258-e21c-41f2-9c71-88fa264b2133", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("56335623-9959-4d45-9207-559d1bafc3d1", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:45+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/af41e6b8-25ad-479f-b962-1389f8dbcf59", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/7506e258-e21c-41f2-9c71-88fa264b2133", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/09d110c9-afdb-4b61-9319-91a9e1227e0a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1a95a1f7-4868-478f-92ff-69e2e0ce3188"",
    ""url"": ""/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188"",
    ""created_at"": ""2015-03-25T13:48:46+00:00"",
    ""updated_at"": ""2015-03-25T13:48:46+00:00""
  },
  ""entity"": {
    ""name"": ""name-511"",
    ""production"": false,
    ""space_guid"": ""e45b7119-72e6-44a1-8232-ad70d8fd94c8"",
    ""stack_guid"": ""c0c48d57-ae2e-466d-988a-18f308d5b216"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""c25c1a4f-91be-4094-aab1-8afbe293e21b"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:46+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/e45b7119-72e6-44a1-8232-ad70d8fd94c8"",
    ""stack_url"": ""/v2/stacks/c0c48d57-ae2e-466d-988a-18f308d5b216"",
    ""events_url"": ""/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/events"",
    ""service_bindings_url"": ""/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/service_bindings"",
    ""routes_url"": ""/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Result;


                Assert.AreEqual("1a95a1f7-4868-478f-92ff-69e2e0ce3188", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-511", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("e45b7119-72e6-44a1-8232-ad70d8fd94c8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("c0c48d57-ae2e-466d-988a-18f308d5b216", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("c25c1a4f-91be-4094-aab1-8afbe293e21b", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/e45b7119-72e6-44a1-8232-ad70d8fd94c8", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/c0c48d57-ae2e-466d-988a-18f308d5b216", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/1a95a1f7-4868-478f-92ff-69e2e0ce3188/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""stats"":{""usage"":{""disk"":66392064,""mem"":29880320,""cpu"":0.13511219703079957,""time"":""2014-06-19 22:37:58 +0000""},""name"":""app_name"",""uris"":[""app_name.example.com""],""host"":""10.0.0.1"",""port"":61035,""uptime"":65007,""mem_quota"":536870912,""disk_quota"":1073741824,""fds_quota"":16384}}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c5da011f-4c25-4c4a-9bca-12cb4d00fa0f"",
    ""created_at"": ""2015-03-25T13:48:55+00:00"",
    ""url"": ""/v2/jobs/c5da011f-4c25-4c4a-9bca-12cb4d00fa0f""
  },
  ""entity"": {
    ""guid"": ""c5da011f-4c25-4c4a-9bca-12cb4d00fa0f"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("c5da011f-4c25-4c4a-9bca-12cb4d00fa0f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-03-25T13:48:55+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/c5da011f-4c25-4c4a-9bca-12cb4d00fa0f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("c5da011f-4c25-4c4a-9bca-12cb4d00fa0f", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""101cbaba-a12b-4dc3-adee-2b05dd06732a"",
        ""url"": ""/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a"",
        ""created_at"": ""2015-03-25T13:48:48+00:00"",
        ""updated_at"": ""2015-03-25T13:48:48+00:00""
      },
      ""entity"": {
        ""name"": ""name-655"",
        ""production"": false,
        ""space_guid"": ""df8bb8ac-9fb2-463d-8910-632b8c19a438"",
        ""stack_guid"": ""e9aa6837-0a7f-4086-b1db-484637da5ba6"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""5ef7cb9a-fe34-4820-8adb-ded428bf59ab"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-03-25T13:48:48+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/df8bb8ac-9fb2-463d-8910-632b8c19a438"",
        ""stack_url"": ""/v2/stacks/e9aa6837-0a7f-4086-b1db-484637da5ba6"",
        ""events_url"": ""/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/events"",
        ""service_bindings_url"": ""/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/service_bindings"",
        ""routes_url"": ""/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""21ecf69e-d90b-4b0c-8aa8-0b4348b030a5"",
        ""url"": ""/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5"",
        ""created_at"": ""2015-03-25T13:48:48+00:00"",
        ""updated_at"": ""2015-03-25T13:48:48+00:00""
      },
      ""entity"": {
        ""name"": ""name-650"",
        ""production"": false,
        ""space_guid"": ""006f133b-6e99-4d9a-86b8-8a853331f978"",
        ""stack_guid"": ""cbdb6a2c-0e57-4b17-887d-4882d805b82f"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""5612ed6d-7749-4a36-b5c6-37bdf190f262"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-03-25T13:48:48+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/006f133b-6e99-4d9a-86b8-8a853331f978"",
        ""stack_url"": ""/v2/stacks/cbdb6a2c-0e57-4b17-887d-4882d805b82f"",
        ""events_url"": ""/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/events"",
        ""service_bindings_url"": ""/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/service_bindings"",
        ""routes_url"": ""/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""64eb2a2f-5ac9-477f-91bb-2641bdc20b76"",
        ""url"": ""/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76"",
        ""created_at"": ""2015-03-25T13:48:48+00:00"",
        ""updated_at"": ""2015-03-25T13:48:48+00:00""
      },
      ""entity"": {
        ""name"": ""name-645"",
        ""production"": false,
        ""space_guid"": ""df732caa-cf50-4234-a381-c84e507c96cc"",
        ""stack_guid"": ""54be36a2-09e1-4c1d-88c8-bc9394afcb93"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""3a2709c3-0d40-4152-9781-fbc97080d112"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-03-25T13:48:48+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/df732caa-cf50-4234-a381-c84e507c96cc"",
        ""stack_url"": ""/v2/stacks/54be36a2-09e1-4c1d-88c8-bc9394afcb93"",
        ""events_url"": ""/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/events"",
        ""service_bindings_url"": ""/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/service_bindings"",
        ""routes_url"": ""/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("101cbaba-a12b-4dc3-adee-2b05dd06732a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-655", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("df8bb8ac-9fb2-463d-8910-632b8c19a438", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("e9aa6837-0a7f-4086-b1db-484637da5ba6", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("5ef7cb9a-fe34-4820-8adb-ded428bf59ab", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/df8bb8ac-9fb2-463d-8910-632b8c19a438", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e9aa6837-0a7f-4086-b1db-484637da5ba6", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/101cbaba-a12b-4dc3-adee-2b05dd06732a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("21ecf69e-d90b-4b0c-8aa8-0b4348b030a5", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-650", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("006f133b-6e99-4d9a-86b8-8a853331f978", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("cbdb6a2c-0e57-4b17-887d-4882d805b82f", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("5612ed6d-7749-4a36-b5c6-37bdf190f262", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/006f133b-6e99-4d9a-86b8-8a853331f978", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/cbdb6a2c-0e57-4b17-887d-4882d805b82f", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/21ecf69e-d90b-4b0c-8aa8-0b4348b030a5/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("64eb2a2f-5ac9-477f-91bb-2641bdc20b76", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-645", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("df732caa-cf50-4234-a381-c84e507c96cc", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("54be36a2-09e1-4c1d-88c8-bc9394afcb93", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("3a2709c3-0d40-4152-9781-fbc97080d112", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/df732caa-cf50-4234-a381-c84e507c96cc", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/54be36a2-09e1-4c1d-88c8-bc9394afcb93", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/64eb2a2f-5ac9-477f-91bb-2641bdc20b76/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""61ad8d26-c789-4b15-9152-7e7cae978a71"",
    ""url"": ""/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71"",
    ""created_at"": ""2015-03-25T13:48:47+00:00"",
    ""updated_at"": ""2015-03-25T13:48:48+00:00""
  },
  ""entity"": {
    ""name"": ""name-620"",
    ""production"": false,
    ""space_guid"": ""2861e64e-19ca-41df-bed0-553d551e942d"",
    ""stack_guid"": ""adee227b-3c66-4a3f-b8e3-57760d75aab1"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""e55008eb-83bc-4412-a1e1-4ba42f357c6a"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:47+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/2861e64e-19ca-41df-bed0-553d551e942d"",
    ""stack_url"": ""/v2/stacks/adee227b-3c66-4a3f-b8e3-57760d75aab1"",
    ""events_url"": ""/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/events"",
    ""service_bindings_url"": ""/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/service_bindings"",
    ""routes_url"": ""/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("61ad8d26-c789-4b15-9152-7e7cae978a71", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-620", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2861e64e-19ca-41df-bed0-553d551e942d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("adee227b-3c66-4a3f-b8e3-57760d75aab1", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("e55008eb-83bc-4412-a1e1-4ba42f357c6a", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/2861e64e-19ca-41df-bed0-553d551e942d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/adee227b-3c66-4a3f-b8e3-57760d75aab1", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/61ad8d26-c789-4b15-9152-7e7cae978a71/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d67765ba-19e7-447b-95e3-cdc6f3411eae"",
    ""url"": ""/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae"",
    ""created_at"": ""2015-03-25T13:48:47+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""bbf9d9f8-393d-4cbd-9109-d65ca7d63fcb"",
    ""stack_guid"": ""57cf9911-b3d2-4419-a1b4-5aa03262326a"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""31d08e7d-af0d-4dbf-b72d-1941721bdbf6"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/bbf9d9f8-393d-4cbd-9109-d65ca7d63fcb"",
    ""stack_url"": ""/v2/stacks/57cf9911-b3d2-4419-a1b4-5aa03262326a"",
    ""events_url"": ""/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/events"",
    ""service_bindings_url"": ""/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/service_bindings"",
    ""routes_url"": ""/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("d67765ba-19e7-447b-95e3-cdc6f3411eae", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("bbf9d9f8-393d-4cbd-9109-d65ca7d63fcb", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("57cf9911-b3d2-4419-a1b4-5aa03262326a", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("31d08e7d-af0d-4dbf-b72d-1941721bdbf6", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/bbf9d9f8-393d-4cbd-9109-d65ca7d63fcb", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/57cf9911-b3d2-4419-a1b4-5aa03262326a", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/d67765ba-19e7-447b-95e3-cdc6f3411eae/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0ee0d692-54d8-434e-962b-92173b82bfce"",
    ""url"": ""/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce"",
    ""created_at"": ""2015-03-25T13:48:48+00:00"",
    ""updated_at"": ""2015-03-25T13:48:48+00:00""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""3776c234-07a3-4f5d-8dde-bbe86d3e4f84"",
    ""stack_guid"": ""0230a407-0682-46e6-b3e1-19ad1d9e9651"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""4be72580-59f8-42f2-9846-37bc2d3aa979"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:48+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/3776c234-07a3-4f5d-8dde-bbe86d3e4f84"",
    ""stack_url"": ""/v2/stacks/0230a407-0682-46e6-b3e1-19ad1d9e9651"",
    ""events_url"": ""/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/events"",
    ""service_bindings_url"": ""/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/service_bindings"",
    ""routes_url"": ""/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("0ee0d692-54d8-434e-962b-92173b82bfce", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("3776c234-07a3-4f5d-8dde-bbe86d3e4f84", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("0230a407-0682-46e6-b3e1-19ad1d9e9651", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("4be72580-59f8-42f2-9846-37bc2d3aa979", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:48+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/3776c234-07a3-4f5d-8dde-bbe86d3e4f84", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/0230a407-0682-46e6-b3e1-19ad1d9e9651", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0ee0d692-54d8-434e-962b-92173b82bfce/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""since"":1403140717.984577,""debug_ip"":null,""debug_port"":null,""console_ip"":null,""console_port"":null}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_version"": ""a41d744f-14d1-4986-a10f-9433a3bee998"",
      ""application_name"": ""name-456"",
      ""application_uris"": [

      ],
      ""version"": ""a41d744f-14d1-4986-a10f-9433a3bee998"",
      ""name"": ""name-456"",
      ""space_name"": ""name-457"",
      ""space_id"": ""c224a82d-a506-4ca3-9f2d-059ce2d11780"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""31493bd6-629a-4639-a4f8-57da59eed15c"",
    ""url"": ""/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c"",
    ""created_at"": ""2015-03-25T13:48:47+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""5d6abf87-bbde-48aa-b3ad-28f39f24631c"",
    ""stack_guid"": ""57cf9911-b3d2-4419-a1b4-5aa03262326a"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {
      ""DIEGO_STAGE_BETA"": ""true"",
      ""DIEGO_RUN_BETA"": ""true""
    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""361b11f3-a7c5-499f-bcce-4aa769285729"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2015-03-25T13:48:47+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/5d6abf87-bbde-48aa-b3ad-28f39f24631c"",
    ""stack_url"": ""/v2/stacks/57cf9911-b3d2-4419-a1b4-5aa03262326a"",
    ""events_url"": ""/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/events"",
    ""service_bindings_url"": ""/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/service_bindings"",
    ""routes_url"": ""/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("31493bd6-629a-4639-a4f8-57da59eed15c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("5d6abf87-bbde-48aa-b3ad-28f39f24631c", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("57cf9911-b3d2-4419-a1b4-5aa03262326a", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("361b11f3-a7c5-499f-bcce-4aa769285729", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/5d6abf87-bbde-48aa-b3ad-28f39f24631c", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/57cf9911-b3d2-4419-a1b4-5aa03262326a", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/31493bd6-629a-4639-a4f8-57da59eed15c/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d1bf9632-70cc-4440-83e9-13569c3e8d71"",
        ""url"": ""/v2/routes/d1bf9632-70cc-4440-83e9-13569c3e8d71"",
        ""created_at"": ""2015-03-25T13:48:46+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-7"",
        ""domain_guid"": ""d0df0871-03af-45a6-8bc0-201d379743f4"",
        ""space_guid"": ""a6c17bbd-ba6d-44f8-b6a6-fbaa86500885"",
        ""domain_url"": ""/v2/domains/d0df0871-03af-45a6-8bc0-201d379743f4"",
        ""space_url"": ""/v2/spaces/a6c17bbd-ba6d-44f8-b6a6-fbaa86500885"",
        ""apps_url"": ""/v2/routes/d1bf9632-70cc-4440-83e9-13569c3e8d71/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d1bf9632-70cc-4440-83e9-13569c3e8d71", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/d1bf9632-70cc-4440-83e9-13569c3e8d71", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:46+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-7", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("d0df0871-03af-45a6-8bc0-201d379743f4", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("a6c17bbd-ba6d-44f8-b6a6-fbaa86500885", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/d0df0871-03af-45a6-8bc0-201d379743f4", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/a6c17bbd-ba6d-44f8-b6a6-fbaa86500885", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/d1bf9632-70cc-4440-83e9-13569c3e8d71/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f1c1aba0-5c47-4869-93b5-b38a566f96f4"",
        ""url"": ""/v2/service_bindings/f1c1aba0-5c47-4869-93b5-b38a566f96f4"",
        ""created_at"": ""2015-03-25T13:48:47+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""1864a5e1-6ee2-46e9-aa06-f533c1544f89"",
        ""service_instance_guid"": ""e1ff7990-59fb-4845-9e00-67855d2cefe7"",
        ""credentials"": {
          ""creds-key-256"": ""creds-val-256""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/1864a5e1-6ee2-46e9-aa06-f533c1544f89"",
        ""service_instance_url"": ""/v2/service_instances/e1ff7990-59fb-4845-9e00-67855d2cefe7""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f1c1aba0-5c47-4869-93b5-b38a566f96f4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/f1c1aba0-5c47-4869-93b5-b38a566f96f4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:47+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("1864a5e1-6ee2-46e9-aa06-f533c1544f89", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("e1ff7990-59fb-4845-9e00-67855d2cefe7", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/1864a5e1-6ee2-46e9-aa06-f533c1544f89", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/e1ff7990-59fb-4845-9e00-67855d2cefe7", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""0752d580-efa2-4ace-b8ae-0abe815434bd"",""name"":""name-1606"",""routes"":[{""guid"":""e3973309-8e90-427f-b95c-2bba480cac38"",""host"":""host-18"",""domain"":{""guid"":""84c28ddb-6b4c-43e0-a668-469cce04d837"",""name"":""domain-18.example.com""}}],""running_instances"":0,""services"":[{""guid"":""8699a1c9-93dc-4eec-b737-cac4ca7a3da7"",""name"":""name-1608"",""bound_app_count"":1,""dashboard_url"":null,""service_plan"":{""guid"":""d02955e7-5e74-4bc9-9812-a4bd086c92a4"",""name"":""name-1609"",""service"":{""guid"":""7bea4f1f-3262-408e-88af-a4422a918e5a"",""label"":""label-45"",""provider"":""provider-45"",""version"":""version-29""}}}],""available_domains"":[{""guid"":""84c28ddb-6b4c-43e0-a668-469cce04d837"",""name"":""domain-18.example.com"",""owning_organization_guid"":""5bb3b0e3-5079-47cc-a5fa-01368b60234d""},{""guid"":""a65af475-080b-4c42-8412-a1d987dfc3d6"",""name"":""customer-app-domain1.com""},{""guid"":""829ffdbd-e681-4fc0-8093-092f2210879f"",""name"":""customer-app-domain2.com""}],""name"":""name-1606"",""production"":false,""space_guid"":""46cae3b1-d3b4-4ec4-bfdd-2a5779eb61aa"",""stack_guid"":""5943305e-a192-4373-94dd-4ea6c91792c1"",""buildpack"":null,""detected_buildpack"":null,""environment_json"":null,""memory"":1024,""instances"":1,""disk_quota"":1024,""state"":""STOPPED"",""version"":""709c04dc-5b61-4ffd-b680-e34933f5c77d"",""command"":null,""console"":false,""debug"":null,""staging_task_id"":null,""package_state"":""PENDING"",""health_check_type"":""port"",""health_check_timeout"":null,""staging_failed_reason"":null,""docker_image"":null,""package_updated_at"":""2015-03-25T13:48:54+00:00"",""detected_start_command"":""""}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("0752d580-efa2-4ace-b8ae-0abe815434bd", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1606", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("46cae3b1-d3b4-4ec4-bfdd-2a5779eb61aa", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("5943305e-a192-4373-94dd-4ea6c91792c1", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("709c04dc-5b61-4ffd-b680-e34933f5c77d", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:54+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""38284fb2-139b-40c7-a5c6-de2a88c5badf"",
    ""url"": ""/v2/apps/38284fb2-139b-40c7-a5c6-de2a88c5badf"",
    ""created_at"": ""2015-03-25T13:48:59+00:00"",
    ""updated_at"": ""2015-03-25T13:48:59+00:00""
  },
  ""entity"": {
    ""name"": ""name-1885"",
    ""production"": false,
    ""space_guid"": ""bd11af56-514a-42e5-ac32-6feecebe9fa8"",
    ""stack_guid"": ""880433c5-a731-4874-b905-8d6f065ff8af"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""21654835-815e-4624-a65d-520fba3e5db6"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-03-25T13:48:59+00:00"",
    ""detected_start_command"": """"
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("38284fb2-139b-40c7-a5c6-de2a88c5badf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/38284fb2-139b-40c7-a5c6-de2a88c5badf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1885", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("bd11af56-514a-42e5-ac32-6feecebe9fa8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("880433c5-a731-4874-b905-8d6f065ff8af", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("21654835-815e-4624-a65d-520fba3e5db6", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:59+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}