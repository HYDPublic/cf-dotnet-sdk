//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_id"": ""00686a1a-393a-4fa9-90c0-ea3049a19a0b"",
      ""application_version"": ""a52d48e6-9a2e-4fbe-af82-0c95c6d22cac"",
      ""application_name"": ""name-2076"",
      ""application_uris"": [

      ],
      ""version"": ""a52d48e6-9a2e-4fbe-af82-0c95c6d22cac"",
      ""name"": ""name-2076"",
      ""space_name"": ""name-2077"",
      ""space_id"": ""f091ffe1-501c-474b-83ba-58869b51f13d"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""url"": ""/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231"",
        ""created_at"": ""2016-03-30T10:15:35Z"",
        ""updated_at"": ""2016-03-30T10:15:35Z""
      },
      ""entity"": {
        ""name"": ""name-2203"",
        ""production"": false,
        ""space_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""stack_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""a76004a8-50a2-4bbf-b971-dbd58d31a074"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-30T10:15:35Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/db7bc01e-617b-4b82-bc73-3b16da49a8d8"",
        ""stack_url"": ""/v2/stacks/24734fd1-4139-46fb-a049-4253a40e1a94"",
        ""routes_url"": ""/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/routes"",
        ""events_url"": ""/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/events"",
        ""service_bindings_url"": ""/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""url"": ""/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756"",
        ""created_at"": ""2016-03-30T10:15:35Z"",
        ""updated_at"": ""2016-03-30T10:15:35Z""
      },
      ""entity"": {
        ""name"": ""name-2198"",
        ""production"": false,
        ""space_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""stack_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""8a9a611e-0cba-4981-861d-5ac50b3e42a7"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-30T10:15:35Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/4c09ce24-8172-4e19-86ee-bb7a793593bd"",
        ""stack_url"": ""/v2/stacks/12ee935a-e093-460a-9293-08a899c26a0d"",
        ""routes_url"": ""/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/routes"",
        ""events_url"": ""/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/events"",
        ""service_bindings_url"": ""/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/route_mappings""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""url"": ""/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f"",
        ""created_at"": ""2016-03-30T10:15:35Z"",
        ""updated_at"": ""2016-03-30T10:15:35Z""
      },
      ""entity"": {
        ""name"": ""name-2208"",
        ""production"": false,
        ""space_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""stack_guid"": ""66e82622-19c6-40ae-bf84-e043b0c7c2c8"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""c5ea4dc7-13eb-4ae6-8ee2-6b5f0c62185a"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-30T10:15:35Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/d5f9301d-6814-412f-8fbf-5f9f73b822b0"",
        ""stack_url"": ""/v2/stacks/a3f88c91-7f3f-42cc-8f18-6907737cc43f"",
        ""routes_url"": ""/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/routes"",
        ""events_url"": ""/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/events"",
        ""service_bindings_url"": ""/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2203", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("a76004a8-50a2-4bbf-b971-dbd58d31a074", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/db7bc01e-617b-4b82-bc73-3b16da49a8d8", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/24734fd1-4139-46fb-a049-4253a40e1a94", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4d17ab42-a9e8-4f9d-bb4b-13226f6e9231/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2198", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("8a9a611e-0cba-4981-861d-5ac50b3e42a7", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Ports), true);
                Assert.AreEqual("/v2/spaces/4c09ce24-8172-4e19-86ee-bb7a793593bd", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/12ee935a-e093-460a-9293-08a899c26a0d", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/7015b464-2c68-4ea7-9ef0-7816d090c756/route_mappings", TestUtil.ToTestableString(obj[1].RouteMappingsUrl), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2208", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("66e82622-19c6-40ae-bf84-e043b0c7c2c8", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("c5ea4dc7-13eb-4ae6-8ee2-6b5f0c62185a", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[2].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Ports), true);
                Assert.AreEqual("/v2/spaces/d5f9301d-6814-412f-8fbf-5f9f73b822b0", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/a3f88c91-7f3f-42cc-8f18-6907737cc43f", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/b6c82f1e-36aa-4ba9-82c2-b36b7a7c904f/route_mappings", TestUtil.ToTestableString(obj[2].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cc969a9b-82ac-4521-8a1b-c5c11bf387ba"",
        ""url"": ""/v2/service_bindings/1cb58416-fa8c-41eb-9c26-c2832edc5536"",
        ""created_at"": ""2016-03-30T10:15:34Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""cc969a9b-82ac-4521-8a1b-c5c11bf387ba"",
        ""service_instance_guid"": ""cc969a9b-82ac-4521-8a1b-c5c11bf387ba"",
        ""credentials"": {
          ""creds-key-49"": ""creds-val-49""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/4b6ff95e-daf0-4434-a039-b7e076648bfe"",
        ""service_instance_url"": ""/v2/service_instances/29dea85f-b762-49cc-baab-85d7ebb1d50a""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cc969a9b-82ac-4521-8a1b-c5c11bf387ba", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/1cb58416-fa8c-41eb-9c26-c2832edc5536", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("cc969a9b-82ac-4521-8a1b-c5c11bf387ba", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("cc969a9b-82ac-4521-8a1b-c5c11bf387ba", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/4b6ff95e-daf0-4434-a039-b7e076648bfe", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/29dea85f-b762-49cc-baab-85d7ebb1d50a", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""62852f18-3fd5-490f-b621-576454f41500"",
    ""url"": ""/v2/apps/beb81427-2c7c-41a8-a237-8022085113b6"",
    ""created_at"": ""2016-03-30T10:15:24Z"",
    ""updated_at"": ""2016-03-30T10:15:24Z""
  },
  ""entity"": {
    ""name"": ""name-1708"",
    ""production"": false,
    ""space_guid"": ""62852f18-3fd5-490f-b621-576454f41500"",
    ""stack_guid"": ""62852f18-3fd5-490f-b621-576454f41500"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""e7f3caf5-adcc-4798-a71b-a1fb729ee6fb"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-30T10:15:24Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("62852f18-3fd5-490f-b621-576454f41500", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/beb81427-2c7c-41a8-a237-8022085113b6", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:24Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1708", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("62852f18-3fd5-490f-b621-576454f41500", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("62852f18-3fd5-490f-b621-576454f41500", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("e7f3caf5-adcc-4798-a71b-a1fb729ee6fb", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:24Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8bd378e5-a259-4b6c-a740-ea023280cf89"",
        ""url"": ""/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526"",
        ""created_at"": ""2016-03-30T10:15:33Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-23"",
        ""path"": """",
        ""domain_guid"": ""8bd378e5-a259-4b6c-a740-ea023280cf89"",
        ""space_guid"": ""8bd378e5-a259-4b6c-a740-ea023280cf89"",
        ""service_instance_guid"": null,
        ""port"": 0,
        ""domain_url"": ""/v2/domains/8134fadf-67f8-4d63-9559-e656fbd90a60"",
        ""space_url"": ""/v2/spaces/3b571563-a3df-4b67-bc46-e6733a62acc9"",
        ""apps_url"": ""/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526/apps"",
        ""route_mappings_url"": ""/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8bd378e5-a259-4b6c-a740-ea023280cf89", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:33Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-23", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("8bd378e5-a259-4b6c-a740-ea023280cf89", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("8bd378e5-a259-4b6c-a740-ea023280cf89", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/8134fadf-67f8-4d63-9559-e656fbd90a60", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/3b571563-a3df-4b67-bc46-e6733a62acc9", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/b68b8a91-c74f-40f4-85ec-096452443526/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2dee40cb-4402-4d28-b2a3-97edce7bd67d"",
    ""url"": ""/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99"",
    ""created_at"": ""2016-03-30T10:15:33Z"",
    ""updated_at"": ""2016-03-30T10:15:34Z""
  },
  ""entity"": {
    ""name"": ""name-2111"",
    ""production"": false,
    ""space_guid"": ""2dee40cb-4402-4d28-b2a3-97edce7bd67d"",
    ""stack_guid"": ""2dee40cb-4402-4d28-b2a3-97edce7bd67d"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""2e6fda65-a30b-47b1-bce6-cf6d312d1aa8"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-30T10:15:33Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/3a53829e-ddac-450b-987d-4b49189ef102"",
    ""stack_url"": ""/v2/stacks/f730bae2-164e-42e6-ae03-80e083f42756"",
    ""routes_url"": ""/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/routes"",
    ""events_url"": ""/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/events"",
    ""service_bindings_url"": ""/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("2dee40cb-4402-4d28-b2a3-97edce7bd67d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:33Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:34Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2111", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2dee40cb-4402-4d28-b2a3-97edce7bd67d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2dee40cb-4402-4d28-b2a3-97edce7bd67d", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("2e6fda65-a30b-47b1-bce6-cf6d312d1aa8", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:33Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/3a53829e-ddac-450b-987d-4b49189ef102", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/f730bae2-164e-42e6-ae03-80e083f42756", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/8fc6bb1f-27a6-45da-8d3b-c82a27272f99/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""uptime"": 2405
  },
  ""1"": {
    ""state"": ""STARTING"",
    ""since"": 3625363939.984577,
    ""uptime"": 1394
  },
  ""2"": {
    ""state"": ""CRASHED"",
    ""since"": 2514251828.984577,
    ""uptime"": 283
  },
  ""3"": {
    ""state"": ""DOWN"",
    ""uptime"": 9172
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
  ""name"": ""name-488"",
  ""routes"": [
    {
      ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
      ""host"": ""host-5"",
      ""path"": """",
      ""domain"": {
        ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
        ""name"": ""domain-27.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
      ""name"": ""name-490"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
        ""name"": ""name-491"",
        ""service"": {
          ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
          ""label"": ""label-16"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
      ""name"": ""domain-27.example.com"",
      ""owning_organization_guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e""
    },
    {
      ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null,
      ""router_group_types"": null
    },
    {
      ""guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null,
      ""router_group_types"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
  ""stack_guid"": ""afd54b92-5488-452e-87a4-f465d68c8b0e"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""d793b438-6f55-447b-9d88-8a23a4b5abb1"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-03-30T10:15:15Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("afd54b92-5488-452e-87a4-f465d68c8b0e", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-488", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("afd54b92-5488-452e-87a4-f465d68c8b0e", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("afd54b92-5488-452e-87a4-f465d68c8b0e", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("d793b438-6f55-447b-9d88-8a23a4b5abb1", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:15Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void UploadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f51dd719-beb7-422a-a2db-33027efe4f92"",
    ""created_at"": ""2016-03-30T10:15:16Z"",
    ""url"": ""/v2/jobs/e8dcc08a-7f62-4364-bc33-f4063abe7833""
  },
  ""entity"": {
    ""guid"": ""f51dd719-beb7-422a-a2db-33027efe4f92"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                dynamic value = null;


                var obj = cfClient.Apps.UploadsBitsForApp(guid, value).Result;


                Assert.AreEqual("f51dd719-beb7-422a-a2db-33027efe4f92", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-30T10:15:16Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/e8dcc08a-7f62-4364-bc33-f4063abe7833", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("f51dd719-beb7-422a-a2db-33027efe4f92", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1f18ef5f-d6e7-482d-9106-bfeeddd35d1f"",
    ""url"": ""/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0"",
    ""created_at"": ""2016-03-30T10:15:36Z"",
    ""updated_at"": ""2016-03-30T10:15:36Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""1f18ef5f-d6e7-482d-9106-bfeeddd35d1f"",
    ""stack_guid"": ""1f18ef5f-d6e7-482d-9106-bfeeddd35d1f"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""0a06ea85-47ab-4fd1-a654-859a1ba729df"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-30T10:15:36Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/37326bee-066a-4749-a3d4-d8c30e7ae4d0"",
    ""stack_url"": ""/v2/stacks/d47cb4f8-cd43-4950-9e90-21e83fdc02e0"",
    ""routes_url"": ""/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/routes"",
    ""events_url"": ""/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/events"",
    ""service_bindings_url"": ""/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("1f18ef5f-d6e7-482d-9106-bfeeddd35d1f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:36Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:36Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("1f18ef5f-d6e7-482d-9106-bfeeddd35d1f", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("1f18ef5f-d6e7-482d-9106-bfeeddd35d1f", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("0a06ea85-47ab-4fd1-a654-859a1ba729df", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:36Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/37326bee-066a-4749-a3d4-d8c30e7ae4d0", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/d47cb4f8-cd43-4950-9e90-21e83fdc02e0", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/11565c7c-122d-4b27-b37e-52e2a6a314c0/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void DownloadsStagedDropletForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsStagedDropletForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void DownloadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsBitsForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2494dc7d-50a0-465c-98b4-c9d4d03aeef9"",
    ""url"": ""/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4"",
    ""created_at"": ""2016-03-30T10:15:35Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""2494dc7d-50a0-465c-98b4-c9d4d03aeef9"",
    ""stack_guid"": ""2494dc7d-50a0-465c-98b4-c9d4d03aeef9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""b8b9ca3e-d125-40e7-bd8d-2ce72788f403"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1024,
      2000
    ],
    ""space_url"": ""/v2/spaces/cdf05d98-92a7-4a36-9d98-278f9d149e0c"",
    ""stack_url"": ""/v2/stacks/7862ad1c-fa6d-43dc-a388-d5448ff54cf1"",
    ""routes_url"": ""/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/routes"",
    ""events_url"": ""/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/events"",
    ""service_bindings_url"": ""/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("2494dc7d-50a0-465c-98b4-c9d4d03aeef9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2494dc7d-50a0-465c-98b4-c9d4d03aeef9", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2494dc7d-50a0-465c-98b4-c9d4d03aeef9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("b8b9ca3e-d125-40e7-bd8d-2ce72788f403", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/cdf05d98-92a7-4a36-9d98-278f9d149e0c", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/7862ad1c-fa6d-43dc-a388-d5448ff54cf1", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/b262a9ef-47bc-4432-91f9-d8d2496df7c4/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""93d11663-d2eb-4197-b1a7-cb7c06765ae2"",
    ""created_at"": ""2016-03-30T10:15:16Z"",
    ""url"": ""/v2/jobs/0db14e2e-1ff0-401e-b569-8497b83feb01""
  },
  ""entity"": {
    ""guid"": ""93d11663-d2eb-4197-b1a7-cb7c06765ae2"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("93d11663-d2eb-4197-b1a7-cb7c06765ae2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-03-30T10:15:16Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/0db14e2e-1ff0-401e-b569-8497b83feb01", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("93d11663-d2eb-4197-b1a7-cb7c06765ae2", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""af1563da-5692-4262-be8f-c76b062e6c32"",
    ""url"": ""/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0"",
    ""created_at"": ""2016-03-30T10:15:36Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""af1563da-5692-4262-be8f-c76b062e6c32"",
    ""stack_guid"": ""af1563da-5692-4262-be8f-c76b062e6c32"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""fe8f1e9f-ed52-4b10-8de6-2803cc0dddaf"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2016-03-30T10:15:35Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      8080
    ],
    ""space_url"": ""/v2/spaces/6fc0ef16-dbf7-4b91-8a14-7a22113c53d5"",
    ""stack_url"": ""/v2/stacks/7862ad1c-fa6d-43dc-a388-d5448ff54cf1"",
    ""routes_url"": ""/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/routes"",
    ""events_url"": ""/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/events"",
    ""service_bindings_url"": ""/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("af1563da-5692-4262-be8f-c76b062e6c32", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:36Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("af1563da-5692-4262-be8f-c76b062e6c32", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("af1563da-5692-4262-be8f-c76b062e6c32", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("fe8f1e9f-ed52-4b10-8de6-2803cc0dddaf", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/6fc0ef16-dbf7-4b91-8a14-7a22113c53d5", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/7862ad1c-fa6d-43dc-a388-d5448ff54cf1", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4c6d30a9-892d-4e25-a5e8-022f116101f0/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""caaeabea-3018-4c9e-8a0f-c4b4b5e1a485"",
    ""url"": ""/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07"",
    ""created_at"": ""2016-03-30T10:15:35Z"",
    ""updated_at"": ""2016-03-30T10:15:35Z""
  },
  ""entity"": {
    ""name"": ""name-2178"",
    ""production"": false,
    ""space_guid"": ""caaeabea-3018-4c9e-8a0f-c4b4b5e1a485"",
    ""stack_guid"": ""caaeabea-3018-4c9e-8a0f-c4b4b5e1a485"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""ed9af32f-fcb9-40dd-b75f-dee8d18d6c1d"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-03-30T10:15:34Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/e1bd3e48-0c35-4a6c-a984-1570c40b2f67"",
    ""stack_url"": ""/v2/stacks/a75ce73d-b964-43b1-986b-aefe8c62ec3c"",
    ""routes_url"": ""/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/routes"",
    ""events_url"": ""/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/events"",
    ""service_bindings_url"": ""/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/service_bindings"",
    ""route_mappings_url"": ""/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("caaeabea-3018-4c9e-8a0f-c4b4b5e1a485", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-30T10:15:35Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2178", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("caaeabea-3018-4c9e-8a0f-c4b4b5e1a485", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("caaeabea-3018-4c9e-8a0f-c4b4b5e1a485", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ed9af32f-fcb9-40dd-b75f-dee8d18d6c1d", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-03-30T10:15:34Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/e1bd3e48-0c35-4a6c-a984-1570c40b2f67", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/a75ce73d-b964-43b1-986b-aefe8c62ec3c", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/7f4f8b3d-cd42-465e-83e9-87b6ddf83d07/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}