//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9aa12213-5981-4d0c-bf7b-e3952bdbbccd"",
    ""url"": ""/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980"",
    ""created_at"": ""2016-07-07T09:17:02Z"",
    ""updated_at"": ""2016-07-07T09:17:02Z""
  },
  ""entity"": {
    ""name"": ""name-1683"",
    ""production"": false,
    ""space_guid"": ""9aa12213-5981-4d0c-bf7b-e3952bdbbccd"",
    ""stack_guid"": ""9aa12213-5981-4d0c-bf7b-e3952bdbbccd"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""1cc0766d-b0bf-45c2-8c6d-22c8a6b86a2b"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-07T09:17:02Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/b3781767-80cb-432b-bb6f-4e7fd14cf33c"",
    ""stack_url"": ""/v2/stacks/9deec478-913a-45dd-aee8-0760cee52ca0"",
    ""events_url"": ""/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/events"",
    ""service_bindings_url"": ""/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/service_bindings"",
    ""routes_url"": ""/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("9aa12213-5981-4d0c-bf7b-e3952bdbbccd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:02Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:02Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1683", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("9aa12213-5981-4d0c-bf7b-e3952bdbbccd", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("9aa12213-5981-4d0c-bf7b-e3952bdbbccd", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("1cc0766d-b0bf-45c2-8c6d-22c8a6b86a2b", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:02Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/b3781767-80cb-432b-bb6f-4e7fd14cf33c", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/9deec478-913a-45dd-aee8-0760cee52ca0", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/019ae84c-d7b2-484d-a9f2-eee739b66980/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8a82a780-10b7-4a40-a6f8-2aa2993763b0"",
    ""created_at"": ""2016-07-07T09:17:18Z"",
    ""url"": ""/v2/jobs/2f7711d4-f083-48a5-9ccc-aada85a20f0e""
  },
  ""entity"": {
    ""guid"": ""8a82a780-10b7-4a40-a6f8-2aa2993763b0"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("8a82a780-10b7-4a40-a6f8-2aa2993763b0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-07-07T09:17:18Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/2f7711d4-f083-48a5-9ccc-aada85a20f0e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("8a82a780-10b7-4a40-a6f8-2aa2993763b0", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9bb1c645-9b98-4ade-a954-83a48ec272f0"",
    ""url"": ""/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe"",
    ""created_at"": ""2016-07-07T09:17:01Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""9bb1c645-9b98-4ade-a954-83a48ec272f0"",
    ""stack_guid"": ""9bb1c645-9b98-4ade-a954-83a48ec272f0"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""f45cd92f-7875-4ff4-8368-56b0042819e6"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2016-07-07T09:17:01Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/993b19ef-43a5-4173-802a-296091baf354"",
    ""stack_url"": ""/v2/stacks/51ce774e-3af7-483b-bd2d-5e3d1b70b445"",
    ""events_url"": ""/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/events"",
    ""service_bindings_url"": ""/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/service_bindings"",
    ""routes_url"": ""/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("9bb1c645-9b98-4ade-a954-83a48ec272f0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("9bb1c645-9b98-4ade-a954-83a48ec272f0", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("9bb1c645-9b98-4ade-a954-83a48ec272f0", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("f45cd92f-7875-4ff4-8368-56b0042819e6", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/993b19ef-43a5-4173-802a-296091baf354", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/51ce774e-3af7-483b-bd2d-5e3d1b70b445", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/263b638a-3ba4-48f1-9ee1-32361aba01fe/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""064cd0dd-d04f-4413-95d4-355b2d53e47f"",
    ""url"": ""/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720"",
    ""created_at"": ""2016-07-07T09:17:00Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""064cd0dd-d04f-4413-95d4-355b2d53e47f"",
    ""stack_guid"": ""064cd0dd-d04f-4413-95d4-355b2d53e47f"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""ebf63e01-3998-4862-aeeb-d114d3a43c90"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1000,
      2000
    ],
    ""space_url"": ""/v2/spaces/81a0687a-3c90-4731-a1d2-b69347522cfe"",
    ""stack_url"": ""/v2/stacks/51ce774e-3af7-483b-bd2d-5e3d1b70b445"",
    ""events_url"": ""/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/events"",
    ""service_bindings_url"": ""/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/service_bindings"",
    ""routes_url"": ""/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("064cd0dd-d04f-4413-95d4-355b2d53e47f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("064cd0dd-d04f-4413-95d4-355b2d53e47f", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("064cd0dd-d04f-4413-95d4-355b2d53e47f", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ebf63e01-3998-4862-aeeb-d114d3a43c90", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/81a0687a-3c90-4731-a1d2-b69347522cfe", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/51ce774e-3af7-483b-bd2d-5e3d1b70b445", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/88e9dccb-b9ed-48a3-97ed-2a7f2a09c720/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

        [TestMethod]
        public void DownloadsStagedDropletForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsStagedDropletForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
  ""name"": ""name-1913"",
  ""routes"": [
    {
      ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
      ""host"": ""host-30"",
      ""domain"": {
        ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
        ""name"": ""domain-70.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
      ""name"": ""name-1915"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
        ""name"": ""name-1916"",
        ""service"": {
          ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
          ""label"": ""label-64"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
      ""name"": ""domain-70.example.com"",
      ""owning_organization_guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780""
    },
    {
      ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null
    },
    {
      ""guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
  ""stack_guid"": ""288652b2-3863-4da9-b08f-9aadcdbec780"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""ea3b1457-9770-4362-9793-c63424854f38"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-07-07T09:17:07Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("288652b2-3863-4da9-b08f-9aadcdbec780", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1913", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("288652b2-3863-4da9-b08f-9aadcdbec780", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("288652b2-3863-4da9-b08f-9aadcdbec780", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ea3b1457-9770-4362-9793-c63424854f38", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:07Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_id"": ""76fe22f7-f665-41ce-9a1e-f8c21be8507c"",
      ""application_version"": ""fda57efd-9561-42a5-afde-3e5819407bdc"",
      ""application_name"": ""name-1468"",
      ""application_uris"": [

      ],
      ""version"": ""fda57efd-9561-42a5-afde-3e5819407bdc"",
      ""name"": ""name-1468"",
      ""space_name"": ""name-1469"",
      ""space_id"": ""a4870688-0641-4761-8f1b-49cfd10e76b4"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""debug_ip"": null,
    ""debug_port"": null,
    ""console_ip"": null,
    ""console_port"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""url"": ""/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a"",
        ""created_at"": ""2016-07-07T09:17:00Z"",
        ""updated_at"": ""2016-07-07T09:17:00Z""
      },
      ""entity"": {
        ""name"": ""name-1553"",
        ""production"": false,
        ""space_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""stack_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""a5c87fea-1331-4f03-b2ab-a5a2d3c40e83"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-07T09:17:00Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/a8c673d5-2791-4fb7-9a2d-de8c05e41b69"",
        ""stack_url"": ""/v2/stacks/33dca8d6-ae08-432a-a9b5-1d9b53ec13b2"",
        ""events_url"": ""/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/events"",
        ""service_bindings_url"": ""/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/service_bindings"",
        ""routes_url"": ""/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""url"": ""/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8"",
        ""created_at"": ""2016-07-07T09:17:00Z"",
        ""updated_at"": ""2016-07-07T09:17:00Z""
      },
      ""entity"": {
        ""name"": ""name-1548"",
        ""production"": false,
        ""space_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""stack_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""85e60e13-2bd9-4a2d-ad95-82c20ccbd7f8"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-07T09:17:00Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/c18abba2-f512-45b6-8fd2-af21413464cd"",
        ""stack_url"": ""/v2/stacks/d37183b1-d667-4ee5-a7c0-36e015957124"",
        ""events_url"": ""/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/events"",
        ""service_bindings_url"": ""/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/service_bindings"",
        ""routes_url"": ""/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""url"": ""/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010"",
        ""created_at"": ""2016-07-07T09:17:00Z"",
        ""updated_at"": ""2016-07-07T09:17:00Z""
      },
      ""entity"": {
        ""name"": ""name-1558"",
        ""production"": false,
        ""space_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""stack_guid"": ""bb5631ca-6a96-4d1d-a77f-95d55de54341"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""c5fe9d62-aa24-4932-9f8d-4a9e1fbc7d57"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-07-07T09:17:00Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/18ab588f-530b-4670-a9a0-ab2a3a47e16d"",
        ""stack_url"": ""/v2/stacks/bd69f6c7-36b5-4f3a-86ab-631cc9cec2f2"",
        ""events_url"": ""/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/events"",
        ""service_bindings_url"": ""/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/service_bindings"",
        ""routes_url"": ""/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1553", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("a5c87fea-1331-4f03-b2ab-a5a2d3c40e83", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/a8c673d5-2791-4fb7-9a2d-de8c05e41b69", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/33dca8d6-ae08-432a-a9b5-1d9b53ec13b2", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/b337974b-4ccb-4b5c-87d6-1ea7293b930a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1548", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("85e60e13-2bd9-4a2d-ad95-82c20ccbd7f8", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Ports), true);
                Assert.AreEqual("/v2/spaces/c18abba2-f512-45b6-8fd2-af21413464cd", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/d37183b1-d667-4ee5-a7c0-36e015957124", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/dcd4e28c-1279-45fa-9638-daa139b253f8/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1558", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("bb5631ca-6a96-4d1d-a77f-95d55de54341", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("c5fe9d62-aa24-4932-9f8d-4a9e1fbc7d57", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[2].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Ports), true);
                Assert.AreEqual("/v2/spaces/18ab588f-530b-4670-a9a0-ab2a3a47e16d", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/bd69f6c7-36b5-4f3a-86ab-631cc9cec2f2", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/f4b5ad49-7224-459a-8fb5-2a85a13c3010/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3ce6476a-d42d-4404-8074-637538525e5f"",
        ""url"": ""/v2/routes/f5f1673c-03d6-48c3-93e0-cbb098543dd7"",
        ""created_at"": ""2016-07-07T09:17:02Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-25"",
        ""path"": """",
        ""domain_guid"": ""3ce6476a-d42d-4404-8074-637538525e5f"",
        ""space_guid"": ""3ce6476a-d42d-4404-8074-637538525e5f"",
        ""service_instance_guid"": null,
        ""port"": 0,
        ""domain_url"": ""/v2/domains/7d3fb969-e861-4de7-bf6d-72fdc4cda0b8"",
        ""space_url"": ""/v2/spaces/679a9388-944e-4150-9038-1bb00a0157bb"",
        ""apps_url"": ""/v2/routes/f5f1673c-03d6-48c3-93e0-cbb098543dd7/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3ce6476a-d42d-4404-8074-637538525e5f", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/f5f1673c-03d6-48c3-93e0-cbb098543dd7", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:02Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-25", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("3ce6476a-d42d-4404-8074-637538525e5f", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("3ce6476a-d42d-4404-8074-637538525e5f", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/7d3fb969-e861-4de7-bf6d-72fdc4cda0b8", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/679a9388-944e-4150-9038-1bb00a0157bb", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/f5f1673c-03d6-48c3-93e0-cbb098543dd7/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b59ab2da-6436-4dcf-ac96-6a6f1f197ea9"",
        ""url"": ""/v2/service_bindings/a25c317f-e97a-4741-96f5-a262a4b9606c"",
        ""created_at"": ""2016-07-07T09:17:01Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""b59ab2da-6436-4dcf-ac96-6a6f1f197ea9"",
        ""service_instance_guid"": ""b59ab2da-6436-4dcf-ac96-6a6f1f197ea9"",
        ""credentials"": {
          ""creds-key-307"": ""creds-val-307""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/843ef93c-563d-41d3-966f-9a9c645c3aa6"",
        ""service_instance_url"": ""/v2/service_instances/e286e2d6-dcd2-4aa1-bb66-4bc2ef6c83bf""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b59ab2da-6436-4dcf-ac96-6a6f1f197ea9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/a25c317f-e97a-4741-96f5-a262a4b9606c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("b59ab2da-6436-4dcf-ac96-6a6f1f197ea9", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("b59ab2da-6436-4dcf-ac96-6a6f1f197ea9", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/843ef93c-563d-41d3-966f-9a9c645c3aa6", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/e286e2d6-dcd2-4aa1-bb66-4bc2ef6c83bf", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Wait();

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6478c0e2-5635-4d3b-9c11-08e7bcc30f4c"",
    ""url"": ""/v2/apps/48f51f4f-4e08-4a21-b352-3ac187c46abf"",
    ""created_at"": ""2016-07-07T09:16:56Z"",
    ""updated_at"": ""2016-07-07T09:16:56Z""
  },
  ""entity"": {
    ""name"": ""name-1272"",
    ""production"": false,
    ""space_guid"": ""6478c0e2-5635-4d3b-9c11-08e7bcc30f4c"",
    ""stack_guid"": ""6478c0e2-5635-4d3b-9c11-08e7bcc30f4c"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""73613876-bd2c-4fed-9b89-7980788fa88c"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-07T09:16:56Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("6478c0e2-5635-4d3b-9c11-08e7bcc30f4c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/48f51f4f-4e08-4a21-b352-3ac187c46abf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:56Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:16:56Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1272", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("6478c0e2-5635-4d3b-9c11-08e7bcc30f4c", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("6478c0e2-5635-4d3b-9c11-08e7bcc30f4c", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("73613876-bd2c-4fed-9b89-7980788fa88c", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:16:56Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3d7e88de-35d3-47db-86f0-ae1b527e6b66"",
    ""url"": ""/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3"",
    ""created_at"": ""2016-07-07T09:17:00Z"",
    ""updated_at"": ""2016-07-07T09:17:00Z""
  },
  ""entity"": {
    ""name"": ""name-1533"",
    ""production"": false,
    ""space_guid"": ""3d7e88de-35d3-47db-86f0-ae1b527e6b66"",
    ""stack_guid"": ""3d7e88de-35d3-47db-86f0-ae1b527e6b66"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""79848366-ca34-483a-bbb1-baf31393401f"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-07T09:17:00Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/c77c3880-35a3-49f9-abb0-a562575fab31"",
    ""stack_url"": ""/v2/stacks/53d81e3e-ddbc-4e4d-8ac0-7e4b0b5498db"",
    ""events_url"": ""/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/events"",
    ""service_bindings_url"": ""/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/service_bindings"",
    ""routes_url"": ""/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("3d7e88de-35d3-47db-86f0-ae1b527e6b66", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1533", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("3d7e88de-35d3-47db-86f0-ae1b527e6b66", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("3d7e88de-35d3-47db-86f0-ae1b527e6b66", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("79848366-ca34-483a-bbb1-baf31393401f", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:00Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/c77c3880-35a3-49f9-abb0-a562575fab31", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/53d81e3e-ddbc-4e4d-8ac0-7e4b0b5498db", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4484656a-9767-4328-88c9-f63ec836d9d3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1d6ab645-5643-4ae5-b8ac-3de2e4c0f105"",
    ""url"": ""/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02"",
    ""created_at"": ""2016-07-07T09:17:01Z"",
    ""updated_at"": ""2016-07-07T09:17:01Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""1d6ab645-5643-4ae5-b8ac-3de2e4c0f105"",
    ""stack_guid"": ""1d6ab645-5643-4ae5-b8ac-3de2e4c0f105"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""cd3724f8-5f19-4200-aa2a-44e6b166f96d"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-07-07T09:17:01Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/27abe1fc-6fc2-47d0-aaeb-d25c2932ad17"",
    ""stack_url"": ""/v2/stacks/ab8d2c40-630e-417c-ba0b-0fd40aa5bd23"",
    ""events_url"": ""/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/events"",
    ""service_bindings_url"": ""/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/service_bindings"",
    ""routes_url"": ""/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("1d6ab645-5643-4ae5-b8ac-3de2e4c0f105", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("1d6ab645-5643-4ae5-b8ac-3de2e4c0f105", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("1d6ab645-5643-4ae5-b8ac-3de2e4c0f105", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("cd3724f8-5f19-4200-aa2a-44e6b166f96d", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-07-07T09:17:01Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/27abe1fc-6fc2-47d0-aaeb-d25c2932ad17", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/ab8d2c40-630e-417c-ba0b-0fd40aa5bd23", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/993cebdd-2cd6-42eb-9447-0f2827d03c02/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

    }
}