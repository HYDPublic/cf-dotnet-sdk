//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""08869a74-8879-49a2-868f-9d7ba501f9e8"",
    ""url"": ""/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8"",
    ""created_at"": ""2015-05-19T15:27:07+00:00"",
    ""updated_at"": ""2015-05-19T15:27:07+00:00""
  },
  ""entity"": {
    ""name"": ""name-316"",
    ""production"": false,
    ""space_guid"": ""4dd5f550-9295-4988-b574-7ed3d3c84226"",
    ""stack_guid"": ""3f2660a3-3c5b-4d9e-9ced-196937e15579"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""96139d7c-011c-4ec5-8ba6-6e0d43071207"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:07+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/4dd5f550-9295-4988-b574-7ed3d3c84226"",
    ""stack_url"": ""/v2/stacks/3f2660a3-3c5b-4d9e-9ced-196937e15579"",
    ""events_url"": ""/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/events"",
    ""service_bindings_url"": ""/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/service_bindings"",
    ""routes_url"": ""/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Result;


                Assert.AreEqual("08869a74-8879-49a2-868f-9d7ba501f9e8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-316", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("4dd5f550-9295-4988-b574-7ed3d3c84226", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("3f2660a3-3c5b-4d9e-9ced-196937e15579", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("96139d7c-011c-4ec5-8ba6-6e0d43071207", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/4dd5f550-9295-4988-b574-7ed3d3c84226", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/3f2660a3-3c5b-4d9e-9ced-196937e15579", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/08869a74-8879-49a2-868f-9d7ba501f9e8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""51b10a6a-c5be-4220-ab5a-adb63ab1fb1a"",
    ""url"": ""/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a"",
    ""created_at"": ""2015-05-19T15:27:06+00:00"",
    ""updated_at"": ""2015-05-19T15:27:07+00:00""
  },
  ""entity"": {
    ""name"": ""name-301"",
    ""production"": false,
    ""space_guid"": ""c4c978f5-0948-4113-995f-ff0bb2cabb08"",
    ""stack_guid"": ""38107df5-49b5-4611-8624-0c9a93962f7c"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""4ca6feb1-f8e8-4e6d-9fd5-be2b82cc6fe4"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:06+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/c4c978f5-0948-4113-995f-ff0bb2cabb08"",
    ""stack_url"": ""/v2/stacks/38107df5-49b5-4611-8624-0c9a93962f7c"",
    ""events_url"": ""/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/events"",
    ""service_bindings_url"": ""/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/service_bindings"",
    ""routes_url"": ""/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("51b10a6a-c5be-4220-ab5a-adb63ab1fb1a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-301", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("c4c978f5-0948-4113-995f-ff0bb2cabb08", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("38107df5-49b5-4611-8624-0c9a93962f7c", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("4ca6feb1-f8e8-4e6d-9fd5-be2b82cc6fe4", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/c4c978f5-0948-4113-995f-ff0bb2cabb08", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/38107df5-49b5-4611-8624-0c9a93962f7c", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/51b10a6a-c5be-4220-ab5a-adb63ab1fb1a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""40ebaf7e-d19a-4f24-9f0d-1c105563aa83"",
    ""url"": ""/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83"",
    ""created_at"": ""2015-05-19T15:27:07+00:00"",
    ""updated_at"": ""2015-05-19T15:27:07+00:00""
  },
  ""entity"": {
    ""name"": ""name-346"",
    ""production"": false,
    ""space_guid"": ""2a32b8e3-c050-447d-9fec-e1e11dc36b3a"",
    ""stack_guid"": ""fe7006c5-a6b1-4e1b-95f2-03cfef37f36e"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""0860bc97-07e9-473b-bb3a-c976cc42765e"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:07+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/2a32b8e3-c050-447d-9fec-e1e11dc36b3a"",
    ""stack_url"": ""/v2/stacks/fe7006c5-a6b1-4e1b-95f2-03cfef37f36e"",
    ""events_url"": ""/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/events"",
    ""service_bindings_url"": ""/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/service_bindings"",
    ""routes_url"": ""/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Result;


                Assert.AreEqual("40ebaf7e-d19a-4f24-9f0d-1c105563aa83", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-346", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2a32b8e3-c050-447d-9fec-e1e11dc36b3a", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("fe7006c5-a6b1-4e1b-95f2-03cfef37f36e", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("0860bc97-07e9-473b-bb3a-c976cc42765e", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/2a32b8e3-c050-447d-9fec-e1e11dc36b3a", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/fe7006c5-a6b1-4e1b-95f2-03cfef37f36e", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/40ebaf7e-d19a-4f24-9f0d-1c105563aa83/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""stats"":{""usage"":{""disk"":66392064,""mem"":29880320,""cpu"":0.13511219703079957,""time"":""2014-06-19 22:37:58 +0000""},""name"":""app_name"",""uris"":[""app_name.example.com""],""host"":""10.0.0.1"",""port"":61035,""uptime"":65007,""mem_quota"":536870912,""disk_quota"":1073741824,""fds_quota"":16384}}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""aaa297dc-83cd-4327-ade7-24268ca71c29"",
    ""created_at"": ""2015-05-19T15:27:02+00:00"",
    ""url"": ""/v2/jobs/aaa297dc-83cd-4327-ade7-24268ca71c29""
  },
  ""entity"": {
    ""guid"": ""aaa297dc-83cd-4327-ade7-24268ca71c29"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("aaa297dc-83cd-4327-ade7-24268ca71c29", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-05-19T15:27:02+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/aaa297dc-83cd-4327-ade7-24268ca71c29", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("aaa297dc-83cd-4327-ade7-24268ca71c29", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0454207c-89fb-4c23-925c-fa3806947e9b"",
        ""url"": ""/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b"",
        ""created_at"": ""2015-05-19T15:27:05+00:00"",
        ""updated_at"": ""2015-05-19T15:27:05+00:00""
      },
      ""entity"": {
        ""name"": ""name-180"",
        ""production"": false,
        ""space_guid"": ""52643bb4-047c-4e1f-9c12-58e2a200d853"",
        ""stack_guid"": ""596db198-3cac-4a41-885e-63f3eb49e4d1"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""f2fc41c5-1675-42df-80c4-432107e6a664"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-05-19T15:27:05+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/52643bb4-047c-4e1f-9c12-58e2a200d853"",
        ""stack_url"": ""/v2/stacks/596db198-3cac-4a41-885e-63f3eb49e4d1"",
        ""events_url"": ""/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/events"",
        ""service_bindings_url"": ""/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/service_bindings"",
        ""routes_url"": ""/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""5fb8b101-b5f9-4fbc-ac6d-e9439be55a18"",
        ""url"": ""/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18"",
        ""created_at"": ""2015-05-19T15:27:05+00:00"",
        ""updated_at"": ""2015-05-19T15:27:05+00:00""
      },
      ""entity"": {
        ""name"": ""name-185"",
        ""production"": false,
        ""space_guid"": ""12c85546-373c-4f83-8303-f3f4bec7fc0f"",
        ""stack_guid"": ""87d2649c-a647-409f-9ba1-f70a1b4adad4"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""158f161d-2bd4-494b-9b9b-a07470bd0f1f"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-05-19T15:27:05+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/12c85546-373c-4f83-8303-f3f4bec7fc0f"",
        ""stack_url"": ""/v2/stacks/87d2649c-a647-409f-9ba1-f70a1b4adad4"",
        ""events_url"": ""/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/events"",
        ""service_bindings_url"": ""/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/service_bindings"",
        ""routes_url"": ""/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e789f011-3505-44b8-a7e7-6e59427448ee"",
        ""url"": ""/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee"",
        ""created_at"": ""2015-05-19T15:27:05+00:00"",
        ""updated_at"": ""2015-05-19T15:27:05+00:00""
      },
      ""entity"": {
        ""name"": ""name-190"",
        ""production"": false,
        ""space_guid"": ""7de40b15-e967-4fc0-a0ff-4e26a1e3c78b"",
        ""stack_guid"": ""f8d52f00-08c8-440e-9a21-df7e2f61c104"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""8b7664b8-33dc-4cf1-a6a6-db6d9ad037fa"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-05-19T15:27:05+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/7de40b15-e967-4fc0-a0ff-4e26a1e3c78b"",
        ""stack_url"": ""/v2/stacks/f8d52f00-08c8-440e-9a21-df7e2f61c104"",
        ""events_url"": ""/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/events"",
        ""service_bindings_url"": ""/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/service_bindings"",
        ""routes_url"": ""/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0454207c-89fb-4c23-925c-fa3806947e9b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-180", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("52643bb4-047c-4e1f-9c12-58e2a200d853", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("596db198-3cac-4a41-885e-63f3eb49e4d1", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("f2fc41c5-1675-42df-80c4-432107e6a664", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/52643bb4-047c-4e1f-9c12-58e2a200d853", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/596db198-3cac-4a41-885e-63f3eb49e4d1", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0454207c-89fb-4c23-925c-fa3806947e9b/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("5fb8b101-b5f9-4fbc-ac6d-e9439be55a18", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-185", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("12c85546-373c-4f83-8303-f3f4bec7fc0f", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("87d2649c-a647-409f-9ba1-f70a1b4adad4", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("158f161d-2bd4-494b-9b9b-a07470bd0f1f", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/12c85546-373c-4f83-8303-f3f4bec7fc0f", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/87d2649c-a647-409f-9ba1-f70a1b4adad4", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/5fb8b101-b5f9-4fbc-ac6d-e9439be55a18/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("e789f011-3505-44b8-a7e7-6e59427448ee", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-190", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("7de40b15-e967-4fc0-a0ff-4e26a1e3c78b", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("f8d52f00-08c8-440e-9a21-df7e2f61c104", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("8b7664b8-33dc-4cf1-a6a6-db6d9ad037fa", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/7de40b15-e967-4fc0-a0ff-4e26a1e3c78b", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/f8d52f00-08c8-440e-9a21-df7e2f61c104", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/e789f011-3505-44b8-a7e7-6e59427448ee/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5717c672-dac2-4431-9c79-c3a42b53acfe"",
    ""url"": ""/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe"",
    ""created_at"": ""2015-05-19T15:27:05+00:00"",
    ""updated_at"": ""2015-05-19T15:27:05+00:00""
  },
  ""entity"": {
    ""name"": ""name-195"",
    ""production"": false,
    ""space_guid"": ""f508334c-bdac-4a22-a430-d1bb04b5d2b8"",
    ""stack_guid"": ""57415e4b-fe8b-48db-a093-e1b25e5b5713"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""17c78d94-ea1f-48e5-8141-10edd3f89275"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:05+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/f508334c-bdac-4a22-a430-d1bb04b5d2b8"",
    ""stack_url"": ""/v2/stacks/57415e4b-fe8b-48db-a093-e1b25e5b5713"",
    ""events_url"": ""/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/events"",
    ""service_bindings_url"": ""/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/service_bindings"",
    ""routes_url"": ""/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("5717c672-dac2-4431-9c79-c3a42b53acfe", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-195", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("f508334c-bdac-4a22-a430-d1bb04b5d2b8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("57415e4b-fe8b-48db-a093-e1b25e5b5713", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("17c78d94-ea1f-48e5-8141-10edd3f89275", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/f508334c-bdac-4a22-a430-d1bb04b5d2b8", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/57415e4b-fe8b-48db-a093-e1b25e5b5713", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/5717c672-dac2-4431-9c79-c3a42b53acfe/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7f309471-80da-4acc-9181-485f1c9d1041"",
    ""url"": ""/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041"",
    ""created_at"": ""2015-05-19T15:27:06+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""2aa270a4-568a-4861-b072-4bbb153c4a09"",
    ""stack_guid"": ""a22cb008-1cda-43c3-b7d1-e406088a2a09"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""48f92a70-bc4b-4fa9-a716-faf2975dcef0"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/2aa270a4-568a-4861-b072-4bbb153c4a09"",
    ""stack_url"": ""/v2/stacks/a22cb008-1cda-43c3-b7d1-e406088a2a09"",
    ""events_url"": ""/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/events"",
    ""service_bindings_url"": ""/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/service_bindings"",
    ""routes_url"": ""/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("7f309471-80da-4acc-9181-485f1c9d1041", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2aa270a4-568a-4861-b072-4bbb153c4a09", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("a22cb008-1cda-43c3-b7d1-e406088a2a09", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("48f92a70-bc4b-4fa9-a716-faf2975dcef0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/2aa270a4-568a-4861-b072-4bbb153c4a09", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/a22cb008-1cda-43c3-b7d1-e406088a2a09", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/7f309471-80da-4acc-9181-485f1c9d1041/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0ef6eaf7-141d-4f30-85f5-5cfb652d45ef"",
    ""url"": ""/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef"",
    ""created_at"": ""2015-05-19T15:27:06+00:00"",
    ""updated_at"": ""2015-05-19T15:27:06+00:00""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""306f1578-1e05-4146-9631-840ecb4c3577"",
    ""stack_guid"": ""1a7850ba-3127-4d90-9d14-6ad87ade0e39"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""287cc752-c0c3-463e-a048-c0c155fab90f"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:06+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/306f1578-1e05-4146-9631-840ecb4c3577"",
    ""stack_url"": ""/v2/stacks/1a7850ba-3127-4d90-9d14-6ad87ade0e39"",
    ""events_url"": ""/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/events"",
    ""service_bindings_url"": ""/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/service_bindings"",
    ""routes_url"": ""/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("0ef6eaf7-141d-4f30-85f5-5cfb652d45ef", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("306f1578-1e05-4146-9631-840ecb4c3577", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("1a7850ba-3127-4d90-9d14-6ad87ade0e39", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("287cc752-c0c3-463e-a048-c0c155fab90f", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:06+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/306f1578-1e05-4146-9631-840ecb4c3577", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/1a7850ba-3127-4d90-9d14-6ad87ade0e39", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0ef6eaf7-141d-4f30-85f5-5cfb652d45ef/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""since"":1403140717.984577,""debug_ip"":null,""debug_port"":null,""console_ip"":null,""console_port"":null}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_version"": ""0a22726b-f5b7-4985-ab3e-13e4fb15ea2a"",
      ""application_name"": ""name-414"",
      ""application_uris"": [

      ],
      ""version"": ""0a22726b-f5b7-4985-ab3e-13e4fb15ea2a"",
      ""name"": ""name-414"",
      ""space_name"": ""name-415"",
      ""space_id"": ""75de1d2c-8358-427a-8114-c4e7415ff9f2"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a3395953-2118-4a19-9e0f-e80c8ca4b5bd"",
    ""url"": ""/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd"",
    ""created_at"": ""2015-05-19T15:27:05+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""b8b3a76f-fbcb-434a-b456-3d783ae2ccf7"",
    ""stack_guid"": ""a22cb008-1cda-43c3-b7d1-e406088a2a09"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {
      ""DIEGO_STAGE_BETA"": ""true"",
      ""DIEGO_RUN_BETA"": ""true""
    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""c7ed3236-cf9c-48e2-b0c8-59e9038ee3f3"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2015-05-19T15:27:05+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/b8b3a76f-fbcb-434a-b456-3d783ae2ccf7"",
    ""stack_url"": ""/v2/stacks/a22cb008-1cda-43c3-b7d1-e406088a2a09"",
    ""events_url"": ""/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/events"",
    ""service_bindings_url"": ""/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/service_bindings"",
    ""routes_url"": ""/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("a3395953-2118-4a19-9e0f-e80c8ca4b5bd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("b8b3a76f-fbcb-434a-b456-3d783ae2ccf7", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("a22cb008-1cda-43c3-b7d1-e406088a2a09", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("c7ed3236-cf9c-48e2-b0c8-59e9038ee3f3", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/b8b3a76f-fbcb-434a-b456-3d783ae2ccf7", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/a22cb008-1cda-43c3-b7d1-e406088a2a09", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/a3395953-2118-4a19-9e0f-e80c8ca4b5bd/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d90b7c81-61d3-47d5-8d6b-d72e5c655955"",
        ""url"": ""/v2/routes/d90b7c81-61d3-47d5-8d6b-d72e5c655955"",
        ""created_at"": ""2015-05-19T15:27:07+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-6"",
        ""domain_guid"": ""8faed81e-3680-4529-bd88-89bb2271e9d6"",
        ""space_guid"": ""98afdd62-0087-4587-a514-a0b6ff12895d"",
        ""domain_url"": ""/v2/domains/8faed81e-3680-4529-bd88-89bb2271e9d6"",
        ""space_url"": ""/v2/spaces/98afdd62-0087-4587-a514-a0b6ff12895d"",
        ""apps_url"": ""/v2/routes/d90b7c81-61d3-47d5-8d6b-d72e5c655955/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d90b7c81-61d3-47d5-8d6b-d72e5c655955", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/d90b7c81-61d3-47d5-8d6b-d72e5c655955", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:07+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-6", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("8faed81e-3680-4529-bd88-89bb2271e9d6", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("98afdd62-0087-4587-a514-a0b6ff12895d", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/8faed81e-3680-4529-bd88-89bb2271e9d6", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/98afdd62-0087-4587-a514-a0b6ff12895d", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/d90b7c81-61d3-47d5-8d6b-d72e5c655955/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""939987fb-c156-43f2-9f22-3e387e4de3fc"",
        ""url"": ""/v2/service_bindings/939987fb-c156-43f2-9f22-3e387e4de3fc"",
        ""created_at"": ""2015-05-19T15:27:08+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""02c40c3e-c348-43f5-86b9-0f15516a04e4"",
        ""service_instance_guid"": ""3d199df3-034a-4a87-b00b-7b1c7a78d85c"",
        ""credentials"": {
          ""creds-key-172"": ""creds-val-172""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/02c40c3e-c348-43f5-86b9-0f15516a04e4"",
        ""service_instance_url"": ""/v2/service_instances/3d199df3-034a-4a87-b00b-7b1c7a78d85c""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("939987fb-c156-43f2-9f22-3e387e4de3fc", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/939987fb-c156-43f2-9f22-3e387e4de3fc", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:08+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("02c40c3e-c348-43f5-86b9-0f15516a04e4", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("3d199df3-034a-4a87-b00b-7b1c7a78d85c", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/02c40c3e-c348-43f5-86b9-0f15516a04e4", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/3d199df3-034a-4a87-b00b-7b1c7a78d85c", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""4d4cf7fd-2421-4f34-b6e2-0901b4ab388b"",""name"":""name-1730"",""routes"":[{""guid"":""08599d0c-092b-4d76-8e6d-1fba65db1be5"",""host"":""host-18"",""domain"":{""guid"":""977cfce7-aab2-4baf-a012-fe6ed6e6cce8"",""name"":""domain-55.example.com""}}],""running_instances"":0,""services"":[{""guid"":""e6ab2fb7-56a0-4384-9201-a6dbf4f64ef7"",""name"":""name-1732"",""bound_app_count"":1,""dashboard_url"":null,""service_plan"":{""guid"":""fe31d977-c3d7-48e1-af93-5126cdf87286"",""name"":""name-1733"",""service"":{""guid"":""21bfc018-d57c-4cf9-9545-2942360338a2"",""label"":""label-81"",""provider"":""provider-72"",""version"":""version-56""}}}],""available_domains"":[{""guid"":""977cfce7-aab2-4baf-a012-fe6ed6e6cce8"",""name"":""domain-55.example.com"",""owning_organization_guid"":""fed3892e-451a-4a7c-9a71-8c7b74270f1a""},{""guid"":""f649fd17-eec5-4402-902a-1715c9f7ec31"",""name"":""customer-app-domain1.com""},{""guid"":""f7380c81-e199-4a7d-86ec-6e1791326df3"",""name"":""customer-app-domain2.com""}],""name"":""name-1730"",""production"":false,""space_guid"":""176052f1-bad6-4bed-8715-4565c717c8f8"",""stack_guid"":""2bba5bac-b4b8-4e43-b45b-461ab2c45015"",""buildpack"":null,""detected_buildpack"":null,""environment_json"":null,""memory"":1024,""instances"":1,""disk_quota"":1024,""state"":""STOPPED"",""version"":""1efd801a-7f7a-4cc4-a509-d568038b6e4e"",""command"":null,""console"":false,""debug"":null,""staging_task_id"":null,""package_state"":""PENDING"",""health_check_type"":""port"",""health_check_timeout"":null,""staging_failed_reason"":null,""docker_image"":null,""package_updated_at"":""2015-05-19T15:27:22+00:00"",""detected_start_command"":""""}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("4d4cf7fd-2421-4f34-b6e2-0901b4ab388b", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1730", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("176052f1-bad6-4bed-8715-4565c717c8f8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2bba5bac-b4b8-4e43-b45b-461ab2c45015", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("1efd801a-7f7a-4cc4-a509-d568038b6e4e", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:22+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0c028792-2926-496f-9fe0-b3ee75fc131e"",
    ""url"": ""/v2/apps/0c028792-2926-496f-9fe0-b3ee75fc131e"",
    ""created_at"": ""2015-05-19T15:27:25+00:00"",
    ""updated_at"": ""2015-05-19T15:27:25+00:00""
  },
  ""entity"": {
    ""name"": ""name-1934"",
    ""production"": false,
    ""space_guid"": ""b7428ce6-b841-4f8a-876a-2ade0166c4d1"",
    ""stack_guid"": ""d336394a-089f-4cab-805f-e7f724994e26"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""a7ae4ad2-ea7c-4d33-8f16-904c6f486a48"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-05-19T15:27:25+00:00"",
    ""detected_start_command"": """"
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("0c028792-2926-496f-9fe0-b3ee75fc131e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0c028792-2926-496f-9fe0-b3ee75fc131e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:25+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-05-19T15:27:25+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1934", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("b7428ce6-b841-4f8a-876a-2ade0166c4d1", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("d336394a-089f-4cab-805f-e7f724994e26", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("a7ae4ad2-ea7c-4d33-8f16-904c6f486a48", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-05-19T15:27:25+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}