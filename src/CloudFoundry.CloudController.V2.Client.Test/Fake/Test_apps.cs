//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0d91eac0-6997-4911-b4ed-d2f34cf02adc"",
    ""url"": ""/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc"",
    ""created_at"": ""2015-04-10T20:04:23+00:00"",
    ""updated_at"": ""2015-04-10T20:04:23+00:00""
  },
  ""entity"": {
    ""name"": ""name-171"",
    ""production"": false,
    ""space_guid"": ""67c5ffa5-3b59-4ca3-9a1b-b00759427b39"",
    ""stack_guid"": ""f4e27833-f0ee-401a-8ffc-8b66754841a1"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""83d040f0-2608-414b-b612-449da90b88a2"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:23+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/67c5ffa5-3b59-4ca3-9a1b-b00759427b39"",
    ""stack_url"": ""/v2/stacks/f4e27833-f0ee-401a-8ffc-8b66754841a1"",
    ""events_url"": ""/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/events"",
    ""service_bindings_url"": ""/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/service_bindings"",
    ""routes_url"": ""/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Result;


                Assert.AreEqual("0d91eac0-6997-4911-b4ed-d2f34cf02adc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-171", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("67c5ffa5-3b59-4ca3-9a1b-b00759427b39", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("f4e27833-f0ee-401a-8ffc-8b66754841a1", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("83d040f0-2608-414b-b612-449da90b88a2", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/67c5ffa5-3b59-4ca3-9a1b-b00759427b39", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/f4e27833-f0ee-401a-8ffc-8b66754841a1", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/0d91eac0-6997-4911-b4ed-d2f34cf02adc/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""afbf26c1-8394-4f58-a867-fc995c4b69e8"",
    ""url"": ""/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8"",
    ""created_at"": ""2015-04-10T20:04:23+00:00"",
    ""updated_at"": ""2015-04-10T20:04:23+00:00""
  },
  ""entity"": {
    ""name"": ""name-156"",
    ""production"": false,
    ""space_guid"": ""ab02458d-2550-4a2f-a0a2-6cc82870f250"",
    ""stack_guid"": ""b8802d1c-b38f-45ed-9228-e214763d8caa"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""a11c72cf-f041-4894-bfb0-7ae43e06821d"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:23+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/ab02458d-2550-4a2f-a0a2-6cc82870f250"",
    ""stack_url"": ""/v2/stacks/b8802d1c-b38f-45ed-9228-e214763d8caa"",
    ""events_url"": ""/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/events"",
    ""service_bindings_url"": ""/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/service_bindings"",
    ""routes_url"": ""/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("afbf26c1-8394-4f58-a867-fc995c4b69e8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-156", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("ab02458d-2550-4a2f-a0a2-6cc82870f250", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("b8802d1c-b38f-45ed-9228-e214763d8caa", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("a11c72cf-f041-4894-bfb0-7ae43e06821d", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/ab02458d-2550-4a2f-a0a2-6cc82870f250", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/b8802d1c-b38f-45ed-9228-e214763d8caa", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/afbf26c1-8394-4f58-a867-fc995c4b69e8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5e000612-82cc-43b7-b020-8b2175fc0c6d"",
    ""url"": ""/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d"",
    ""created_at"": ""2015-04-10T20:04:23+00:00"",
    ""updated_at"": ""2015-04-10T20:04:23+00:00""
  },
  ""entity"": {
    ""name"": ""name-191"",
    ""production"": false,
    ""space_guid"": ""b5e6811a-ec24-4aab-8fb1-8478aac60573"",
    ""stack_guid"": ""2d932c9f-481b-4102-9b0d-ff3a396e2041"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""ef8f4207-7a02-4dd1-8f6f-0ef4abe68ef5"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:23+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/b5e6811a-ec24-4aab-8fb1-8478aac60573"",
    ""stack_url"": ""/v2/stacks/2d932c9f-481b-4102-9b0d-ff3a396e2041"",
    ""events_url"": ""/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/events"",
    ""service_bindings_url"": ""/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/service_bindings"",
    ""routes_url"": ""/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Result;


                Assert.AreEqual("5e000612-82cc-43b7-b020-8b2175fc0c6d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-191", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("b5e6811a-ec24-4aab-8fb1-8478aac60573", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2d932c9f-481b-4102-9b0d-ff3a396e2041", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ef8f4207-7a02-4dd1-8f6f-0ef4abe68ef5", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/b5e6811a-ec24-4aab-8fb1-8478aac60573", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/2d932c9f-481b-4102-9b0d-ff3a396e2041", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/5e000612-82cc-43b7-b020-8b2175fc0c6d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""stats"":{""usage"":{""disk"":66392064,""mem"":29880320,""cpu"":0.13511219703079957,""time"":""2014-06-19 22:37:58 +0000""},""name"":""app_name"",""uris"":[""app_name.example.com""],""host"":""10.0.0.1"",""port"":61035,""uptime"":65007,""mem_quota"":536870912,""disk_quota"":1073741824,""fds_quota"":16384}}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""99d01985-6ca2-4775-986b-f8efd8ab60d7"",
    ""created_at"": ""2015-04-10T20:04:40+00:00"",
    ""url"": ""/v2/jobs/99d01985-6ca2-4775-986b-f8efd8ab60d7""
  },
  ""entity"": {
    ""guid"": ""99d01985-6ca2-4775-986b-f8efd8ab60d7"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("99d01985-6ca2-4775-986b-f8efd8ab60d7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-04-10T20:04:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/99d01985-6ca2-4775-986b-f8efd8ab60d7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("99d01985-6ca2-4775-986b-f8efd8ab60d7", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4885d621-306c-465d-ae79-e0aab26d072a"",
        ""url"": ""/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a"",
        ""created_at"": ""2015-04-10T20:04:21+00:00"",
        ""updated_at"": ""2015-04-10T20:04:21+00:00""
      },
      ""entity"": {
        ""name"": ""name-50"",
        ""production"": false,
        ""space_guid"": ""8510e5b9-9cc9-4849-837a-900df831f13a"",
        ""stack_guid"": ""32d745ac-4ea9-4406-938b-665679395d20"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""77c34b39-80eb-45ae-9586-d84b5f924953"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-10T20:04:21+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/8510e5b9-9cc9-4849-837a-900df831f13a"",
        ""stack_url"": ""/v2/stacks/32d745ac-4ea9-4406-938b-665679395d20"",
        ""events_url"": ""/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/events"",
        ""service_bindings_url"": ""/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/service_bindings"",
        ""routes_url"": ""/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8acf038c-5c7b-4c60-9172-a1861ff1119c"",
        ""url"": ""/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c"",
        ""created_at"": ""2015-04-10T20:04:21+00:00"",
        ""updated_at"": ""2015-04-10T20:04:21+00:00""
      },
      ""entity"": {
        ""name"": ""name-45"",
        ""production"": false,
        ""space_guid"": ""3d476084-1bcc-4ada-b677-035536d7708b"",
        ""stack_guid"": ""216a1219-5f35-4d1d-9ee3-e31a3b7cc37d"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""c2691251-99a9-444f-8872-13a6099a422c"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-10T20:04:21+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/3d476084-1bcc-4ada-b677-035536d7708b"",
        ""stack_url"": ""/v2/stacks/216a1219-5f35-4d1d-9ee3-e31a3b7cc37d"",
        ""events_url"": ""/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/events"",
        ""service_bindings_url"": ""/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/service_bindings"",
        ""routes_url"": ""/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""b1712f5e-e634-436c-8800-22908217be8d"",
        ""url"": ""/v2/apps/b1712f5e-e634-436c-8800-22908217be8d"",
        ""created_at"": ""2015-04-10T20:04:21+00:00"",
        ""updated_at"": ""2015-04-10T20:04:21+00:00""
      },
      ""entity"": {
        ""name"": ""name-40"",
        ""production"": false,
        ""space_guid"": ""ff2c12d7-2cb0-44b6-81e0-e292b1ef4807"",
        ""stack_guid"": ""7ff19bbf-b959-4d40-bd25-87c6f1f6ea6d"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""9488116d-0598-4519-8a4b-76c909de5991"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-10T20:04:21+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/ff2c12d7-2cb0-44b6-81e0-e292b1ef4807"",
        ""stack_url"": ""/v2/stacks/7ff19bbf-b959-4d40-bd25-87c6f1f6ea6d"",
        ""events_url"": ""/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/events"",
        ""service_bindings_url"": ""/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/service_bindings"",
        ""routes_url"": ""/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4885d621-306c-465d-ae79-e0aab26d072a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-50", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("8510e5b9-9cc9-4849-837a-900df831f13a", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("32d745ac-4ea9-4406-938b-665679395d20", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("77c34b39-80eb-45ae-9586-d84b5f924953", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/8510e5b9-9cc9-4849-837a-900df831f13a", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/32d745ac-4ea9-4406-938b-665679395d20", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4885d621-306c-465d-ae79-e0aab26d072a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("8acf038c-5c7b-4c60-9172-a1861ff1119c", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-45", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("3d476084-1bcc-4ada-b677-035536d7708b", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("216a1219-5f35-4d1d-9ee3-e31a3b7cc37d", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("c2691251-99a9-444f-8872-13a6099a422c", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/3d476084-1bcc-4ada-b677-035536d7708b", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/216a1219-5f35-4d1d-9ee3-e31a3b7cc37d", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/8acf038c-5c7b-4c60-9172-a1861ff1119c/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("b1712f5e-e634-436c-8800-22908217be8d", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/b1712f5e-e634-436c-8800-22908217be8d", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-40", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("ff2c12d7-2cb0-44b6-81e0-e292b1ef4807", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("7ff19bbf-b959-4d40-bd25-87c6f1f6ea6d", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("9488116d-0598-4519-8a4b-76c909de5991", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/ff2c12d7-2cb0-44b6-81e0-e292b1ef4807", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/7ff19bbf-b959-4d40-bd25-87c6f1f6ea6d", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/b1712f5e-e634-436c-8800-22908217be8d/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8898615f-f139-463c-b610-590a36eb3fe3"",
    ""url"": ""/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3"",
    ""created_at"": ""2015-04-10T20:04:21+00:00"",
    ""updated_at"": ""2015-04-10T20:04:21+00:00""
  },
  ""entity"": {
    ""name"": ""name-65"",
    ""production"": false,
    ""space_guid"": ""3cb545f0-e77e-481a-9526-e5fefb64589a"",
    ""stack_guid"": ""c902115a-2204-44c2-97de-5a01925a72b8"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""d4cafeb1-d860-416c-8556-284e1a87acec"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:21+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/3cb545f0-e77e-481a-9526-e5fefb64589a"",
    ""stack_url"": ""/v2/stacks/c902115a-2204-44c2-97de-5a01925a72b8"",
    ""events_url"": ""/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/events"",
    ""service_bindings_url"": ""/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/service_bindings"",
    ""routes_url"": ""/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("8898615f-f139-463c-b610-590a36eb3fe3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-65", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("3cb545f0-e77e-481a-9526-e5fefb64589a", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("c902115a-2204-44c2-97de-5a01925a72b8", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("d4cafeb1-d860-416c-8556-284e1a87acec", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/3cb545f0-e77e-481a-9526-e5fefb64589a", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/c902115a-2204-44c2-97de-5a01925a72b8", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/8898615f-f139-463c-b610-590a36eb3fe3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""71347fb7-df33-474a-8d9f-5f02bc9742a2"",
    ""url"": ""/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2"",
    ""created_at"": ""2015-04-10T20:04:22+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""fb597bff-5298-4f2d-9c48-f36fb6ac9d1b"",
    ""stack_guid"": ""2937d269-6d66-492e-abd4-e2bc021bbe78"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""4384e861-7b38-4f87-96fc-5d1932d05a67"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/fb597bff-5298-4f2d-9c48-f36fb6ac9d1b"",
    ""stack_url"": ""/v2/stacks/2937d269-6d66-492e-abd4-e2bc021bbe78"",
    ""events_url"": ""/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/events"",
    ""service_bindings_url"": ""/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/service_bindings"",
    ""routes_url"": ""/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("71347fb7-df33-474a-8d9f-5f02bc9742a2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:22+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("fb597bff-5298-4f2d-9c48-f36fb6ac9d1b", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2937d269-6d66-492e-abd4-e2bc021bbe78", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("4384e861-7b38-4f87-96fc-5d1932d05a67", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/fb597bff-5298-4f2d-9c48-f36fb6ac9d1b", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/2937d269-6d66-492e-abd4-e2bc021bbe78", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/71347fb7-df33-474a-8d9f-5f02bc9742a2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d"",
    ""url"": ""/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d"",
    ""created_at"": ""2015-04-10T20:04:21+00:00"",
    ""updated_at"": ""2015-04-10T20:04:22+00:00""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""39a87f2c-3e80-487d-9d4c-051590013c30"",
    ""stack_guid"": ""3366f69a-c043-4315-a41d-92da1fe149a8"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""2ee20ed7-d0c7-4ee9-9af3-aa0fd00f7333"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:21+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/39a87f2c-3e80-487d-9d4c-051590013c30"",
    ""stack_url"": ""/v2/stacks/3366f69a-c043-4315-a41d-92da1fe149a8"",
    ""events_url"": ""/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/events"",
    ""service_bindings_url"": ""/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/service_bindings"",
    ""routes_url"": ""/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:22+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("39a87f2c-3e80-487d-9d4c-051590013c30", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("3366f69a-c043-4315-a41d-92da1fe149a8", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("2ee20ed7-d0c7-4ee9-9af3-aa0fd00f7333", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:21+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/39a87f2c-3e80-487d-9d4c-051590013c30", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/3366f69a-c043-4315-a41d-92da1fe149a8", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/00d0ee8a-dedd-4d1e-81ac-67d5ba5b629d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""since"":1403140717.984577,""debug_ip"":null,""debug_port"":null,""console_ip"":null,""console_port"":null}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_version"": ""a31fb0cf-0d7f-4b77-a598-b66ceb37c160"",
      ""application_name"": ""name-294"",
      ""application_uris"": [

      ],
      ""version"": ""a31fb0cf-0d7f-4b77-a598-b66ceb37c160"",
      ""name"": ""name-294"",
      ""space_name"": ""name-295"",
      ""space_id"": ""4d979c64-15f0-4d3c-a941-62705968a263"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e3373457-0a04-43c3-bb1e-17568ea7648a"",
    ""url"": ""/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a"",
    ""created_at"": ""2015-04-10T20:04:22+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""6f802428-714e-4d2d-a415-f252a8e4c721"",
    ""stack_guid"": ""2937d269-6d66-492e-abd4-e2bc021bbe78"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {
      ""DIEGO_STAGE_BETA"": ""true"",
      ""DIEGO_RUN_BETA"": ""true""
    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""ee68ce0e-a872-493f-86fc-83d25215dad5"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2015-04-10T20:04:22+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/6f802428-714e-4d2d-a415-f252a8e4c721"",
    ""stack_url"": ""/v2/stacks/2937d269-6d66-492e-abd4-e2bc021bbe78"",
    ""events_url"": ""/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/events"",
    ""service_bindings_url"": ""/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/service_bindings"",
    ""routes_url"": ""/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("e3373457-0a04-43c3-bb1e-17568ea7648a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:22+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("6f802428-714e-4d2d-a415-f252a8e4c721", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("2937d269-6d66-492e-abd4-e2bc021bbe78", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("ee68ce0e-a872-493f-86fc-83d25215dad5", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:22+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/6f802428-714e-4d2d-a415-f252a8e4c721", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/2937d269-6d66-492e-abd4-e2bc021bbe78", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/e3373457-0a04-43c3-bb1e-17568ea7648a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d4ba1222-3658-4405-8915-ab9a8637ec9b"",
        ""url"": ""/v2/routes/d4ba1222-3658-4405-8915-ab9a8637ec9b"",
        ""created_at"": ""2015-04-10T20:04:23+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-1"",
        ""domain_guid"": ""416eb626-2f5c-4038-bcb7-3e2eaed364ea"",
        ""space_guid"": ""c4518672-d684-45ff-8df8-396b3109af73"",
        ""domain_url"": ""/v2/domains/416eb626-2f5c-4038-bcb7-3e2eaed364ea"",
        ""space_url"": ""/v2/spaces/c4518672-d684-45ff-8df8-396b3109af73"",
        ""apps_url"": ""/v2/routes/d4ba1222-3658-4405-8915-ab9a8637ec9b/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d4ba1222-3658-4405-8915-ab9a8637ec9b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/d4ba1222-3658-4405-8915-ab9a8637ec9b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:23+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-1", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("416eb626-2f5c-4038-bcb7-3e2eaed364ea", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("c4518672-d684-45ff-8df8-396b3109af73", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/416eb626-2f5c-4038-bcb7-3e2eaed364ea", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/c4518672-d684-45ff-8df8-396b3109af73", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/d4ba1222-3658-4405-8915-ab9a8637ec9b/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""53066931-01ef-4891-a58a-0d6483c72a6b"",
        ""url"": ""/v2/service_bindings/53066931-01ef-4891-a58a-0d6483c72a6b"",
        ""created_at"": ""2015-04-10T20:04:24+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""55156cef-eb6a-4ccc-bcca-c44c3245bca7"",
        ""service_instance_guid"": ""9848ca3b-4ef3-428a-bcb7-f7e1d3ade25b"",
        ""credentials"": {
          ""creds-key-50"": ""creds-val-50""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/55156cef-eb6a-4ccc-bcca-c44c3245bca7"",
        ""service_instance_url"": ""/v2/service_instances/9848ca3b-4ef3-428a-bcb7-f7e1d3ade25b""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("53066931-01ef-4891-a58a-0d6483c72a6b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/53066931-01ef-4891-a58a-0d6483c72a6b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:24+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("55156cef-eb6a-4ccc-bcca-c44c3245bca7", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("9848ca3b-4ef3-428a-bcb7-f7e1d3ade25b", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/55156cef-eb6a-4ccc-bcca-c44c3245bca7", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/9848ca3b-4ef3-428a-bcb7-f7e1d3ade25b", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""c809135f-2f74-4155-8818-135fc5398674"",""name"":""name-1690"",""routes"":[{""guid"":""64b0d06b-5e6e-4a57-b966-a6b40cf2d6de"",""host"":""host-8"",""domain"":{""guid"":""2d035c5c-1640-4c50-bef8-82e99768411b"",""name"":""domain-44.example.com""}}],""running_instances"":0,""services"":[{""guid"":""29cda6ff-1d15-41c4-b706-41b1c5ea5bf7"",""name"":""name-1692"",""bound_app_count"":1,""dashboard_url"":null,""service_plan"":{""guid"":""b5d773f0-32c7-49c8-bf96-34fe555f87d1"",""name"":""name-1693"",""service"":{""guid"":""aadcd273-8d5f-424d-bee6-46261ad281ce"",""label"":""label-63"",""provider"":""provider-54"",""version"":""version-54""}}}],""available_domains"":[{""guid"":""2d035c5c-1640-4c50-bef8-82e99768411b"",""name"":""domain-44.example.com"",""owning_organization_guid"":""77c3fa79-a024-46fb-b750-4b0ce26c647e""},{""guid"":""8c827319-3606-4bae-9e9b-6816cde64a57"",""name"":""customer-app-domain1.com""},{""guid"":""d616b632-3803-400c-b732-46a3709542fc"",""name"":""customer-app-domain2.com""}],""name"":""name-1690"",""production"":false,""space_guid"":""79dc95c5-b4cd-4a6f-918c-ecd0df5c35db"",""stack_guid"":""b34c10a2-fb1f-4410-b504-04fae79081bb"",""buildpack"":null,""detected_buildpack"":null,""environment_json"":null,""memory"":1024,""instances"":1,""disk_quota"":1024,""state"":""STOPPED"",""version"":""7689ce56-ebd3-4a4e-b099-bee8e3cbefb7"",""command"":null,""console"":false,""debug"":null,""staging_task_id"":null,""package_state"":""PENDING"",""health_check_type"":""port"",""health_check_timeout"":null,""staging_failed_reason"":null,""docker_image"":null,""package_updated_at"":""2015-04-10T20:04:40+00:00"",""detected_start_command"":""""}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("c809135f-2f74-4155-8818-135fc5398674", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1690", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("79dc95c5-b4cd-4a6f-918c-ecd0df5c35db", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("b34c10a2-fb1f-4410-b504-04fae79081bb", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("7689ce56-ebd3-4a4e-b099-bee8e3cbefb7", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:40+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ec8535c1-66d8-4511-a95f-41edf566da42"",
    ""url"": ""/v2/apps/ec8535c1-66d8-4511-a95f-41edf566da42"",
    ""created_at"": ""2015-04-10T20:04:40+00:00"",
    ""updated_at"": ""2015-04-10T20:04:40+00:00""
  },
  ""entity"": {
    ""name"": ""name-1665"",
    ""production"": false,
    ""space_guid"": ""5c96c39e-1ef5-4516-b318-289d15659556"",
    ""stack_guid"": ""a38b95c5-a94b-4931-beb8-2775b724a45c"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""af65338e-1bc2-42d3-8692-44bd0454ad38"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-10T20:04:40+00:00"",
    ""detected_start_command"": """"
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("ec8535c1-66d8-4511-a95f-41edf566da42", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/ec8535c1-66d8-4511-a95f-41edf566da42", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1665", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("5c96c39e-1ef5-4516-b318-289d15659556", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("a38b95c5-a94b-4931-beb8-2775b724a45c", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("af65338e-1bc2-42d3-8692-44bd0454ad38", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:40+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}