//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""140857ae-32d3-4b1e-a235-2ec195e7c864"",
    ""url"": ""/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864"",
    ""created_at"": ""2015-04-16T12:04:34+00:00"",
    ""updated_at"": ""2015-04-16T12:04:34+00:00""
  },
  ""entity"": {
    ""name"": ""name-1677"",
    ""production"": false,
    ""space_guid"": ""bf7f9a70-c69c-41df-aba4-9446ea36e52a"",
    ""stack_guid"": ""e0c4749f-a015-4bb6-a0ab-b5f583d85c98"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""6b698f63-4811-4f5d-8b2f-9432758996b4"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:34+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/bf7f9a70-c69c-41df-aba4-9446ea36e52a"",
    ""stack_url"": ""/v2/stacks/e0c4749f-a015-4bb6-a0ab-b5f583d85c98"",
    ""events_url"": ""/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/events"",
    ""service_bindings_url"": ""/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/service_bindings"",
    ""routes_url"": ""/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Result;


                Assert.AreEqual("140857ae-32d3-4b1e-a235-2ec195e7c864", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1677", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("bf7f9a70-c69c-41df-aba4-9446ea36e52a", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("e0c4749f-a015-4bb6-a0ab-b5f583d85c98", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("6b698f63-4811-4f5d-8b2f-9432758996b4", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/bf7f9a70-c69c-41df-aba4-9446ea36e52a", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e0c4749f-a015-4bb6-a0ab-b5f583d85c98", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/140857ae-32d3-4b1e-a235-2ec195e7c864/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a"",
    ""url"": ""/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a"",
    ""created_at"": ""2015-04-16T12:04:34+00:00"",
    ""updated_at"": ""2015-04-16T12:04:35+00:00""
  },
  ""entity"": {
    ""name"": ""name-1692"",
    ""production"": false,
    ""space_guid"": ""f280c6ce-ad3b-42a4-b6e3-4d73ca1b4269"",
    ""stack_guid"": ""e48c2fe0-f87a-47b5-9eb6-8046e2a53dde"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""54d830b9-6112-45c5-a515-425e1becc193"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:34+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/f280c6ce-ad3b-42a4-b6e3-4d73ca1b4269"",
    ""stack_url"": ""/v2/stacks/e48c2fe0-f87a-47b5-9eb6-8046e2a53dde"",
    ""events_url"": ""/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/events"",
    ""service_bindings_url"": ""/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/service_bindings"",
    ""routes_url"": ""/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1692", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("f280c6ce-ad3b-42a4-b6e3-4d73ca1b4269", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("e48c2fe0-f87a-47b5-9eb6-8046e2a53dde", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("54d830b9-6112-45c5-a515-425e1becc193", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/f280c6ce-ad3b-42a4-b6e3-4d73ca1b4269", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e48c2fe0-f87a-47b5-9eb6-8046e2a53dde", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/1a6d55a9-4ebd-4baa-a599-0d7cda5bb42a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3b7f7397-4595-4baf-a407-08a545529ac2"",
    ""url"": ""/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2"",
    ""created_at"": ""2015-04-16T12:04:34+00:00"",
    ""updated_at"": ""2015-04-16T12:04:34+00:00""
  },
  ""entity"": {
    ""name"": ""name-1648"",
    ""production"": false,
    ""space_guid"": ""109c6987-4349-410f-979a-858c6b5d0eb8"",
    ""stack_guid"": ""65fc3897-5f40-4723-9450-24b7482cb712"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""d51a3844-0fed-4cca-acdc-62f8d39c2aa6"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:34+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/109c6987-4349-410f-979a-858c6b5d0eb8"",
    ""stack_url"": ""/v2/stacks/65fc3897-5f40-4723-9450-24b7482cb712"",
    ""events_url"": ""/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/events"",
    ""service_bindings_url"": ""/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/service_bindings"",
    ""routes_url"": ""/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                var obj = cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Result;


                Assert.AreEqual("3b7f7397-4595-4baf-a407-08a545529ac2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1648", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("109c6987-4349-410f-979a-858c6b5d0eb8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("65fc3897-5f40-4723-9450-24b7482cb712", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("d51a3844-0fed-4cca-acdc-62f8d39c2aa6", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/109c6987-4349-410f-979a-858c6b5d0eb8", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/65fc3897-5f40-4723-9450-24b7482cb712", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/3b7f7397-4595-4baf-a407-08a545529ac2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""stats"":{""usage"":{""disk"":66392064,""mem"":29880320,""cpu"":0.13511219703079957,""time"":""2014-06-19 22:37:58 +0000""},""name"":""app_name"",""uris"":[""app_name.example.com""],""host"":""10.0.0.1"",""port"":61035,""uptime"":65007,""mem_quota"":536870912,""disk_quota"":1073741824,""fds_quota"":16384}}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""16c71ccf-1dc1-4245-8f1b-6bcb94beb081"",
    ""created_at"": ""2015-04-16T12:04:16+00:00"",
    ""url"": ""/v2/jobs/16c71ccf-1dc1-4245-8f1b-6bcb94beb081""
  },
  ""entity"": {
    ""guid"": ""16c71ccf-1dc1-4245-8f1b-6bcb94beb081"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("16c71ccf-1dc1-4245-8f1b-6bcb94beb081", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2015-04-16T12:04:16+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/16c71ccf-1dc1-4245-8f1b-6bcb94beb081", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("16c71ccf-1dc1-4245-8f1b-6bcb94beb081", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""226bdc88-6ebc-4c15-8088-fc74f0838b35"",
        ""url"": ""/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35"",
        ""created_at"": ""2015-04-16T12:04:32+00:00"",
        ""updated_at"": ""2015-04-16T12:04:32+00:00""
      },
      ""entity"": {
        ""name"": ""name-1488"",
        ""production"": false,
        ""space_guid"": ""0b95f27b-5478-400e-9b94-74c8e7901e40"",
        ""stack_guid"": ""984bdfaf-7a2e-48c1-aa1f-ee2b67c5ff4c"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""1c4fa924-0e9c-4b5d-873b-1f3c84adffe7"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-16T12:04:31+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/0b95f27b-5478-400e-9b94-74c8e7901e40"",
        ""stack_url"": ""/v2/stacks/984bdfaf-7a2e-48c1-aa1f-ee2b67c5ff4c"",
        ""events_url"": ""/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/events"",
        ""service_bindings_url"": ""/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/service_bindings"",
        ""routes_url"": ""/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""3e9fff8b-aa62-4165-ae0c-0155a29600ef"",
        ""url"": ""/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef"",
        ""created_at"": ""2015-04-16T12:04:32+00:00"",
        ""updated_at"": ""2015-04-16T12:04:32+00:00""
      },
      ""entity"": {
        ""name"": ""name-1498"",
        ""production"": false,
        ""space_guid"": ""46c8b982-e3db-41b4-bb18-e3dde75a40f7"",
        ""stack_guid"": ""833dec3b-486c-42e9-a486-198488ca42bd"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""45446c3a-76a1-43c0-81ad-fe7f7982c5e7"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-16T12:04:32+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/46c8b982-e3db-41b4-bb18-e3dde75a40f7"",
        ""stack_url"": ""/v2/stacks/833dec3b-486c-42e9-a486-198488ca42bd"",
        ""events_url"": ""/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/events"",
        ""service_bindings_url"": ""/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/service_bindings"",
        ""routes_url"": ""/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""aacc8f6f-0406-4b3b-975e-c7452a293038"",
        ""url"": ""/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038"",
        ""created_at"": ""2015-04-16T12:04:32+00:00"",
        ""updated_at"": ""2015-04-16T12:04:32+00:00""
      },
      ""entity"": {
        ""name"": ""name-1493"",
        ""production"": false,
        ""space_guid"": ""451a8522-78f0-4f38-b5eb-0b630115b43e"",
        ""stack_guid"": ""16800d51-95f0-42f2-bb9b-652d6dc309b1"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""9793e467-6918-40aa-bc4a-71a156f54287"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-16T12:04:32+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/451a8522-78f0-4f38-b5eb-0b630115b43e"",
        ""stack_url"": ""/v2/stacks/16800d51-95f0-42f2-bb9b-652d6dc309b1"",
        ""events_url"": ""/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/events"",
        ""service_bindings_url"": ""/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/service_bindings"",
        ""routes_url"": ""/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("226bdc88-6ebc-4c15-8088-fc74f0838b35", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1488", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("0b95f27b-5478-400e-9b94-74c8e7901e40", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("984bdfaf-7a2e-48c1-aa1f-ee2b67c5ff4c", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("1c4fa924-0e9c-4b5d-873b-1f3c84adffe7", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:31+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/0b95f27b-5478-400e-9b94-74c8e7901e40", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/984bdfaf-7a2e-48c1-aa1f-ee2b67c5ff4c", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/226bdc88-6ebc-4c15-8088-fc74f0838b35/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("3e9fff8b-aa62-4165-ae0c-0155a29600ef", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1498", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("46c8b982-e3db-41b4-bb18-e3dde75a40f7", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("833dec3b-486c-42e9-a486-198488ca42bd", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("45446c3a-76a1-43c0-81ad-fe7f7982c5e7", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/46c8b982-e3db-41b4-bb18-e3dde75a40f7", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/833dec3b-486c-42e9-a486-198488ca42bd", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/3e9fff8b-aa62-4165-ae0c-0155a29600ef/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("aacc8f6f-0406-4b3b-975e-c7452a293038", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1493", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("451a8522-78f0-4f38-b5eb-0b630115b43e", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("16800d51-95f0-42f2-bb9b-652d6dc309b1", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("9793e467-6918-40aa-bc4a-71a156f54287", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/451a8522-78f0-4f38-b5eb-0b630115b43e", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/16800d51-95f0-42f2-bb9b-652d6dc309b1", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/aacc8f6f-0406-4b3b-975e-c7452a293038/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""13b2bef4-b07d-4969-a5a0-44896dd72cb4"",
    ""url"": ""/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4"",
    ""created_at"": ""2015-04-16T12:04:32+00:00"",
    ""updated_at"": ""2015-04-16T12:04:32+00:00""
  },
  ""entity"": {
    ""name"": ""name-1533"",
    ""production"": false,
    ""space_guid"": ""bc8ef413-1741-4875-9771-fb1bf3786188"",
    ""stack_guid"": ""97baf4a3-5899-4f35-8cbf-57bfca9912e9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""98777955-0994-45a5-abbe-147497a008c6"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:32+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/bc8ef413-1741-4875-9771-fb1bf3786188"",
    ""stack_url"": ""/v2/stacks/97baf4a3-5899-4f35-8cbf-57bfca9912e9"",
    ""events_url"": ""/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/events"",
    ""service_bindings_url"": ""/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/service_bindings"",
    ""routes_url"": ""/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("13b2bef4-b07d-4969-a5a0-44896dd72cb4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1533", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("bc8ef413-1741-4875-9771-fb1bf3786188", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("97baf4a3-5899-4f35-8cbf-57bfca9912e9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("98777955-0994-45a5-abbe-147497a008c6", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/bc8ef413-1741-4875-9771-fb1bf3786188", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/97baf4a3-5899-4f35-8cbf-57bfca9912e9", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/13b2bef4-b07d-4969-a5a0-44896dd72cb4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9812c057-5468-4db6-81fb-995a1ae38b3e"",
    ""url"": ""/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e"",
    ""created_at"": ""2015-04-16T12:04:33+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""8815b8e4-1934-4ae8-931c-990d6db4d1f2"",
    ""stack_guid"": ""ae5f9659-37ed-4857-9152-ac98fb8076d9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""59478fef-eab2-4409-996e-065418bfb528"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/8815b8e4-1934-4ae8-931c-990d6db4d1f2"",
    ""stack_url"": ""/v2/stacks/ae5f9659-37ed-4857-9152-ac98fb8076d9"",
    ""events_url"": ""/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/events"",
    ""service_bindings_url"": ""/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/service_bindings"",
    ""routes_url"": ""/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("9812c057-5468-4db6-81fb-995a1ae38b3e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:33+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("8815b8e4-1934-4ae8-931c-990d6db4d1f2", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("ae5f9659-37ed-4857-9152-ac98fb8076d9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("59478fef-eab2-4409-996e-065418bfb528", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/8815b8e4-1934-4ae8-931c-990d6db4d1f2", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/ae5f9659-37ed-4857-9152-ac98fb8076d9", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/9812c057-5468-4db6-81fb-995a1ae38b3e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2db414c6-4cab-49c9-b7df-621f2e5041ee"",
    ""url"": ""/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee"",
    ""created_at"": ""2015-04-16T12:04:32+00:00"",
    ""updated_at"": ""2015-04-16T12:04:32+00:00""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""4f1ffcec-7eda-4fd6-b9b9-c2c502ee66db"",
    ""stack_guid"": ""55caaa80-2e65-441c-8d08-92f15adc66c3"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""d4fc1e3e-b5fe-4400-bb5f-ea45317118e8"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:32+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/4f1ffcec-7eda-4fd6-b9b9-c2c502ee66db"",
    ""stack_url"": ""/v2/stacks/55caaa80-2e65-441c-8d08-92f15adc66c3"",
    ""events_url"": ""/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/events"",
    ""service_bindings_url"": ""/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/service_bindings"",
    ""routes_url"": ""/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("2db414c6-4cab-49c9-b7df-621f2e5041ee", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("4f1ffcec-7eda-4fd6-b9b9-c2c502ee66db", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("55caaa80-2e65-441c-8d08-92f15adc66c3", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("d4fc1e3e-b5fe-4400-bb5f-ea45317118e8", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:32+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/4f1ffcec-7eda-4fd6-b9b9-c2c502ee66db", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/55caaa80-2e65-441c-8d08-92f15adc66c3", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/2db414c6-4cab-49c9-b7df-621f2e5041ee/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""0"":{""state"":""RUNNING"",""since"":1403140717.984577,""debug_ip"":null,""debug_port"":null,""console_ip"":null,""console_port"":null}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_version"": ""cf42f860-4667-449d-96fe-7c34b3d2d609"",
      ""application_name"": ""name-1483"",
      ""application_uris"": [

      ],
      ""version"": ""cf42f860-4667-449d-96fe-7c34b3d2d609"",
      ""name"": ""name-1483"",
      ""space_name"": ""name-1484"",
      ""space_id"": ""3157459f-d366-4606-a1e1-ece97372f59a"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5f2b5c5b-7d38-472b-8141-815cbe053a65"",
    ""url"": ""/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65"",
    ""created_at"": ""2015-04-16T12:04:33+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""2a9a2f67-1907-441d-9bbf-0222e80120fb"",
    ""stack_guid"": ""ae5f9659-37ed-4857-9152-ac98fb8076d9"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {
      ""DIEGO_STAGE_BETA"": ""true"",
      ""DIEGO_RUN_BETA"": ""true""
    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""6e4011e3-a602-4d6c-aee1-99d2d653bf87"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2015-04-16T12:04:33+00:00"",
    ""detected_start_command"": """",
    ""space_url"": ""/v2/spaces/2a9a2f67-1907-441d-9bbf-0222e80120fb"",
    ""stack_url"": ""/v2/stacks/ae5f9659-37ed-4857-9152-ac98fb8076d9"",
    ""events_url"": ""/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/events"",
    ""service_bindings_url"": ""/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/service_bindings"",
    ""routes_url"": ""/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("5f2b5c5b-7d38-472b-8141-815cbe053a65", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:33+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("2a9a2f67-1907-441d-9bbf-0222e80120fb", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("ae5f9659-37ed-4857-9152-ac98fb8076d9", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("6e4011e3-a602-4d6c-aee1-99d2d653bf87", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:33+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/2a9a2f67-1907-441d-9bbf-0222e80120fb", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/ae5f9659-37ed-4857-9152-ac98fb8076d9", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/5f2b5c5b-7d38-472b-8141-815cbe053a65/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""89d0267d-2310-4c5d-bbe8-f187ada98bc2"",
        ""url"": ""/v2/routes/89d0267d-2310-4c5d-bbe8-f187ada98bc2"",
        ""created_at"": ""2015-04-16T12:04:34+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-12"",
        ""domain_guid"": ""db846f23-325d-4957-a573-38c0c760fc44"",
        ""space_guid"": ""814f1ea3-19d5-43b9-b8b4-38b60450745e"",
        ""domain_url"": ""/v2/domains/db846f23-325d-4957-a573-38c0c760fc44"",
        ""space_url"": ""/v2/spaces/814f1ea3-19d5-43b9-b8b4-38b60450745e"",
        ""apps_url"": ""/v2/routes/89d0267d-2310-4c5d-bbe8-f187ada98bc2/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("89d0267d-2310-4c5d-bbe8-f187ada98bc2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/89d0267d-2310-4c5d-bbe8-f187ada98bc2", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-12", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("db846f23-325d-4957-a573-38c0c760fc44", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("814f1ea3-19d5-43b9-b8b4-38b60450745e", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/db846f23-325d-4957-a573-38c0c760fc44", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/814f1ea3-19d5-43b9-b8b4-38b60450745e", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/89d0267d-2310-4c5d-bbe8-f187ada98bc2/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""1774da3b-cea0-4816-84e3-53c2a2af81fc"",
        ""url"": ""/v2/service_bindings/1774da3b-cea0-4816-84e3-53c2a2af81fc"",
        ""created_at"": ""2015-04-16T12:04:34+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""14c61ff2-babd-482f-9b9a-e07cea6939e4"",
        ""service_instance_guid"": ""b9b3b976-51d4-4a3f-99d9-a1f719a39cf3"",
        ""credentials"": {
          ""creds-key-508"": ""creds-val-508""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/14c61ff2-babd-482f-9b9a-e07cea6939e4"",
        ""service_instance_url"": ""/v2/service_instances/b9b3b976-51d4-4a3f-99d9-a1f719a39cf3""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("1774da3b-cea0-4816-84e3-53c2a2af81fc", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/1774da3b-cea0-4816-84e3-53c2a2af81fc", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:34+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("14c61ff2-babd-482f-9b9a-e07cea6939e4", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("b9b3b976-51d4-4a3f-99d9-a1f719a39cf3", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/14c61ff2-babd-482f-9b9a-e07cea6939e4", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/b9b3b976-51d4-4a3f-99d9-a1f719a39cf3", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""b66808d6-f537-42d4-bb99-5dcad23b0d88"",""name"":""name-499"",""routes"":[{""guid"":""e548d96a-27e5-48d5-9999-79d457a8a361"",""host"":""host-11"",""domain"":{""guid"":""fdb6e453-6d5d-4117-a779-80ea2bce5ae1"",""name"":""domain-33.example.com""}}],""running_instances"":0,""services"":[{""guid"":""a3458cf0-bd15-4e87-9e31-87d5879b5bc8"",""name"":""name-501"",""bound_app_count"":1,""dashboard_url"":null,""service_plan"":{""guid"":""b7b49c58-c4d7-48ce-9313-eec07b25b578"",""name"":""name-502"",""service"":{""guid"":""cf606f12-72a8-4fe2-8849-f1b7776b1a95"",""label"":""label-38"",""provider"":""provider-38"",""version"":""version-22""}}}],""available_domains"":[{""guid"":""fdb6e453-6d5d-4117-a779-80ea2bce5ae1"",""name"":""domain-33.example.com"",""owning_organization_guid"":""3b7dcf6a-5076-4b1b-a3a3-e1a8897670d0""},{""guid"":""0210f9ef-64f7-48c4-b37e-5cd5e4080da5"",""name"":""customer-app-domain1.com""},{""guid"":""0359e25a-338d-42e0-ac6c-f7fc3dd3032d"",""name"":""customer-app-domain2.com""}],""name"":""name-499"",""production"":false,""space_guid"":""d18f87c9-33a6-4040-aa4c-5e5c570bf22c"",""stack_guid"":""8407fc81-1d0b-45f6-9c54-21a6bc591cd7"",""buildpack"":null,""detected_buildpack"":null,""environment_json"":null,""memory"":1024,""instances"":1,""disk_quota"":1024,""state"":""STOPPED"",""version"":""89ffadb7-8561-4b0c-bff3-12ab2f2f3549"",""command"":null,""console"":false,""debug"":null,""staging_task_id"":null,""package_state"":""PENDING"",""health_check_type"":""port"",""health_check_timeout"":null,""staging_failed_reason"":null,""docker_image"":null,""package_updated_at"":""2015-04-16T12:04:24+00:00"",""detected_start_command"":""""}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("b66808d6-f537-42d4-bb99-5dcad23b0d88", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-499", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("d18f87c9-33a6-4040-aa4c-5e5c570bf22c", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("8407fc81-1d0b-45f6-9c54-21a6bc591cd7", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("89ffadb7-8561-4b0c-bff3-12ab2f2f3549", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:24+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d88fe911-913a-44f5-936e-f59ad9bc6e62"",
    ""url"": ""/v2/apps/d88fe911-913a-44f5-936e-f59ad9bc6e62"",
    ""created_at"": ""2015-04-16T12:04:30+00:00"",
    ""updated_at"": ""2015-04-16T12:04:30+00:00""
  },
  ""entity"": {
    ""name"": ""name-1385"",
    ""production"": false,
    ""space_guid"": ""b3beaffb-911f-40cb-80c4-3e29a79bba76"",
    ""stack_guid"": ""17e468c7-8c97-4ad5-bfd6-69fb15784d4b"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""8c05d4d7-a1fa-4f9d-9093-74f88476adee"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""docker_image"": null,
    ""package_updated_at"": ""2015-04-16T12:04:30+00:00"",
    ""detected_start_command"": """"
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("d88fe911-913a-44f5-936e-f59ad9bc6e62", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/d88fe911-913a-44f5-936e-f59ad9bc6e62", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-16T12:04:30+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-16T12:04:30+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1385", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("b3beaffb-911f-40cb-80c4-3e29a79bba76", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("17e468c7-8c97-4ad5-bfd6-69fb15784d4b", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("8c05d4d7-a1fa-4f9d-9093-74f88476adee", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2015-04-16T12:04:30+00:00", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}