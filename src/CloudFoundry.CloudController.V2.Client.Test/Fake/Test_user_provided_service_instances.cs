//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UserProvidedServiceInstancesEndpoint
{
        [TestMethod]
        public void RetrieveUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7923e66b-557f-4657-b7b3-568e4965e147"",
    ""url"": ""/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7"",
    ""created_at"": ""2016-09-02T11:52:23Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2208"",
    ""credentials"": {
      ""creds-key-51"": ""creds-val-51""
    },
    ""space_guid"": ""7923e66b-557f-4657-b7b3-568e4965e147"",
    ""type"": ""user_provided_service_instance"",
    ""syslog_drain_url"": ""https://foo.com/url-90"",
    ""route_service_url"": null,
    ""space_url"": ""/v2/spaces/b018e43e-2c29-4f99-bf16-cf96e5b56fd1"",
    ""service_bindings_url"": ""/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7/service_bindings"",
    ""routes_url"": ""/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.UserProvidedServiceInstances.RetrieveUserProvidedServiceInstance(guid).Result;


                Assert.AreEqual("7923e66b-557f-4657-b7b3-568e4965e147", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2208", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("7923e66b-557f-4657-b7b3-568e4965e147", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("user_provided_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("https://foo.com/url-90", TestUtil.ToTestableString(obj.SyslogDrainUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.RouteServiceUrl), true);
                Assert.AreEqual("/v2/spaces/b018e43e-2c29-4f99-bf16-cf96e5b56fd1", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/1ec876b5-94a8-4147-bb1a-eee74b1ae2f7/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2e9c313a-9d09-4687-9ede-c468b220e915"",
    ""url"": ""/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39"",
    ""created_at"": ""2016-09-02T11:52:23Z"",
    ""updated_at"": ""2016-09-02T11:52:23Z""
  },
  ""entity"": {
    ""name"": ""name-2223"",
    ""credentials"": {
      ""somekey"": ""somenewvalue""
    },
    ""space_guid"": ""2e9c313a-9d09-4687-9ede-c468b220e915"",
    ""type"": ""user_provided_service_instance"",
    ""syslog_drain_url"": ""https://foo.com/url-93"",
    ""route_service_url"": null,
    ""space_url"": ""/v2/spaces/68999fc4-b2fa-4468-bd3f-86e26f2c3223"",
    ""service_bindings_url"": ""/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39/service_bindings"",
    ""routes_url"": ""/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserProvidedServiceInstanceRequest value = new UpdateUserProvidedServiceInstanceRequest();


                var obj = cfClient.UserProvidedServiceInstances.UpdateUserProvidedServiceInstance(guid, value).Result;


                Assert.AreEqual("2e9c313a-9d09-4687-9ede-c468b220e915", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2223", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2e9c313a-9d09-4687-9ede-c468b220e915", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("user_provided_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("https://foo.com/url-93", TestUtil.ToTestableString(obj.SyslogDrainUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.RouteServiceUrl), true);
                Assert.AreEqual("/v2/spaces/68999fc4-b2fa-4468-bd3f-86e26f2c3223", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/aa02f808-21f7-496e-9493-9e4539fadd39/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.UserProvidedServiceInstances.DeleteUserProvidedServiceInstance(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""617e7edb-9781-4218-9afd-0af010cf3c1d"",
        ""url"": ""/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a"",
        ""created_at"": ""2016-09-02T11:52:24Z"",
        ""updated_at"": ""2016-09-02T11:52:24Z""
      },
      ""entity"": {
        ""host"": ""host-30"",
        ""path"": """",
        ""domain_guid"": ""617e7edb-9781-4218-9afd-0af010cf3c1d"",
        ""space_guid"": ""617e7edb-9781-4218-9afd-0af010cf3c1d"",
        ""service_instance_guid"": ""617e7edb-9781-4218-9afd-0af010cf3c1d"",
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/8d584cbd-74c3-45e1-8088-0e2731802d3a"",
        ""space_url"": ""/v2/spaces/bcbb461b-556e-4008-b9c8-53855d1b1f2e"",
        ""service_instance_url"": ""/v2/user_provided_service_instances/17d4f286-b394-48b7-a4f0-18582eedccb3"",
        ""apps_url"": ""/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a/apps"",
        ""route_mappings_url"": ""/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.UserProvidedServiceInstances.ListAllRoutesForUserProvidedServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("617e7edb-9781-4218-9afd-0af010cf3c1d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-09-02T11:52:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-30", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("617e7edb-9781-4218-9afd-0af010cf3c1d", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("617e7edb-9781-4218-9afd-0af010cf3c1d", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("617e7edb-9781-4218-9afd-0af010cf3c1d", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/private_domains/8d584cbd-74c3-45e1-8088-0e2731802d3a", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/bcbb461b-556e-4008-b9c8-53855d1b1f2e", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/17d4f286-b394-48b7-a4f0-18582eedccb3", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/d5575577-ad7f-4fa6-bacc-ec0f7db6835a/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUserProvidedServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""36988442-525f-4701-9733-862f3070686b"",
        ""url"": ""/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206"",
        ""created_at"": ""2016-09-02T11:52:23Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2227"",
        ""credentials"": {
          ""creds-key-55"": ""creds-val-55""
        },
        ""space_guid"": ""36988442-525f-4701-9733-862f3070686b"",
        ""type"": ""user_provided_service_instance"",
        ""syslog_drain_url"": ""https://foo.com/url-94"",
        ""route_service_url"": null,
        ""space_url"": ""/v2/spaces/379a6da2-91dc-436f-94c5-69524644c0c9"",
        ""service_bindings_url"": ""/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206/service_bindings"",
        ""routes_url"": ""/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.UserProvidedServiceInstances.ListAllUserProvidedServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("36988442-525f-4701-9733-862f3070686b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2227", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("36988442-525f-4701-9733-862f3070686b", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("user_provided_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("https://foo.com/url-94", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouteServiceUrl), true);
                Assert.AreEqual("/v2/spaces/379a6da2-91dc-436f-94c5-69524644c0c9", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/8d504d0d-8432-4fe7-9f97-e4425328f206/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveRouteFromUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.UserProvidedServiceInstances.RemoveRouteFromUserProvidedServiceInstance(guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2b2156e8-4ed2-469a-bed6-98b39f6e3c51"",
        ""url"": ""/v2/service_bindings/2f3720ab-2e5b-4278-973a-c2eba5b0fb19"",
        ""created_at"": ""2016-09-02T11:52:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""2b2156e8-4ed2-469a-bed6-98b39f6e3c51"",
        ""service_instance_guid"": ""2b2156e8-4ed2-469a-bed6-98b39f6e3c51"",
        ""credentials"": {
          ""creds-key-60"": ""creds-val-60""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""volume_mounts"": [

        ],
        ""app_url"": ""/v2/apps/6a9dd637-10b6-4ddd-bc4a-477ea65b78d7"",
        ""service_instance_url"": ""/v2/user_provided_service_instances/a53bf95a-7777-4f4e-9abd-31fea4dc3c9c""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.UserProvidedServiceInstances.ListAllServiceBindingsForUserProvidedServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2b2156e8-4ed2-469a-bed6-98b39f6e3c51", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/2f3720ab-2e5b-4278-973a-c2eba5b0fb19", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("2b2156e8-4ed2-469a-bed6-98b39f6e3c51", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("2b2156e8-4ed2-469a-bed6-98b39f6e3c51", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/6a9dd637-10b6-4ddd-bc4a-477ea65b78d7", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/a53bf95a-7777-4f4e-9abd-31fea4dc3c9c", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void AssociateRouteWithUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ff2bdd8e-ce7a-4085-9be1-0db4c0c6ed83"",
    ""url"": ""/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1"",
    ""created_at"": ""2016-09-02T11:52:23Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2235"",
    ""credentials"": {
      ""creds-key-57"": ""creds-val-57""
    },
    ""space_guid"": ""ff2bdd8e-ce7a-4085-9be1-0db4c0c6ed83"",
    ""type"": ""user_provided_service_instance"",
    ""syslog_drain_url"": ""https://foo.com/url-99"",
    ""route_service_url"": ""https://foo.com/url-98"",
    ""space_url"": ""/v2/spaces/38b1387d-e391-4cdb-8afd-da3de9f1acfd"",
    ""service_bindings_url"": ""/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1/service_bindings"",
    ""routes_url"": ""/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.UserProvidedServiceInstances.AssociateRouteWithUserProvidedServiceInstance(guid, route_guid).Result;


                Assert.AreEqual("ff2bdd8e-ce7a-4085-9be1-0db4c0c6ed83", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2235", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ff2bdd8e-ce7a-4085-9be1-0db4c0c6ed83", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("user_provided_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("https://foo.com/url-99", TestUtil.ToTestableString(obj.SyslogDrainUrl), true);
                Assert.AreEqual("https://foo.com/url-98", TestUtil.ToTestableString(obj.RouteServiceUrl), true);
                Assert.AreEqual("/v2/spaces/38b1387d-e391-4cdb-8afd-da3de9f1acfd", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae213679-d38a-4d07-b768-81308720d6d1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserProvidedServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""fa9a05b2-6e8b-4bde-8578-a187ed94be36"",
    ""url"": ""/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471"",
    ""created_at"": ""2016-09-02T11:52:23Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-user-provided-instance"",
    ""credentials"": {
      ""somekey"": ""somevalue""
    },
    ""space_guid"": ""fa9a05b2-6e8b-4bde-8578-a187ed94be36"",
    ""type"": ""user_provided_service_instance"",
    ""syslog_drain_url"": ""syslog://example.com"",
    ""route_service_url"": ""https://logger.example.com"",
    ""space_url"": ""/v2/spaces/eed592cb-8d4b-4d0a-973b-a031511e58ef"",
    ""service_bindings_url"": ""/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471/service_bindings"",
    ""routes_url"": ""/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserProvidedServiceInstanceRequest value = new CreateUserProvidedServiceInstanceRequest();


                var obj = cfClient.UserProvidedServiceInstances.CreateUserProvidedServiceInstance(value).Result;


                Assert.AreEqual("fa9a05b2-6e8b-4bde-8578-a187ed94be36", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:23Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-user-provided-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("fa9a05b2-6e8b-4bde-8578-a187ed94be36", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("user_provided_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("syslog://example.com", TestUtil.ToTestableString(obj.SyslogDrainUrl), true);
                Assert.AreEqual("https://logger.example.com", TestUtil.ToTestableString(obj.RouteServiceUrl), true);
                Assert.AreEqual("/v2/spaces/eed592cb-8d4b-4d0a-973b-a031511e58ef", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/user_provided_service_instances/ae25006c-6430-4ec0-b081-be89424a0471/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

    }
}