//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class RoutesEndpoint
{
        [TestMethod]
        public void ListAllRoutesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2b161c48-5faf-4693-9089-9bb86bf15b44"",
        ""url"": ""/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893"",
        ""created_at"": ""2016-10-12T12:29:17Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-12"",
        ""path"": """",
        ""domain_guid"": ""2b161c48-5faf-4693-9089-9bb86bf15b44"",
        ""space_guid"": ""2b161c48-5faf-4693-9089-9bb86bf15b44"",
        ""service_instance_guid"": ""2b161c48-5faf-4693-9089-9bb86bf15b44"",
        ""port"": null,
        ""domain_url"": ""/v2/shared_domains/1f36c59c-06d0-4fe2-b3fa-644f9c1ccc2f"",
        ""space_url"": ""/v2/spaces/501a9ddb-7816-4a24-99f7-ef056976237b"",
        ""service_instance_url"": ""/v2/service_instances/b448aa7b-e0fb-42c0-86b1-4cf204298bce"",
        ""apps_url"": ""/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893/apps"",
        ""route_mappings_url"": ""/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Routes.ListAllRoutes().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2b161c48-5faf-4693-9089-9bb86bf15b44", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-12", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("2b161c48-5faf-4693-9089-9bb86bf15b44", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("2b161c48-5faf-4693-9089-9bb86bf15b44", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("2b161c48-5faf-4693-9089-9bb86bf15b44", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/shared_domains/1f36c59c-06d0-4fe2-b3fa-644f9c1ccc2f", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/501a9ddb-7816-4a24-99f7-ef056976237b", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/b448aa7b-e0fb-42c0-86b1-4cf204298bce", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/28df7fb0-4179-4158-a98f-055e9b07f893/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CheckRouteExistsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? domain_guid = Guid.NewGuid();

                dynamic host = null;

                dynamic path = null;

                dynamic port = null;


                cfClient.Routes.CheckRouteExists(domain_guid, host, path, port).Wait();

            }
        }

        [TestMethod]
        public void DeleteRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                dynamic recursive = null;


                cfClient.Routes.DeleteRoute(guid, recursive).Wait();

            }
        }

        [TestMethod]
        public void RemoveAppFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                cfClient.Routes.RemoveAppFromRoute(guid, app_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateAppWithRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7931e3c6-a3e1-452e-95e1-a7c049a1f6f9"",
    ""url"": ""/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f"",
    ""created_at"": ""2016-10-12T12:29:17Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-15"",
    ""path"": """",
    ""domain_guid"": ""7931e3c6-a3e1-452e-95e1-a7c049a1f6f9"",
    ""space_guid"": ""7931e3c6-a3e1-452e-95e1-a7c049a1f6f9"",
    ""service_instance_guid"": null,
    ""port"": null,
    ""domain_url"": ""/v2/shared_domains/f454afb5-c358-46a4-a73c-7e61524a0162"",
    ""space_url"": ""/v2/spaces/426e06da-938e-4c1b-a566-8491999c0be7"",
    ""apps_url"": ""/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f/apps"",
    ""route_mappings_url"": ""/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                var obj = cfClient.Routes.AssociateAppWithRoute(guid, app_guid).Result;


                Assert.AreEqual("7931e3c6-a3e1-452e-95e1-a7c049a1f6f9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-15", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("7931e3c6-a3e1-452e-95e1-a7c049a1f6f9", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("7931e3c6-a3e1-452e-95e1-a7c049a1f6f9", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/shared_domains/f454afb5-c358-46a4-a73c-7e61524a0162", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/426e06da-938e-4c1b-a566-8491999c0be7", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/70d91de6-8c20-4d14-b7b8-267ab35d174f/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""56756f2d-d180-48cc-9762-3a375f42ac3b"",
        ""url"": ""/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a"",
        ""created_at"": ""2016-10-12T12:29:18Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-472"",
        ""production"": false,
        ""space_guid"": ""56756f2d-d180-48cc-9762-3a375f42ac3b"",
        ""stack_guid"": ""56756f2d-d180-48cc-9762-3a375f42ac3b"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""7f97b73e-f4e1-4f43-92de-7402bb7d6faf"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": ""24fba8cc-c647-492f-85bd-8e012c19e07d"",
        ""package_state"": ""STAGED"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-10-12T12:29:18Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/2f101904-7846-4159-b943-e369f7f0ccee"",
        ""stack_url"": ""/v2/stacks/76169372-d87f-4826-9904-d20e7a9eb6c2"",
        ""routes_url"": ""/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/routes"",
        ""events_url"": ""/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/events"",
        ""service_bindings_url"": ""/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.ListAllAppsForRoute(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("56756f2d-d180-48cc-9762-3a375f42ac3b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:18Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-472", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("56756f2d-d180-48cc-9762-3a375f42ac3b", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("56756f2d-d180-48cc-9762-3a375f42ac3b", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("7f97b73e-f4e1-4f43-92de-7402bb7d6faf", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("24fba8cc-c647-492f-85bd-8e012c19e07d", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("STAGED", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-10-12T12:29:18Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/2f101904-7846-4159-b943-e369f7f0ccee", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/76169372-d87f-4826-9904-d20e7a9eb6c2", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/a036c156-a6f4-49a5-931b-f8d630bf583a/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void CheckHttpRouteExistsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? domain_guid = Guid.NewGuid();

                dynamic host = null;

                dynamic path = null;


                cfClient.Routes.CheckHttpRouteExists(domain_guid, host, path).Wait();

            }
        }

        [TestMethod]
        public void CreateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3e39e9e0-d3a0-444a-aac7-2e9c856680a0"",
    ""url"": ""/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced"",
    ""created_at"": ""2016-10-12T12:29:17Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": """",
    ""path"": """",
    ""domain_guid"": ""3e39e9e0-d3a0-444a-aac7-2e9c856680a0"",
    ""space_guid"": ""3e39e9e0-d3a0-444a-aac7-2e9c856680a0"",
    ""service_instance_guid"": null,
    ""port"": 10000,
    ""domain_url"": ""/v2/shared_domains/6bd78ada-63b6-4a47-9ff7-8de579854654"",
    ""space_url"": ""/v2/spaces/94bd13e6-1def-47a1-8272-0cf0cb584025"",
    ""apps_url"": ""/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced/apps"",
    ""route_mappings_url"": ""/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateRouteRequest value = new CreateRouteRequest();


                var obj = cfClient.Routes.CreateRoute(value).Result;


                Assert.AreEqual("3e39e9e0-d3a0-444a-aac7-2e9c856680a0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("3e39e9e0-d3a0-444a-aac7-2e9c856680a0", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("3e39e9e0-d3a0-444a-aac7-2e9c856680a0", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("10000", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/shared_domains/6bd78ada-63b6-4a47-9ff7-8de579854654", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/94bd13e6-1def-47a1-8272-0cf0cb584025", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/216a3d93-3415-4787-991c-ada94ca68ced/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3c131e88-99f2-47f4-9749-8061b0c1dcd2"",
    ""url"": ""/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf"",
    ""created_at"": ""2016-10-12T12:29:17Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-11"",
    ""path"": """",
    ""domain_guid"": ""3c131e88-99f2-47f4-9749-8061b0c1dcd2"",
    ""space_guid"": ""3c131e88-99f2-47f4-9749-8061b0c1dcd2"",
    ""service_instance_guid"": ""3c131e88-99f2-47f4-9749-8061b0c1dcd2"",
    ""port"": null,
    ""domain_url"": ""/v2/shared_domains/1ecb0ac6-088e-4ed5-b27d-317e1ba5b6a1"",
    ""space_url"": ""/v2/spaces/67dbd188-6199-435c-a3e7-1dc1c6517868"",
    ""service_instance_url"": ""/v2/service_instances/16bfd38c-0166-4e4b-afc0-58046e96f054"",
    ""apps_url"": ""/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf/apps"",
    ""route_mappings_url"": ""/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.RetrieveRoute(guid).Result;


                Assert.AreEqual("3c131e88-99f2-47f4-9749-8061b0c1dcd2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-11", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("3c131e88-99f2-47f4-9749-8061b0c1dcd2", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("3c131e88-99f2-47f4-9749-8061b0c1dcd2", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("3c131e88-99f2-47f4-9749-8061b0c1dcd2", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/shared_domains/1ecb0ac6-088e-4ed5-b27d-317e1ba5b6a1", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/67dbd188-6199-435c-a3e7-1dc1c6517868", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/16bfd38c-0166-4e4b-afc0-58046e96f054", TestUtil.ToTestableString(obj.ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/4ee2ef01-da43-4888-84a5-ad4552936acf/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""84148d5c-667b-4ae5-a4fc-18a2d963efff"",
    ""url"": ""/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d"",
    ""created_at"": ""2016-10-12T12:29:17Z"",
    ""updated_at"": ""2016-10-12T12:29:17Z""
  },
  ""entity"": {
    ""host"": ""host-10"",
    ""path"": """",
    ""domain_guid"": ""84148d5c-667b-4ae5-a4fc-18a2d963efff"",
    ""space_guid"": ""84148d5c-667b-4ae5-a4fc-18a2d963efff"",
    ""service_instance_guid"": null,
    ""port"": 10000,
    ""domain_url"": ""/v2/shared_domains/4ee83799-bdc4-404d-abeb-361d329dea59"",
    ""space_url"": ""/v2/spaces/f7682fd7-b4c2-4eec-b5c3-ac69103dc32d"",
    ""apps_url"": ""/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d/apps"",
    ""route_mappings_url"": ""/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d/route_mappings""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateRouteRequest value = new UpdateRouteRequest();


                var obj = cfClient.Routes.UpdateRoute(guid, value).Result;


                Assert.AreEqual("84148d5c-667b-4ae5-a4fc-18a2d963efff", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-10-12T12:29:17Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-10", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Path), true);
                Assert.AreEqual("84148d5c-667b-4ae5-a4fc-18a2d963efff", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("84148d5c-667b-4ae5-a4fc-18a2d963efff", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.ServiceInstanceGuid), true);
                Assert.AreEqual("10000", TestUtil.ToTestableString(obj.Port), true);
                Assert.AreEqual("/v2/shared_domains/4ee83799-bdc4-404d-abeb-361d329dea59", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/f7682fd7-b4c2-4eec-b5c3-ac69103dc32d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/routes/68798210-f171-4dfe-9b16-da3936e6fd9d/route_mappings", TestUtil.ToTestableString(obj.RouteMappingsUrl), true);

            }
        }

    }
}