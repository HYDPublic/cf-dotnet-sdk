//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class RoutesEndpoint
{
        [TestMethod]
        public void CreateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""894135b0-bd8a-4345-b657-77289a341eb3"",
    ""url"": ""/v2/routes/894135b0-bd8a-4345-b657-77289a341eb3"",
    ""created_at"": ""2015-04-10T19:41:49+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": """",
    ""domain_guid"": ""14c558f2-5aef-4af8-b6c5-4c5d74ab1d00"",
    ""space_guid"": ""2c9de0ae-cc3c-4d83-8936-0dd2145e68ef"",
    ""domain_url"": ""/v2/domains/14c558f2-5aef-4af8-b6c5-4c5d74ab1d00"",
    ""space_url"": ""/v2/spaces/2c9de0ae-cc3c-4d83-8936-0dd2145e68ef"",
    ""apps_url"": ""/v2/routes/894135b0-bd8a-4345-b657-77289a341eb3/apps""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateRouteRequest value = new CreateRouteRequest();


                var obj = cfClient.Routes.CreateRoute(value).Result;


                Assert.AreEqual("894135b0-bd8a-4345-b657-77289a341eb3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/894135b0-bd8a-4345-b657-77289a341eb3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:49+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("14c558f2-5aef-4af8-b6c5-4c5d74ab1d00", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("2c9de0ae-cc3c-4d83-8936-0dd2145e68ef", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("/v2/domains/14c558f2-5aef-4af8-b6c5-4c5d74ab1d00", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/2c9de0ae-cc3c-4d83-8936-0dd2145e68ef", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/894135b0-bd8a-4345-b657-77289a341eb3/apps", TestUtil.ToTestableString(obj.AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cb8032d3-f2c1-4860-884a-bf06cdbbb327"",
        ""url"": ""/v2/routes/cb8032d3-f2c1-4860-884a-bf06cdbbb327"",
        ""created_at"": ""2015-04-10T19:41:49+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-1"",
        ""domain_guid"": ""281cc3ae-a27d-4031-a4f9-e5fb9382030b"",
        ""space_guid"": ""e155ff15-e055-4676-9865-9251dc524bda"",
        ""domain_url"": ""/v2/domains/281cc3ae-a27d-4031-a4f9-e5fb9382030b"",
        ""space_url"": ""/v2/spaces/e155ff15-e055-4676-9865-9251dc524bda"",
        ""apps_url"": ""/v2/routes/cb8032d3-f2c1-4860-884a-bf06cdbbb327/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Routes.ListAllRoutes().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cb8032d3-f2c1-4860-884a-bf06cdbbb327", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/cb8032d3-f2c1-4860-884a-bf06cdbbb327", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:49+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-1", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("281cc3ae-a27d-4031-a4f9-e5fb9382030b", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("e155ff15-e055-4676-9865-9251dc524bda", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/281cc3ae-a27d-4031-a4f9-e5fb9382030b", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/e155ff15-e055-4676-9865-9251dc524bda", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/cb8032d3-f2c1-4860-884a-bf06cdbbb327/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAppWithRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c5928ea9-f02b-47c2-8a62-73836a2c3f09"",
    ""url"": ""/v2/routes/c5928ea9-f02b-47c2-8a62-73836a2c3f09"",
    ""created_at"": ""2015-04-10T19:41:50+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-9"",
    ""domain_guid"": ""2b0d926f-6d8a-4f66-b84a-ff9fdbe720bc"",
    ""space_guid"": ""17560140-2a53-423a-8130-fd863779cbea"",
    ""domain_url"": ""/v2/domains/2b0d926f-6d8a-4f66-b84a-ff9fdbe720bc"",
    ""space_url"": ""/v2/spaces/17560140-2a53-423a-8130-fd863779cbea"",
    ""apps_url"": ""/v2/routes/c5928ea9-f02b-47c2-8a62-73836a2c3f09/apps""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                var obj = cfClient.Routes.AssociateAppWithRoute(guid, app_guid).Result;


                Assert.AreEqual("c5928ea9-f02b-47c2-8a62-73836a2c3f09", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/c5928ea9-f02b-47c2-8a62-73836a2c3f09", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-9", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("2b0d926f-6d8a-4f66-b84a-ff9fdbe720bc", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("17560140-2a53-423a-8130-fd863779cbea", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("/v2/domains/2b0d926f-6d8a-4f66-b84a-ff9fdbe720bc", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/17560140-2a53-423a-8130-fd863779cbea", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/c5928ea9-f02b-47c2-8a62-73836a2c3f09/apps", TestUtil.ToTestableString(obj.AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932"",
        ""url"": ""/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932"",
        ""created_at"": ""2015-04-10T19:41:50+00:00"",
        ""updated_at"": ""2015-04-10T19:41:50+00:00""
      },
      ""entity"": {
        ""name"": ""name-46"",
        ""production"": false,
        ""space_guid"": ""d8d508dd-5dab-42b9-add0-0cdbdce885f6"",
        ""stack_guid"": ""764dd6c3-6fb7-446c-add0-6ada84dc0aad"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""cedd4fef-7b23-403f-8140-b683a77407a5"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-10T19:41:50+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/d8d508dd-5dab-42b9-add0-0cdbdce885f6"",
        ""stack_url"": ""/v2/stacks/764dd6c3-6fb7-446c-add0-6ada84dc0aad"",
        ""events_url"": ""/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/events"",
        ""service_bindings_url"": ""/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/service_bindings"",
        ""routes_url"": ""/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.ListAllAppsForRoute(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-46", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("d8d508dd-5dab-42b9-add0-0cdbdce885f6", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("764dd6c3-6fb7-446c-add0-6ada84dc0aad", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("cedd4fef-7b23-403f-8140-b683a77407a5", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/d8d508dd-5dab-42b9-add0-0cdbdce885f6", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/764dd6c3-6fb7-446c-add0-6ada84dc0aad", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/cbc6fa95-c5ea-4442-8a7b-cd3cc74ea932/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CheckRouteExistsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? domain_guid = Guid.NewGuid();

                dynamic host = null;


                cfClient.Routes.CheckRouteExists(domain_guid, host).Wait();

            }
        }

        [TestMethod]
        public void DeleteRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Routes.DeleteRoute(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAppFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2a6b3fca-fed9-4891-b43c-f02d20a301c7"",
    ""url"": ""/v2/routes/2a6b3fca-fed9-4891-b43c-f02d20a301c7"",
    ""created_at"": ""2015-04-10T19:41:50+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-8"",
    ""domain_guid"": ""e3ed34a6-76a1-4c6a-9270-2516f5d37866"",
    ""space_guid"": ""2b70c55e-8aee-44bf-ae64-d872dbaac039"",
    ""domain_url"": ""/v2/domains/e3ed34a6-76a1-4c6a-9270-2516f5d37866"",
    ""space_url"": ""/v2/spaces/2b70c55e-8aee-44bf-ae64-d872dbaac039"",
    ""apps_url"": ""/v2/routes/2a6b3fca-fed9-4891-b43c-f02d20a301c7/apps""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? app_guid = Guid.NewGuid();


                var obj = cfClient.Routes.RemoveAppFromRoute(guid, app_guid).Result;


                Assert.AreEqual("2a6b3fca-fed9-4891-b43c-f02d20a301c7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/2a6b3fca-fed9-4891-b43c-f02d20a301c7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-8", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("e3ed34a6-76a1-4c6a-9270-2516f5d37866", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("2b70c55e-8aee-44bf-ae64-d872dbaac039", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("/v2/domains/e3ed34a6-76a1-4c6a-9270-2516f5d37866", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/2b70c55e-8aee-44bf-ae64-d872dbaac039", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/2a6b3fca-fed9-4891-b43c-f02d20a301c7/apps", TestUtil.ToTestableString(obj.AppsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7e080dfc-23d4-47c4-af86-551f2d3c814f"",
    ""url"": ""/v2/routes/7e080dfc-23d4-47c4-af86-551f2d3c814f"",
    ""created_at"": ""2015-04-10T19:41:49+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""host"": ""host-5"",
    ""domain_guid"": ""2efa71c9-4ba2-4726-b5ef-0cd4349bc418"",
    ""space_guid"": ""a257f52b-207f-427d-91ad-14f269af3c97"",
    ""domain_url"": ""/v2/domains/2efa71c9-4ba2-4726-b5ef-0cd4349bc418"",
    ""space_url"": ""/v2/spaces/a257f52b-207f-427d-91ad-14f269af3c97"",
    ""apps_url"": ""/v2/routes/7e080dfc-23d4-47c4-af86-551f2d3c814f/apps""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Routes.RetrieveRoute(guid).Result;


                Assert.AreEqual("7e080dfc-23d4-47c4-af86-551f2d3c814f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/7e080dfc-23d4-47c4-af86-551f2d3c814f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:49+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-5", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("2efa71c9-4ba2-4726-b5ef-0cd4349bc418", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("a257f52b-207f-427d-91ad-14f269af3c97", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("/v2/domains/2efa71c9-4ba2-4726-b5ef-0cd4349bc418", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/a257f52b-207f-427d-91ad-14f269af3c97", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/7e080dfc-23d4-47c4-af86-551f2d3c814f/apps", TestUtil.ToTestableString(obj.AppsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2c369d10-d536-4ee7-97cb-18b6cfd20eb5"",
    ""url"": ""/v2/routes/2c369d10-d536-4ee7-97cb-18b6cfd20eb5"",
    ""created_at"": ""2015-04-10T19:41:49+00:00"",
    ""updated_at"": ""2015-04-10T19:41:49+00:00""
  },
  ""entity"": {
    ""host"": ""new_host"",
    ""domain_guid"": ""245ba039-1ace-4357-8fbf-ed734c229dbb"",
    ""space_guid"": ""7ab64ae9-4a35-47b4-a1be-40b27d236c7d"",
    ""domain_url"": ""/v2/domains/245ba039-1ace-4357-8fbf-ed734c229dbb"",
    ""space_url"": ""/v2/spaces/7ab64ae9-4a35-47b4-a1be-40b27d236c7d"",
    ""apps_url"": ""/v2/routes/2c369d10-d536-4ee7-97cb-18b6cfd20eb5/apps""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateRouteRequest value = new UpdateRouteRequest();


                var obj = cfClient.Routes.UpdateRoute(guid, value).Result;


                Assert.AreEqual("2c369d10-d536-4ee7-97cb-18b6cfd20eb5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/2c369d10-d536-4ee7-97cb-18b6cfd20eb5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:49+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T19:41:49+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_host", TestUtil.ToTestableString(obj.Host), true);
                Assert.AreEqual("245ba039-1ace-4357-8fbf-ed734c229dbb", TestUtil.ToTestableString(obj.DomainGuid), true);
                Assert.AreEqual("7ab64ae9-4a35-47b4-a1be-40b27d236c7d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("/v2/domains/245ba039-1ace-4357-8fbf-ed734c229dbb", TestUtil.ToTestableString(obj.DomainUrl), true);
                Assert.AreEqual("/v2/spaces/7ab64ae9-4a35-47b4-a1be-40b27d236c7d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/routes/2c369d10-d536-4ee7-97cb-18b6cfd20eb5/apps", TestUtil.ToTestableString(obj.AppsUrl), true);

            }
        }

    }
}