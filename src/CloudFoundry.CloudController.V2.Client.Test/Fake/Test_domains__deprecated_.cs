//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class DomainsDeprecatedEndpoint
{
        [TestMethod]
        public void DeleteDomainDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.DomainsDeprecated.DeleteDomainDeprecated(guid).Wait();

            }
        }

        [TestMethod]
        public void CreateDomainOwnedByGivenOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1c27fe7f-0c44-4ba3-a9a5-ff47a22ddb62"",
    ""url"": ""/v2/domains/07c908f0-9c9c-45c4-aeda-511c27778be6"",
    ""created_at"": ""2016-03-30T10:15:46Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""exmaple.com"",
    ""owning_organization_guid"": ""1c27fe7f-0c44-4ba3-a9a5-ff47a22ddb62"",
    ""shared_organizations"": [

    ],
    ""owning_organization_url"": ""/v2/organizations/93231c66-4570-472e-9845-5ec2e32ae86d"",
    ""spaces_url"": ""/v2/domains/07c908f0-9c9c-45c4-aeda-511c27778be6/spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDomainOwnedByGivenOrganizationDeprecatedRequest value = new CreateDomainOwnedByGivenOrganizationDeprecatedRequest();


                var obj = cfClient.DomainsDeprecated.CreateDomainOwnedByGivenOrganizationDeprecated(value).Result;


                Assert.AreEqual("1c27fe7f-0c44-4ba3-a9a5-ff47a22ddb62", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/07c908f0-9c9c-45c4-aeda-511c27778be6", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("exmaple.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1c27fe7f-0c44-4ba3-a9a5-ff47a22ddb62", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/93231c66-4570-472e-9845-5ec2e32ae86d", TestUtil.ToTestableString(obj.OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/domains/07c908f0-9c9c-45c4-aeda-511c27778be6/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForDomainDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""144456b9-f508-4013-85ea-33c97f9f964a"",
        ""url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a"",
        ""created_at"": ""2016-03-30T10:15:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2668"",
        ""organization_guid"": ""144456b9-f508-4013-85ea-33c97f9f964a"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/bc06ce54-2d54-4715-967e-0516ec4253f4"",
        ""developers_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/developers"",
        ""managers_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/managers"",
        ""auditors_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/auditors"",
        ""apps_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/apps"",
        ""routes_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/routes"",
        ""domains_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/domains"",
        ""service_instances_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/service_instances"",
        ""app_events_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/app_events"",
        ""events_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/events"",
        ""security_groups_url"": ""/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.DomainsDeprecated.ListAllSpacesForDomainDeprecated(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("144456b9-f508-4013-85ea-33c97f9f964a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2668", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("144456b9-f508-4013-85ea-33c97f9f964a", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/bc06ce54-2d54-4715-967e-0516ec4253f4", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/f0a61578-c1e5-4aac-8b1e-db1bf5f6106a/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveDomainDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""8c90ba21-954f-4a5a-ac17-5332ebba6edd"",
    ""url"": ""/v2/domains/eca1505c-295f-4901-8514-f20dd5876830"",
    ""created_at"": ""2016-03-30T10:15:46Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""domain-79.example.com"",
    ""router_group_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.DomainsDeprecated.RetrieveDomainDeprecated(guid).Result;


                Assert.AreEqual("8c90ba21-954f-4a5a-ac17-5332ebba6edd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/eca1505c-295f-4901-8514-f20dd5876830", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-79.example.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void CreateSharedDomainDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2fd6b056-7dff-4f57-ad6d-bf3f5f7a9981"",
    ""url"": ""/v2/domains/e854992b-4e53-4624-9024-68e18f230bb5"",
    ""created_at"": ""2016-03-30T10:15:46Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""example.com"",
    ""owning_organization_guid"": null,
    ""shared_organizations"": [

    ]
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSharedDomainDeprecatedRequest value = new CreateSharedDomainDeprecatedRequest();


                var obj = cfClient.DomainsDeprecated.CreateSharedDomainDeprecated(value).Result;


                Assert.AreEqual("2fd6b056-7dff-4f57-ad6d-bf3f5f7a9981", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/e854992b-4e53-4624-9024-68e18f230bb5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("example.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 4,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""71ed3274-317b-43b6-b749-815000f2f70a"",
        ""url"": ""/v2/domains/b76f6489-66d6-4c90-9da8-0950f76315c1"",
        ""created_at"": ""2016-03-30T10:15:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""71ed3274-317b-43b6-b749-815000f2f70a"",
        ""url"": ""/v2/domains/c3cd6ffa-5f6a-4323-bc95-ec56a862abaf"",
        ""created_at"": ""2016-03-30T10:15:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""71ed3274-317b-43b6-b749-815000f2f70a"",
        ""url"": ""/v2/domains/94d79032-50b6-40e5-921c-f9c471c31061"",
        ""created_at"": ""2016-03-30T10:15:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""vcap.me"",
        ""owning_organization_guid"": ""71ed3274-317b-43b6-b749-815000f2f70a"",
        ""owning_organization_url"": ""/v2/organizations/1773ded0-23a0-466a-a2c0-819fd8d696de"",
        ""spaces_url"": ""/v2/domains/94d79032-50b6-40e5-921c-f9c471c31061/spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""71ed3274-317b-43b6-b749-815000f2f70a"",
        ""url"": ""/v2/domains/40984bce-29c8-4309-b56d-abfc147a346c"",
        ""created_at"": ""2016-03-30T10:15:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-78.example.com"",
        ""router_group_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.DomainsDeprecated.ListAllDomainsDeprecated().Result;

                Assert.AreEqual("4", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("71ed3274-317b-43b6-b749-815000f2f70a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/b76f6489-66d6-4c90-9da8-0950f76315c1", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("71ed3274-317b-43b6-b749-815000f2f70a", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/c3cd6ffa-5f6a-4323-bc95-ec56a862abaf", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);
                Assert.AreEqual("71ed3274-317b-43b6-b749-815000f2f70a", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/94d79032-50b6-40e5-921c-f9c471c31061", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("vcap.me", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("71ed3274-317b-43b6-b749-815000f2f70a", TestUtil.ToTestableString(obj[2].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/1773ded0-23a0-466a-a2c0-819fd8d696de", TestUtil.ToTestableString(obj[2].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/domains/94d79032-50b6-40e5-921c-f9c471c31061/spaces", TestUtil.ToTestableString(obj[2].SpacesUrl), true);
                Assert.AreEqual("71ed3274-317b-43b6-b749-815000f2f70a", TestUtil.ToTestableString(obj[3].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/40984bce-29c8-4309-b56d-abfc147a346c", TestUtil.ToTestableString(obj[3].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:46Z", TestUtil.ToTestableString(obj[3].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-78.example.com", TestUtil.ToTestableString(obj[3].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].RouterGroupGuid), true);

            }
        }

    }
}