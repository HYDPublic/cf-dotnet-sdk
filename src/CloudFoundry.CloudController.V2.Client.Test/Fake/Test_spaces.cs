//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""203294b3-2052-4a22-90c0-c85eda612876"",
  ""name"": ""name-278"",
  ""apps"": [
    {
      ""guid"": ""e5988476-aeeb-4444-90f9-64abcf6b95b9"",
      ""urls"": [
        ""host-2.domain-2.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""5eb6b8cc-7872-485d-8453-647ac9f252a6"",
          ""host"": ""host-2"",
          ""domain"": {
            ""guid"": ""cb166483-9422-4325-b091-ea2061c1d7e8"",
            ""name"": ""domain-2.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-283""
      ],
      ""running_instances"": 0,
      ""name"": ""name-281"",
      ""production"": false,
      ""space_guid"": ""203294b3-2052-4a22-90c0-c85eda612876"",
      ""stack_guid"": ""734ebc38-9c61-4dda-94d9-bee5453867d7"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""4190da2a-ccc4-4179-b086-0e61e0fc6812"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""docker_image"": null,
      ""package_updated_at"": ""2015-03-25T13:48:42+00:00"",
      ""detected_start_command"": """"
    }
  ],
  ""services"": [
    {
      ""guid"": ""d52dee28-9521-4748-a256-0d7f4e46c9f8"",
      ""name"": ""name-283"",
      ""bound_app_count"": 1,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""a09353d0-7a81-4e8c-a24b-136ce3871444"",
        ""name"": ""name-284"",
        ""service"": {
          ""guid"": ""8f5a1413-f989-4f3e-9af7-a96bec70b1f5"",
          ""label"": ""label-27"",
          ""provider"": ""provider-27"",
          ""version"": ""version-11""
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("203294b3-2052-4a22-90c0-c85eda612876", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-278", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1b5963cd-1822-40ed-8c2f-9a627b829bf3"",
    ""url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-214"",
    ""organization_guid"": ""91e53636-afe0-4e1d-a47d-984b6be54d61"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/91e53636-afe0-4e1d-a47d-984b6be54d61"",
    ""developers_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/developers"",
    ""managers_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/managers"",
    ""auditors_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/auditors"",
    ""apps_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/apps"",
    ""routes_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/routes"",
    ""domains_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/domains"",
    ""service_instances_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/service_instances"",
    ""app_events_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/app_events"",
    ""events_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/events"",
    ""security_groups_url"": ""/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("1b5963cd-1822-40ed-8c2f-9a627b829bf3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-214", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("91e53636-afe0-4e1d-a47d-984b6be54d61", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/91e53636-afe0-4e1d-a47d-984b6be54d61", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b5963cd-1822-40ed-8c2f-9a627b829bf3/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-85"",
        ""url"": ""/v2/users/uaa-id-85"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-85/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-85/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-85/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-85/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-85/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-85/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-85/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-85", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-85", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-85/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""14e90e98-5789-4f6d-87d4-e34bc3d77cb5"",
    ""url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-206"",
    ""organization_guid"": ""53d2a9f0-5287-4548-8a75-ec5e90a26527"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/53d2a9f0-5287-4548-8a75-ec5e90a26527"",
    ""developers_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/developers"",
    ""managers_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/managers"",
    ""auditors_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/auditors"",
    ""apps_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/apps"",
    ""routes_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/routes"",
    ""domains_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/domains"",
    ""service_instances_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/service_instances"",
    ""app_events_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/app_events"",
    ""events_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/events"",
    ""security_groups_url"": ""/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Result;


                Assert.AreEqual("14e90e98-5789-4f6d-87d4-e34bc3d77cb5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-206", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("53d2a9f0-5287-4548-8a75-ec5e90a26527", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/53d2a9f0-5287-4548-8a75-ec5e90a26527", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/14e90e98-5789-4f6d-87d4-e34bc3d77cb5/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""4c21a009-dd25-475b-9c3a-3f55465a6a2c"",
    ""url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c"",
    ""created_at"": ""2015-03-25T13:48:41+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""d026f4dc-022d-4200-9661-a028b413bd8a"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/d026f4dc-022d-4200-9661-a028b413bd8a"",
    ""developers_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/developers"",
    ""managers_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/managers"",
    ""auditors_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/auditors"",
    ""apps_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/apps"",
    ""routes_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/routes"",
    ""domains_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/domains"",
    ""service_instances_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/service_instances"",
    ""app_events_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/app_events"",
    ""events_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/events"",
    ""security_groups_url"": ""/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("4c21a009-dd25-475b-9c3a-3f55465a6a2c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d026f4dc-022d-4200-9661-a028b413bd8a", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/d026f4dc-022d-4200-9661-a028b413bd8a", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4c21a009-dd25-475b-9c3a-3f55465a6a2c/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""99566913-2abb-4d47-86c1-60439bb19611"",
    ""url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611"",
    ""created_at"": ""2015-03-25T13:48:41+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-226"",
    ""organization_guid"": ""f20e89f2-8d3b-438e-9c64-b3aae69cae80"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/f20e89f2-8d3b-438e-9c64-b3aae69cae80"",
    ""developers_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/developers"",
    ""managers_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/managers"",
    ""auditors_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/auditors"",
    ""apps_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/apps"",
    ""routes_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/routes"",
    ""domains_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/domains"",
    ""service_instances_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/service_instances"",
    ""app_events_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/app_events"",
    ""events_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/events"",
    ""security_groups_url"": ""/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Result;


                Assert.AreEqual("99566913-2abb-4d47-86c1-60439bb19611", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-226", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f20e89f2-8d3b-438e-9c64-b3aae69cae80", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/f20e89f2-8d3b-438e-9c64-b3aae69cae80", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/99566913-2abb-4d47-86c1-60439bb19611/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-94"",
        ""url"": ""/v2/users/uaa-id-94"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-94/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-94/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-94/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-94/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-94/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-94/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-94/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-94", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-94", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-94/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-94/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a84b9252-5599-4d88-a27b-45aaa2767cbf"",
        ""url"": ""/v2/service_instances/a84b9252-5599-4d88-a27b-45aaa2767cbf"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-248"",
        ""credentials"": {
          ""creds-key-103"": ""creds-val-103""
        },
        ""service_plan_guid"": ""8d3464ad-9e0b-4d84-be69-7b0ebb9a0f28"",
        ""space_guid"": ""4fc5d776-eabd-4187-9396-c344a06862a4"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""space_url"": ""/v2/spaces/4fc5d776-eabd-4187-9396-c344a06862a4"",
        ""service_plan_url"": ""/v2/service_plans/8d3464ad-9e0b-4d84-be69-7b0ebb9a0f28"",
        ""service_bindings_url"": ""/v2/service_instances/a84b9252-5599-4d88-a27b-45aaa2767cbf/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a84b9252-5599-4d88-a27b-45aaa2767cbf", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/a84b9252-5599-4d88-a27b-45aaa2767cbf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-248", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("8d3464ad-9e0b-4d84-be69-7b0ebb9a0f28", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("4fc5d776-eabd-4187-9396-c344a06862a4", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/4fc5d776-eabd-4187-9396-c344a06862a4", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/8d3464ad-9e0b-4d84-be69-7b0ebb9a0f28", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/a84b9252-5599-4d88-a27b-45aaa2767cbf/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""03123b8a-567c-4996-b054-2cc7fdb76ea8"",
    ""url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-217"",
    ""organization_guid"": ""baabea11-fac8-4455-a096-73d382e0fc05"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/baabea11-fac8-4455-a096-73d382e0fc05"",
    ""developers_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/developers"",
    ""managers_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/managers"",
    ""auditors_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/auditors"",
    ""apps_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/apps"",
    ""routes_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/routes"",
    ""domains_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/domains"",
    ""service_instances_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/service_instances"",
    ""app_events_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/app_events"",
    ""events_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/events"",
    ""security_groups_url"": ""/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Result;


                Assert.AreEqual("03123b8a-567c-4996-b054-2cc7fdb76ea8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-217", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("baabea11-fac8-4455-a096-73d382e0fc05", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/baabea11-fac8-4455-a096-73d382e0fc05", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/03123b8a-567c-4996-b054-2cc7fdb76ea8/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300"",
        ""url"": ""/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": ""2015-03-25T13:48:41+00:00""
      },
      ""entity"": {
        ""name"": ""name-256"",
        ""production"": false,
        ""space_guid"": ""d93cf5a4-fe85-49a7-b0c4-9ecf3c9d1a19"",
        ""stack_guid"": ""de69aae5-1bf0-4ac8-ba8d-0f75104e129a"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""5c8a9bb2-8bea-46ef-962a-f05142978e9a"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-03-25T13:48:41+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/d93cf5a4-fe85-49a7-b0c4-9ecf3c9d1a19"",
        ""stack_url"": ""/v2/stacks/de69aae5-1bf0-4ac8-ba8d-0f75104e129a"",
        ""events_url"": ""/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/events"",
        ""service_bindings_url"": ""/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/service_bindings"",
        ""routes_url"": ""/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-256", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("d93cf5a4-fe85-49a7-b0c4-9ecf3c9d1a19", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("de69aae5-1bf0-4ac8-ba8d-0f75104e129a", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("5c8a9bb2-8bea-46ef-962a-f05142978e9a", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/d93cf5a4-fe85-49a7-b0c4-9ecf3c9d1a19", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/de69aae5-1bf0-4ac8-ba8d-0f75104e129a", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/9d6d53a2-ed4a-4465-a3d2-f3a0fedcd300/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""667fd882-5c9c-4dae-adfc-1cdc4608ffe9"",
    ""url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9"",
    ""created_at"": ""2015-03-25T13:48:42+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-269"",
    ""organization_guid"": ""e15cf28b-8e52-44ad-aed8-c006fc6b7ba0"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/e15cf28b-8e52-44ad-aed8-c006fc6b7ba0"",
    ""developers_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/developers"",
    ""managers_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/managers"",
    ""auditors_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/auditors"",
    ""apps_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/apps"",
    ""routes_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/routes"",
    ""domains_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/domains"",
    ""service_instances_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/service_instances"",
    ""app_events_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/app_events"",
    ""events_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/events"",
    ""security_groups_url"": ""/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("667fd882-5c9c-4dae-adfc-1cdc4608ffe9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:42+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-269", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("e15cf28b-8e52-44ad-aed8-c006fc6b7ba0", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/e15cf28b-8e52-44ad-aed8-c006fc6b7ba0", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/667fd882-5c9c-4dae-adfc-1cdc4608ffe9/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""03c5c621-bf56-4bb2-98ac-26d0a0e1e117"",
        ""url"": ""/v2/events/03c5c621-bf56-4bb2-98ac-26d0a0e1e117"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-101"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""94c5525f-7322-4b55-80f9-66039aca0e57"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-258"",
        ""timestamp"": ""2015-03-25T13:48:41+00:00"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""94c5525f-7322-4b55-80f9-66039aca0e57"",
        ""organization_guid"": ""5ae417c0-d89f-47b7-8040-834758c388f9""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("03c5c621-bf56-4bb2-98ac-26d0a0e1e117", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/03c5c621-bf56-4bb2-98ac-26d0a0e1e117", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-101", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("94c5525f-7322-4b55-80f9-66039aca0e57", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-258", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("94c5525f-7322-4b55-80f9-66039aca0e57", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("5ae417c0-d89f-47b7-8040-834758c388f9", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""94204b5b-b2d0-4d34-85d9-5082f4999062"",
    ""url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062"",
    ""created_at"": ""2015-03-25T13:48:40+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-201"",
    ""organization_guid"": ""30422a1f-9bf6-4e30-8849-b03f50ae293d"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/30422a1f-9bf6-4e30-8849-b03f50ae293d"",
    ""developers_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/developers"",
    ""managers_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/managers"",
    ""auditors_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/auditors"",
    ""apps_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/apps"",
    ""routes_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/routes"",
    ""domains_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/domains"",
    ""service_instances_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/service_instances"",
    ""app_events_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/app_events"",
    ""events_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/events"",
    ""security_groups_url"": ""/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("94204b5b-b2d0-4d34-85d9-5082f4999062", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-201", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("30422a1f-9bf6-4e30-8849-b03f50ae293d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/30422a1f-9bf6-4e30-8849-b03f50ae293d", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/94204b5b-b2d0-4d34-85d9-5082f4999062/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3d455d61-ee79-411d-8c5b-e591bba3111b"",
    ""url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b"",
    ""created_at"": ""2015-03-25T13:48:41+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-235"",
    ""organization_guid"": ""c54c7d84-dbef-4106-8d42-8c129b240c5d"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/c54c7d84-dbef-4106-8d42-8c129b240c5d"",
    ""developers_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/developers"",
    ""managers_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/managers"",
    ""auditors_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/auditors"",
    ""apps_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/apps"",
    ""routes_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/routes"",
    ""domains_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/domains"",
    ""service_instances_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/service_instances"",
    ""app_events_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/app_events"",
    ""events_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/events"",
    ""security_groups_url"": ""/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Result;


                Assert.AreEqual("3d455d61-ee79-411d-8c5b-e591bba3111b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-235", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("c54c7d84-dbef-4106-8d42-8c129b240c5d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/c54c7d84-dbef-4106-8d42-8c129b240c5d", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3d455d61-ee79-411d-8c5b-e591bba3111b/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""fc029ec8-ab8f-4162-93fb-7161ef99e3bb"",
        ""url"": ""/v2/services/fc029ec8-ab8f-4162-93fb-7161ef99e3bb"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-9"",
        ""provider"": ""provider-9"",
        ""url"": ""https://foo.com/url-9"",
        ""description"": ""desc-17"",
        ""long_description"": null,
        ""version"": ""version-9"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""ad1fa6cf-d660-4701-ab94-5c0eb9e33bd1"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/fc029ec8-ab8f-4162-93fb-7161ef99e3bb/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("fc029ec8-ab8f-4162-93fb-7161ef99e3bb", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/fc029ec8-ab8f-4162-93fb-7161ef99e3bb", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-9", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-9", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-9", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-17", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-9", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("ad1fa6cf-d660-4701-ab94-5c0eb9e33bd1", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/fc029ec8-ab8f-4162-93fb-7161ef99e3bb/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""87da83e9-0575-4963-ab31-6d0821d4c5bc"",
    ""url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc"",
    ""created_at"": ""2015-03-25T13:48:41+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-223"",
    ""organization_guid"": ""ad3e1126-0ef0-4ba4-b40f-746cca3e3438"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/ad3e1126-0ef0-4ba4-b40f-746cca3e3438"",
    ""developers_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/developers"",
    ""managers_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/managers"",
    ""auditors_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/auditors"",
    ""apps_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/apps"",
    ""routes_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/routes"",
    ""domains_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/domains"",
    ""service_instances_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/service_instances"",
    ""app_events_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/app_events"",
    ""events_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/events"",
    ""security_groups_url"": ""/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("87da83e9-0575-4963-ab31-6d0821d4c5bc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-223", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ad3e1126-0ef0-4ba4-b40f-746cca3e3438", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/ad3e1126-0ef0-4ba4-b40f-746cca3e3438", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/87da83e9-0575-4963-ab31-6d0821d4c5bc/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""feab330c-4052-4172-805b-007b3b4247c8"",
        ""url"": ""/v2/security_groups/feab330c-4052-4172-805b-007b3b4247c8"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-213"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/feab330c-4052-4172-805b-007b3b4247c8/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("feab330c-4052-4172-805b-007b3b4247c8", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/feab330c-4052-4172-805b-007b3b4247c8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-213", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/feab330c-4052-4172-805b-007b3b4247c8/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a65af475-080b-4c42-8412-a1d987dfc3d6"",
        ""url"": ""/v2/domains/a65af475-080b-4c42-8412-a1d987dfc3d6"",
        ""created_at"": ""2015-03-25T13:48:37+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""829ffdbd-e681-4fc0-8093-092f2210879f"",
        ""url"": ""/v2/domains/829ffdbd-e681-4fc0-8093-092f2210879f"",
        ""created_at"": ""2015-03-25T13:48:37+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a65af475-080b-4c42-8412-a1d987dfc3d6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/a65af475-080b-4c42-8412-a1d987dfc3d6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:37+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("829ffdbd-e681-4fc0-8093-092f2210879f", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/829ffdbd-e681-4fc0-8093-092f2210879f", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:37+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bae20ef9-70aa-4627-a25f-80688c088d9a"",
        ""url"": ""/v2/routes/bae20ef9-70aa-4627-a25f-80688c088d9a"",
        ""created_at"": ""2015-03-25T13:48:40+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-1"",
        ""domain_guid"": ""9d8ee7ba-653e-4943-b63b-57e9a0c1ab18"",
        ""space_guid"": ""1a7f1b0f-d2ba-417f-8474-3f5ca4b96502"",
        ""domain_url"": ""/v2/domains/9d8ee7ba-653e-4943-b63b-57e9a0c1ab18"",
        ""space_url"": ""/v2/spaces/1a7f1b0f-d2ba-417f-8474-3f5ca4b96502"",
        ""apps_url"": ""/v2/routes/bae20ef9-70aa-4627-a25f-80688c088d9a/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bae20ef9-70aa-4627-a25f-80688c088d9a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/bae20ef9-70aa-4627-a25f-80688c088d9a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:40+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-1", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("9d8ee7ba-653e-4943-b63b-57e9a0c1ab18", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("1a7f1b0f-d2ba-417f-8474-3f5ca4b96502", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/9d8ee7ba-653e-4943-b63b-57e9a0c1ab18", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/1a7f1b0f-d2ba-417f-8474-3f5ca4b96502", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/bae20ef9-70aa-4627-a25f-80688c088d9a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""834882be-b320-4d16-84e1-7db46cecef82"",
        ""url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82"",
        ""created_at"": ""2015-03-25T13:48:42+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-275"",
        ""organization_guid"": ""1b2448e0-3c7b-467a-9a0f-de6625cfda29"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/1b2448e0-3c7b-467a-9a0f-de6625cfda29"",
        ""developers_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/developers"",
        ""managers_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/managers"",
        ""auditors_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/auditors"",
        ""apps_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/apps"",
        ""routes_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/routes"",
        ""domains_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/domains"",
        ""service_instances_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/service_instances"",
        ""app_events_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/app_events"",
        ""events_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/events"",
        ""security_groups_url"": ""/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("834882be-b320-4d16-84e1-7db46cecef82", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:42+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-275", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("1b2448e0-3c7b-467a-9a0f-de6625cfda29", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/1b2448e0-3c7b-467a-9a0f-de6625cfda29", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/834882be-b320-4d16-84e1-7db46cecef82/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a744da92-9d48-4ad3-8409-54bf9d3b8ca4"",
    ""url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4"",
    ""created_at"": ""2015-03-25T13:48:41+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-232"",
    ""organization_guid"": ""8f931c01-a538-472b-b5ff-64f942c38699"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/8f931c01-a538-472b-b5ff-64f942c38699"",
    ""developers_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/developers"",
    ""managers_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/managers"",
    ""auditors_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/auditors"",
    ""apps_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/apps"",
    ""routes_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/routes"",
    ""domains_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/domains"",
    ""service_instances_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/service_instances"",
    ""app_events_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/app_events"",
    ""events_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/events"",
    ""security_groups_url"": ""/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("a744da92-9d48-4ad3-8409-54bf9d3b8ca4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-232", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("8f931c01-a538-472b-b5ff-64f942c38699", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/8f931c01-a538-472b-b5ff-64f942c38699", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/a744da92-9d48-4ad3-8409-54bf9d3b8ca4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""911a6ca7-bd3d-4b41-be57-f7b821be399e"",
    ""url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e"",
    ""created_at"": ""2015-03-25T13:48:42+00:00"",
    ""updated_at"": ""2015-03-25T13:48:42+00:00""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""5188906e-5441-4988-90b8-23f721518941"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/5188906e-5441-4988-90b8-23f721518941"",
    ""developers_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/developers"",
    ""managers_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/managers"",
    ""auditors_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/auditors"",
    ""apps_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/apps"",
    ""routes_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/routes"",
    ""domains_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/domains"",
    ""service_instances_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/service_instances"",
    ""app_events_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/app_events"",
    ""events_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/events"",
    ""security_groups_url"": ""/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("911a6ca7-bd3d-4b41-be57-f7b821be399e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:42+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-03-25T13:48:42+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5188906e-5441-4988-90b8-23f721518941", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/5188906e-5441-4988-90b8-23f721518941", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/911a6ca7-bd3d-4b41-be57-f7b821be399e/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-76"",
        ""url"": ""/v2/users/uaa-id-76"",
        ""created_at"": ""2015-03-25T13:48:41+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-76/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-76/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-76/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-76/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-76/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-76/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-76/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-76", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-76", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-03-25T13:48:41+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-76/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-76/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

    }
}