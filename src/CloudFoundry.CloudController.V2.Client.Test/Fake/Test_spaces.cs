//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void AssociateManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5e95fb29-7317-4679-ba2c-cd8273c26ed3"",
    ""url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2382"",
    ""organization_guid"": ""5e95fb29-7317-4679-ba2c-cd8273c26ed3"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/c185d960-752d-45e4-bd39-c472bec654f8"",
    ""developers_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/developers"",
    ""managers_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/managers"",
    ""auditors_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/auditors"",
    ""apps_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/apps"",
    ""routes_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/routes"",
    ""domains_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/domains"",
    ""service_instances_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/service_instances"",
    ""app_events_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/app_events"",
    ""events_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/events"",
    ""security_groups_url"": ""/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateManagerWithSpaceByUsernameRequest value = new AssociateManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("5e95fb29-7317-4679-ba2c-cd8273c26ed3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2382", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5e95fb29-7317-4679-ba2c-cd8273c26ed3", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/c185d960-752d-45e4-bd39-c472bec654f8", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/2b2815a8-1c51-4ef1-a964-c8a515dc03c4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ad443cef-5462-487c-9f95-d851ef1cd2db"",
    ""url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2400"",
    ""organization_guid"": ""ad443cef-5462-487c-9f95-d851ef1cd2db"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/9a408fa2-0f21-4e2f-804a-db5f1cc2de7f"",
    ""developers_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/developers"",
    ""managers_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/managers"",
    ""auditors_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/auditors"",
    ""apps_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/apps"",
    ""routes_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/routes"",
    ""domains_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/domains"",
    ""service_instances_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/service_instances"",
    ""app_events_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/app_events"",
    ""events_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/events"",
    ""security_groups_url"": ""/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveDeveloperWithSpaceByUsernameRequest value = new RemoveDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("ad443cef-5462-487c-9f95-d851ef1cd2db", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2400", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ad443cef-5462-487c-9f95-d851ef1cd2db", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9a408fa2-0f21-4e2f-804a-db5f1cc2de7f", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/340757fa-1ccb-492e-b16e-63c65f75a9c7/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""172deea6-3c7d-454d-bc7e-ebbb5d7990e4"",
        ""url"": ""/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0"",
        ""created_at"": ""2016-09-02T11:52:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2347"",
        ""credentials"": {
          ""creds-key-75"": ""creds-val-75""
        },
        ""service_plan_guid"": ""172deea6-3c7d-454d-bc7e-ebbb5d7990e4"",
        ""space_guid"": ""172deea6-3c7d-454d-bc7e-ebbb5d7990e4"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""space_url"": ""/v2/spaces/24dac846-a359-4809-b4bb-6df1bcbd1a65"",
        ""service_plan_url"": ""/v2/service_plans/2c42f4ee-12cc-4d94-9a6a-0ce758c66f7b"",
        ""service_bindings_url"": ""/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/service_keys"",
        ""routes_url"": ""/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("172deea6-3c7d-454d-bc7e-ebbb5d7990e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2347", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("172deea6-3c7d-454d-bc7e-ebbb5d7990e4", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("172deea6-3c7d-454d-bc7e-ebbb5d7990e4", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/24dac846-a359-4809-b4bb-6df1bcbd1a65", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/2c42f4ee-12cc-4d94-9a6a-0ce758c66f7b", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/e1039f93-9ba4-43bc-b86f-2ad9679d3cc0/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""28979ae7-d655-48e2-9cb9-dde0da113f95"",
    ""url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2397"",
    ""organization_guid"": ""28979ae7-d655-48e2-9cb9-dde0da113f95"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/05ff0331-7905-4ef8-91bd-2236b8cd97ee"",
    ""developers_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/developers"",
    ""managers_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/managers"",
    ""auditors_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/auditors"",
    ""apps_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/apps"",
    ""routes_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/routes"",
    ""domains_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/domains"",
    ""service_instances_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/service_instances"",
    ""app_events_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/app_events"",
    ""events_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/events"",
    ""security_groups_url"": ""/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateDeveloperWithSpaceByUsernameRequest value = new AssociateDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("28979ae7-d655-48e2-9cb9-dde0da113f95", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2397", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("28979ae7-d655-48e2-9cb9-dde0da113f95", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/05ff0331-7905-4ef8-91bd-2236b8cd97ee", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/6fee0cd5-ca35-4727-bab9-b6d27191febb/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3b09dff5-b96e-44ef-94fc-d8d27b72b630"",
    ""url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4"",
    ""created_at"": ""2016-09-02T11:52:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2339"",
    ""organization_guid"": ""3b09dff5-b96e-44ef-94fc-d8d27b72b630"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/bba66744-d34d-4836-b87d-b7e3613c6954"",
    ""developers_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/developers"",
    ""managers_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/managers"",
    ""auditors_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/auditors"",
    ""apps_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/apps"",
    ""routes_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/routes"",
    ""domains_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/domains"",
    ""service_instances_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/service_instances"",
    ""app_events_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/app_events"",
    ""events_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/events"",
    ""security_groups_url"": ""/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("3b09dff5-b96e-44ef-94fc-d8d27b72b630", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2339", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("3b09dff5-b96e-44ef-94fc-d8d27b72b630", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/bba66744-d34d-4836-b87d-b7e3613c6954", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/12814fe9-7119-41c3-bbe5-0c4d4e8788b4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""95b36394-8ff2-443b-8408-995081590da9"",
        ""url"": ""/v2/services/4259810a-71ec-4a2a-b6c6-d4967112420e"",
        ""created_at"": ""2016-09-02T11:52:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-77"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-210"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": 1,
        ""bindable"": 1,
        ""unique_id"": ""2998ab8e-7217-4ee7-b879-ea4e78a7db08"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""95b36394-8ff2-443b-8408-995081590da9"",
        ""plan_updateable"": 0,
        ""service_plans_url"": ""/v2/services/4259810a-71ec-4a2a-b6c6-d4967112420e/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("95b36394-8ff2-443b-8408-995081590da9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/4259810a-71ec-4a2a-b6c6-d4967112420e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-77", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-210", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("2998ab8e-7217-4ee7-b879-ea4e78a7db08", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("95b36394-8ff2-443b-8408-995081590da9", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/4259810a-71ec-4a2a-b6c6-d4967112420e/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9d1dbe90-e825-4400-9257-af015f91e7c7"",
        ""url"": ""/v2/users/uaa-id-361"",
        ""created_at"": ""2016-09-02T11:52:29Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""space_roles"": [
          ""space_developer"",
          ""space_manager"",
          ""space_auditor""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-361/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-361/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-361/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-361/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-361/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-361/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-361/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrievingRolesOfAllUsersInSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9d1dbe90-e825-4400-9257-af015f91e7c7", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-361", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-361/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-361/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0d457be3-ada5-44b9-8960-c632b89b68b9"",
    ""url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce"",
    ""created_at"": ""2016-09-02T11:52:26Z"",
    ""updated_at"": ""2016-09-02T11:52:27Z""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""0d457be3-ada5-44b9-8960-c632b89b68b9"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/28f66ef6-c0d4-4c65-bee1-f084dd5fa54c"",
    ""developers_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/developers"",
    ""managers_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/managers"",
    ""auditors_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/auditors"",
    ""apps_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/apps"",
    ""routes_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/routes"",
    ""domains_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/domains"",
    ""service_instances_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/service_instances"",
    ""app_events_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/app_events"",
    ""events_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/events"",
    ""security_groups_url"": ""/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("0d457be3-ada5-44b9-8960-c632b89b68b9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0d457be3-ada5-44b9-8960-c632b89b68b9", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/28f66ef6-c0d4-4c65-bee1-f084dd5fa54c", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4d24791f-3c5f-442a-861b-f0057dff30ce/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
  ""name"": ""name-350"",
  ""apps"": [
    {
      ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
      ""urls"": [
        ""host-7.domain-13.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
          ""host"": ""host-7"",
          ""port"": null,
          ""path"": """",
          ""domain"": {
            ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
            ""name"": ""domain-13.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-353""
      ],
      ""running_instances"": 0,
      ""name"": ""name-356"",
      ""production"": false,
      ""space_guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
      ""stack_guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""detected_buildpack_guid"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""a15af94a-e598-432b-b815-4f74faca22f1"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""staging_failed_description"": null,
      ""diego"": false,
      ""docker_image"": null,
      ""package_updated_at"": ""2016-09-02T11:52:01Z"",
      ""detected_start_command"": """",
      ""enable_ssh"": true,
      ""docker_credentials_json"": {
        ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
      },
      ""ports"": null
    }
  ],
  ""services"": [
    {
      ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
      ""name"": ""name-353"",
      ""bound_app_count"": 1,
      ""last_operation"": {
        ""type"": ""create"",
        ""state"": ""succeeded"",
        ""description"": ""description goes here"",
        ""updated_at"": ""2016-09-02T11:52:01Z"",
        ""created_at"": ""2016-09-02T11:52:01Z""
      },
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
        ""name"": ""name-354"",
        ""service"": {
          ""guid"": ""14bb4fd5-6bf6-4e10-b03f-09b9c00be74f"",
          ""label"": ""label-13"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("14bb4fd5-6bf6-4e10-b03f-09b9c00be74f", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-350", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ea5a6697-af9d-4592-9db1-33eb6327a6b5"",
        ""url"": ""/v2/users/uaa-id-326"",
        ""created_at"": ""2016-09-02T11:52:28Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-326/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-326/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-326/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-326/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-326/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-326/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-326/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ea5a6697-af9d-4592-9db1-33eb6327a6b5", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-326", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-326/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-326/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""263d4eb7-170a-415a-95c1-c89c420c445d"",
        ""url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20"",
        ""created_at"": ""2016-09-02T11:52:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2316"",
        ""organization_guid"": ""263d4eb7-170a-415a-95c1-c89c420c445d"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/7308c3ce-b1ee-488c-9875-047c6718b8b3"",
        ""developers_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/developers"",
        ""managers_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/managers"",
        ""auditors_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/auditors"",
        ""apps_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/apps"",
        ""routes_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/routes"",
        ""domains_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/domains"",
        ""service_instances_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/service_instances"",
        ""app_events_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/app_events"",
        ""events_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/events"",
        ""security_groups_url"": ""/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("263d4eb7-170a-415a-95c1-c89c420c445d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2316", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("263d4eb7-170a-415a-95c1-c89c420c445d", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/7308c3ce-b1ee-488c-9875-047c6718b8b3", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/bf4aae38-dd0a-4be5-b2e3-27f1940fec20/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""1b138332-ac93-4a3e-90ea-a026764f2a8e"",
        ""url"": ""/v2/users/uaa-id-335"",
        ""created_at"": ""2016-09-02T11:52:28Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-335/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-335/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-335/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-335/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-335/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-335/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-335/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("1b138332-ac93-4a3e-90ea-a026764f2a8e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-335", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-335/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-335/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""45f7b08f-f583-4f15-a74d-12b3dceb4718"",
    ""url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785"",
    ""created_at"": ""2016-09-02T11:52:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2361"",
    ""organization_guid"": ""45f7b08f-f583-4f15-a74d-12b3dceb4718"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/defa9ee4-07e1-4fc2-85f7-ac6cf22738fd"",
    ""developers_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/developers"",
    ""managers_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/managers"",
    ""auditors_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/auditors"",
    ""apps_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/apps"",
    ""routes_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/routes"",
    ""domains_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/domains"",
    ""service_instances_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/service_instances"",
    ""app_events_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/app_events"",
    ""events_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/events"",
    ""security_groups_url"": ""/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveAuditorWithSpaceByUsernameRequest value = new RemoveAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("45f7b08f-f583-4f15-a74d-12b3dceb4718", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2361", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("45f7b08f-f583-4f15-a74d-12b3dceb4718", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/defa9ee4-07e1-4fc2-85f7-ac6cf22738fd", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9f361b93-ee3f-4f5d-8596-a93315917785/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9ff9f59f-5488-4f46-8d5b-fa57a3100877"",
        ""url"": ""/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35"",
        ""created_at"": ""2016-09-02T11:52:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-32"",
        ""path"": """",
        ""domain_guid"": ""9ff9f59f-5488-4f46-8d5b-fa57a3100877"",
        ""space_guid"": ""9ff9f59f-5488-4f46-8d5b-fa57a3100877"",
        ""service_instance_guid"": null,
        ""port"": null,
        ""domain_url"": ""/v2/private_domains/734c2b03-8cfd-40bc-a404-44242bfefc55"",
        ""space_url"": ""/v2/spaces/b7f54871-1dcd-44c1-8d8e-e37804ae75a8"",
        ""apps_url"": ""/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35/apps"",
        ""route_mappings_url"": ""/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9ff9f59f-5488-4f46-8d5b-fa57a3100877", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-32", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("9ff9f59f-5488-4f46-8d5b-fa57a3100877", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("9ff9f59f-5488-4f46-8d5b-fa57a3100877", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/private_domains/734c2b03-8cfd-40bc-a404-44242bfefc55", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/b7f54871-1dcd-44c1-8d8e-e37804ae75a8", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/05fd8a2f-e3b2-4a69-8a79-27827a535f35/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""095bcfc1-1c01-4bc0-8e26-1ccd1a698b65"",
        ""url"": ""/v2/shared_domains/ebc60470-1d5f-4bde-a8c2-8a6daa408328"",
        ""created_at"": ""2016-09-02T11:52:15Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""095bcfc1-1c01-4bc0-8e26-1ccd1a698b65"",
        ""url"": ""/v2/shared_domains/17dfca74-9414-44f7-b5a4-9f0c299dab79"",
        ""created_at"": ""2016-09-02T11:52:15Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null,
        ""router_group_type"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("095bcfc1-1c01-4bc0-8e26-1ccd1a698b65", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/ebc60470-1d5f-4bde-a8c2-8a6daa408328", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:15Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupType), true);
                Assert.AreEqual("095bcfc1-1c01-4bc0-8e26-1ccd1a698b65", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/17dfca74-9414-44f7-b5a4-9f0c299dab79", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:15Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupType), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""206d069f-562b-429b-91fb-9a889c69d391"",
    ""url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2373"",
    ""organization_guid"": ""206d069f-562b-429b-91fb-9a889c69d391"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/7bbb1ff0-1ad5-4481-81d2-f1b8e5880b29"",
    ""developers_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/developers"",
    ""managers_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/managers"",
    ""auditors_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/auditors"",
    ""apps_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/apps"",
    ""routes_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/routes"",
    ""domains_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/domains"",
    ""service_instances_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/service_instances"",
    ""app_events_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/app_events"",
    ""events_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/events"",
    ""security_groups_url"": ""/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("206d069f-562b-429b-91fb-9a889c69d391", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2373", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("206d069f-562b-429b-91fb-9a889c69d391", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/7bbb1ff0-1ad5-4481-81d2-f1b8e5880b29", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/99ccdd38-65ac-4e0b-a21e-e5ebe336e470/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d88e5e33-982b-44f7-ad31-70dc642f7e0e"",
        ""url"": ""/v2/users/uaa-id-350"",
        ""created_at"": ""2016-09-02T11:52:28Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""developer@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-350/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-350/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-350/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-350/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-350/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-350/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-350/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d88e5e33-982b-44f7-ad31-70dc642f7e0e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-350", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("developer@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-350/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-350/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""597659ae-9bc7-491f-9e32-b0290506efbc"",
    ""url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2388"",
    ""organization_guid"": ""597659ae-9bc7-491f-9e32-b0290506efbc"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/0b109e1a-d81f-4fe3-8e0a-60e8eba2ef63"",
    ""developers_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/developers"",
    ""managers_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/managers"",
    ""auditors_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/auditors"",
    ""apps_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/apps"",
    ""routes_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/routes"",
    ""domains_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/domains"",
    ""service_instances_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/service_instances"",
    ""app_events_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/app_events"",
    ""events_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/events"",
    ""security_groups_url"": ""/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("597659ae-9bc7-491f-9e32-b0290506efbc", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2388", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("597659ae-9bc7-491f-9e32-b0290506efbc", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/0b109e1a-d81f-4fe3-8e0a-60e8eba2ef63", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/e0945267-a339-4290-b8bb-ea51587df578/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""da84b602-e181-4111-88d4-1f9328927800"",
    ""url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b"",
    ""created_at"": ""2016-09-02T11:52:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2319"",
    ""organization_guid"": ""da84b602-e181-4111-88d4-1f9328927800"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/bae7edeb-30ef-4f18-a56f-37a5680233ce"",
    ""developers_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/developers"",
    ""managers_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/managers"",
    ""auditors_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/auditors"",
    ""apps_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/apps"",
    ""routes_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/routes"",
    ""domains_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/domains"",
    ""service_instances_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/service_instances"",
    ""app_events_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/app_events"",
    ""events_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/events"",
    ""security_groups_url"": ""/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("da84b602-e181-4111-88d4-1f9328927800", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2319", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("da84b602-e181-4111-88d4-1f9328927800", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/bae7edeb-30ef-4f18-a56f-37a5680233ce", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/e23221f2-55b4-4271-b2af-5d898ad7906b/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9aa51a4c-67a7-40a7-a128-3e261ee5ee6d"",
    ""url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24"",
    ""created_at"": ""2016-09-02T11:52:28Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2385"",
    ""organization_guid"": ""9aa51a4c-67a7-40a7-a128-3e261ee5ee6d"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/9a250490-6d3f-4c7f-9c49-bb3f3715ed3e"",
    ""developers_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/developers"",
    ""managers_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/managers"",
    ""auditors_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/auditors"",
    ""apps_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/apps"",
    ""routes_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/routes"",
    ""domains_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/domains"",
    ""service_instances_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/service_instances"",
    ""app_events_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/app_events"",
    ""events_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/events"",
    ""security_groups_url"": ""/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                RemoveManagerWithSpaceByUsernameRequest value = new RemoveManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.RemoveManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("9aa51a4c-67a7-40a7-a128-3e261ee5ee6d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2385", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("9aa51a4c-67a7-40a7-a128-3e261ee5ee6d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9a250490-6d3f-4c7f-9c49-bb3f3715ed3e", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/94c5eabc-f9fd-4918-bb4d-afd0899f8b24/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a142a346-dc03-4f67-9238-02bfe270b53a"",
        ""url"": ""/v2/security_groups/3506fa95-944e-4f95-ad3d-ba80dfc50ca6"",
        ""created_at"": ""2016-09-02T11:52:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2334"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/3506fa95-944e-4f95-ad3d-ba80dfc50ca6/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a142a346-dc03-4f67-9238-02bfe270b53a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/3506fa95-944e-4f95-ad3d-ba80dfc50ca6", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2334", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/3506fa95-944e-4f95-ad3d-ba80dfc50ca6/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""98d4b4ca-0faa-48f2-bd73-7ac53f6abdcf"",
    ""url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f"",
    ""created_at"": ""2016-09-02T11:52:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2358"",
    ""organization_guid"": ""98d4b4ca-0faa-48f2-bd73-7ac53f6abdcf"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/b2a0f243-6632-411d-915b-02d689b9e761"",
    ""developers_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/developers"",
    ""managers_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/managers"",
    ""auditors_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/auditors"",
    ""apps_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/apps"",
    ""routes_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/routes"",
    ""domains_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/domains"",
    ""service_instances_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/service_instances"",
    ""app_events_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/app_events"",
    ""events_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/events"",
    ""security_groups_url"": ""/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateAuditorWithSpaceByUsernameRequest value = new AssociateAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("98d4b4ca-0faa-48f2-bd73-7ac53f6abdcf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2358", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("98d4b4ca-0faa-48f2-bd73-7ac53f6abdcf", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/b2a0f243-6632-411d-915b-02d689b9e761", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3a0518ac-a1c8-42ba-a820-17427239d25f/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f34d7b8f-6aa6-4af4-9056-6f40e3de9c16"",
    ""url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9"",
    ""created_at"": ""2016-09-02T11:52:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""f34d7b8f-6aa6-4af4-9056-6f40e3de9c16"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/488d7368-70f1-478f-a319-56ce1c0d212a"",
    ""developers_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/developers"",
    ""managers_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/managers"",
    ""auditors_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/auditors"",
    ""apps_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/apps"",
    ""routes_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/routes"",
    ""domains_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/domains"",
    ""service_instances_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/service_instances"",
    ""app_events_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/app_events"",
    ""events_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/events"",
    ""security_groups_url"": ""/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("f34d7b8f-6aa6-4af4-9056-6f40e3de9c16", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f34d7b8f-6aa6-4af4-9056-6f40e3de9c16", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/488d7368-70f1-478f-a319-56ce1c0d212a", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/ceda42d2-89dc-40fd-9455-1950f55d95d9/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d6482179-5119-4901-9d5d-5740caf17c9e"",
        ""url"": ""/v2/events/1ac6eacf-fe99-4a4b-8eeb-8519a350f849"",
        ""created_at"": ""2016-09-02T11:52:27Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-306"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""f58e01a8-ea84-4c96-ad65-dd776c2c7032"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-2328"",
        ""timestamp"": ""2016-09-02T11:52:27Z"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""d6482179-5119-4901-9d5d-5740caf17c9e"",
        ""organization_guid"": ""d6482179-5119-4901-9d5d-5740caf17c9e""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d6482179-5119-4901-9d5d-5740caf17c9e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/1ac6eacf-fe99-4a4b-8eeb-8519a350f849", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-306", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("f58e01a8-ea84-4c96-ad65-dd776c2c7032", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-2328", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("d6482179-5119-4901-9d5d-5740caf17c9e", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("d6482179-5119-4901-9d5d-5740caf17c9e", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bdb39ea2-97f4-448a-8c83-db1035ec0ff5"",
        ""url"": ""/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c"",
        ""created_at"": ""2016-09-02T11:52:29Z"",
        ""updated_at"": ""2016-09-02T11:52:29Z""
      },
      ""entity"": {
        ""name"": ""name-2409"",
        ""production"": false,
        ""space_guid"": ""bdb39ea2-97f4-448a-8c83-db1035ec0ff5"",
        ""stack_guid"": ""bdb39ea2-97f4-448a-8c83-db1035ec0ff5"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""detected_buildpack_guid"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""ded32867-ccd8-4447-a6e6-d4fde4424b84"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-09-02T11:52:28Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/89011c54-6f6f-44ff-9765-b3db5a79edf0"",
        ""stack_url"": ""/v2/stacks/a7c1fd06-d20b-481e-801e-638314e4332b"",
        ""routes_url"": ""/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/routes"",
        ""events_url"": ""/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/events"",
        ""service_bindings_url"": ""/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/service_bindings"",
        ""route_mappings_url"": ""/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bdb39ea2-97f4-448a-8c83-db1035ec0ff5", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-09-02T11:52:29Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2409", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("bdb39ea2-97f4-448a-8c83-db1035ec0ff5", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("bdb39ea2-97f4-448a-8c83-db1035ec0ff5", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("ded32867-ccd8-4447-a6e6-d4fde4424b84", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-09-02T11:52:28Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/89011c54-6f6f-44ff-9765-b3db5a79edf0", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/a7c1fd06-d20b-481e-801e-638314e4332b", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/350dad7c-c1f8-42e3-b712-4415ea178a3c/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3cb9695b-52c5-4c5d-94d3-4ed28a7e57a4"",
    ""url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396"",
    ""created_at"": ""2016-09-02T11:52:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2364"",
    ""organization_guid"": ""3cb9695b-52c5-4c5d-94d3-4ed28a7e57a4"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/0d02df9a-7b24-4b67-8e4e-ea6861e66c19"",
    ""developers_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/developers"",
    ""managers_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/managers"",
    ""auditors_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/auditors"",
    ""apps_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/apps"",
    ""routes_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/routes"",
    ""domains_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/domains"",
    ""service_instances_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/service_instances"",
    ""app_events_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/app_events"",
    ""events_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/events"",
    ""security_groups_url"": ""/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("3cb9695b-52c5-4c5d-94d3-4ed28a7e57a4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-09-02T11:52:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2364", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("3cb9695b-52c5-4c5d-94d3-4ed28a7e57a4", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/0d02df9a-7b24-4b67-8e4e-ea6861e66c19", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/1e0201c3-b886-424f-b247-ed7f6affa396/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

    }
}