//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""99cebd49-d800-4b21-873b-980002d8e83f"",
  ""name"": ""name-1926"",
  ""apps"": [
    {
      ""guid"": ""05934be8-907e-48e5-9121-71047ff5dc4f"",
      ""urls"": [
        ""host-18.domain-55.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""ac7a20b6-63de-4863-aecd-265200baecd2"",
          ""host"": ""host-18"",
          ""domain"": {
            ""guid"": ""96276ed4-16b2-4e94-9aa1-c9e5f54a8934"",
            ""name"": ""domain-55.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-1931""
      ],
      ""running_instances"": 0,
      ""name"": ""name-1929"",
      ""production"": false,
      ""space_guid"": ""99cebd49-d800-4b21-873b-980002d8e83f"",
      ""stack_guid"": ""27850372-494a-453a-a130-3dbccbec7dcd"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""1be9eb34-deff-4254-9723-6bf0e3fb4e15"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""docker_image"": null,
      ""package_updated_at"": ""2015-04-10T20:04:45+00:00"",
      ""detected_start_command"": """"
    }
  ],
  ""services"": [
    {
      ""guid"": ""3a47247c-542b-4b0c-8163-6ccbbd03fd2b"",
      ""name"": ""name-1931"",
      ""bound_app_count"": 1,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""3341293c-2c25-47ae-aaeb-822cd60e1db0"",
        ""name"": ""name-1932"",
        ""service"": {
          ""guid"": ""9156ff71-8bcf-4a17-b641-d92fe4ba0f9e"",
          ""label"": ""label-81"",
          ""provider"": ""provider-72"",
          ""version"": ""version-56""
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("99cebd49-d800-4b21-873b-980002d8e83f", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-1926", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""14e4ad4b-6b4a-4515-87a1-4150fb7eb25d"",
    ""url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1421"",
    ""organization_guid"": ""8c76af00-5576-49c3-b06b-34306506a9ec"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/8c76af00-5576-49c3-b06b-34306506a9ec"",
    ""developers_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/developers"",
    ""managers_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/managers"",
    ""auditors_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/auditors"",
    ""apps_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/apps"",
    ""routes_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/routes"",
    ""domains_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/domains"",
    ""service_instances_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/service_instances"",
    ""app_events_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/app_events"",
    ""events_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/events"",
    ""security_groups_url"": ""/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("14e4ad4b-6b4a-4515-87a1-4150fb7eb25d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1421", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("8c76af00-5576-49c3-b06b-34306506a9ec", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/8c76af00-5576-49c3-b06b-34306506a9ec", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/14e4ad4b-6b4a-4515-87a1-4150fb7eb25d/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-163"",
        ""url"": ""/v2/users/uaa-id-163"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-163/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-163/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-163/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-163/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-163/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-163/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-163/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-163", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-163", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-163/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-163/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d2068ad3-f180-4fb6-a399-bc1210a25135"",
    ""url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1410"",
    ""organization_guid"": ""961e8067-9d3e-433c-894c-da9e4202efd3"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/961e8067-9d3e-433c-894c-da9e4202efd3"",
    ""developers_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/developers"",
    ""managers_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/managers"",
    ""auditors_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/auditors"",
    ""apps_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/apps"",
    ""routes_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/routes"",
    ""domains_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/domains"",
    ""service_instances_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/service_instances"",
    ""app_events_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/app_events"",
    ""events_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/events"",
    ""security_groups_url"": ""/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Result;


                Assert.AreEqual("d2068ad3-f180-4fb6-a399-bc1210a25135", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1410", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("961e8067-9d3e-433c-894c-da9e4202efd3", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/961e8067-9d3e-433c-894c-da9e4202efd3", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d2068ad3-f180-4fb6-a399-bc1210a25135/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""147dbba2-2b94-45f0-b3f6-4aef356901c4"",
    ""url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""febd8551-d743-4926-aa92-4e5be3b4d37e"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/febd8551-d743-4926-aa92-4e5be3b4d37e"",
    ""developers_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/developers"",
    ""managers_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/managers"",
    ""auditors_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/auditors"",
    ""apps_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/apps"",
    ""routes_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/routes"",
    ""domains_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/domains"",
    ""service_instances_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/service_instances"",
    ""app_events_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/app_events"",
    ""events_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/events"",
    ""security_groups_url"": ""/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("147dbba2-2b94-45f0-b3f6-4aef356901c4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("febd8551-d743-4926-aa92-4e5be3b4d37e", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/febd8551-d743-4926-aa92-4e5be3b4d37e", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/147dbba2-2b94-45f0-b3f6-4aef356901c4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3676972e-e845-4dd3-b00b-1dbd80dd2f6d"",
    ""url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d"",
    ""created_at"": ""2015-04-10T20:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1379"",
    ""organization_guid"": ""1b48376a-11f6-42ea-9ac3-d4646e404573"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/1b48376a-11f6-42ea-9ac3-d4646e404573"",
    ""developers_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/developers"",
    ""managers_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/managers"",
    ""auditors_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/auditors"",
    ""apps_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/apps"",
    ""routes_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/routes"",
    ""domains_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/domains"",
    ""service_instances_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/service_instances"",
    ""app_events_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/app_events"",
    ""events_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/events"",
    ""security_groups_url"": ""/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Result;


                Assert.AreEqual("3676972e-e845-4dd3-b00b-1dbd80dd2f6d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1379", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1b48376a-11f6-42ea-9ac3-d4646e404573", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/1b48376a-11f6-42ea-9ac3-d4646e404573", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3676972e-e845-4dd3-b00b-1dbd80dd2f6d/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-191"",
        ""url"": ""/v2/users/uaa-id-191"",
        ""created_at"": ""2015-04-10T20:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-191/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-191/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-191/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-191/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-191/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-191/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-191/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-191", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-191", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-191/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-191/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d4387e77-b416-4f52-8225-3177cc62bba4"",
        ""url"": ""/v2/service_instances/d4387e77-b416-4f52-8225-3177cc62bba4"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1385"",
        ""credentials"": {
          ""creds-key-312"": ""creds-val-312""
        },
        ""service_plan_guid"": ""126616e8-1ff8-472d-848e-ad33025361ad"",
        ""space_guid"": ""7a87b1ab-ff96-42cb-90b5-d78cb88f24c4"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""space_url"": ""/v2/spaces/7a87b1ab-ff96-42cb-90b5-d78cb88f24c4"",
        ""service_plan_url"": ""/v2/service_plans/126616e8-1ff8-472d-848e-ad33025361ad"",
        ""service_bindings_url"": ""/v2/service_instances/d4387e77-b416-4f52-8225-3177cc62bba4/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d4387e77-b416-4f52-8225-3177cc62bba4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/d4387e77-b416-4f52-8225-3177cc62bba4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1385", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("126616e8-1ff8-472d-848e-ad33025361ad", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("7a87b1ab-ff96-42cb-90b5-d78cb88f24c4", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/7a87b1ab-ff96-42cb-90b5-d78cb88f24c4", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/126616e8-1ff8-472d-848e-ad33025361ad", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/d4387e77-b416-4f52-8225-3177cc62bba4/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""984dc52c-8bd4-4c81-af81-27005961836e"",
    ""url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1424"",
    ""organization_guid"": ""bf7e7fb6-7ccc-4d38-a283-f1fa5c4440fd"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/bf7e7fb6-7ccc-4d38-a283-f1fa5c4440fd"",
    ""developers_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/developers"",
    ""managers_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/managers"",
    ""auditors_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/auditors"",
    ""apps_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/apps"",
    ""routes_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/routes"",
    ""domains_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/domains"",
    ""service_instances_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/service_instances"",
    ""app_events_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/app_events"",
    ""events_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/events"",
    ""security_groups_url"": ""/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Result;


                Assert.AreEqual("984dc52c-8bd4-4c81-af81-27005961836e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1424", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("bf7e7fb6-7ccc-4d38-a283-f1fa5c4440fd", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/bf7e7fb6-7ccc-4d38-a283-f1fa5c4440fd", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/984dc52c-8bd4-4c81-af81-27005961836e/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""90dee88b-adb7-4b28-b350-335011da0c9e"",
        ""url"": ""/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": ""2015-04-10T20:04:35+00:00""
      },
      ""entity"": {
        ""name"": ""name-1390"",
        ""production"": false,
        ""space_guid"": ""1e7a4af4-a20d-40b9-b9d1-ea6b325104e9"",
        ""stack_guid"": ""f48c7aa1-6229-4d1e-8b19-f954ec270f9c"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""51261b4c-3b77-4fd0-a68e-5c3197637baf"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""docker_image"": null,
        ""package_updated_at"": ""2015-04-10T20:04:35+00:00"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/1e7a4af4-a20d-40b9-b9d1-ea6b325104e9"",
        ""stack_url"": ""/v2/stacks/f48c7aa1-6229-4d1e-8b19-f954ec270f9c"",
        ""events_url"": ""/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/events"",
        ""service_bindings_url"": ""/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/service_bindings"",
        ""routes_url"": ""/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("90dee88b-adb7-4b28-b350-335011da0c9e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1390", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("1e7a4af4-a20d-40b9-b9d1-ea6b325104e9", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("f48c7aa1-6229-4d1e-8b19-f954ec270f9c", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("51261b4c-3b77-4fd0-a68e-5c3197637baf", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/1e7a4af4-a20d-40b9-b9d1-ea6b325104e9", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/f48c7aa1-6229-4d1e-8b19-f954ec270f9c", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/90dee88b-adb7-4b28-b350-335011da0c9e/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9c318c52-31dc-49a9-8f20-c918a6046ac1"",
    ""url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1439"",
    ""organization_guid"": ""178c1b1f-b14b-45c9-9cd8-c6cf41b8460c"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/178c1b1f-b14b-45c9-9cd8-c6cf41b8460c"",
    ""developers_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/developers"",
    ""managers_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/managers"",
    ""auditors_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/auditors"",
    ""apps_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/apps"",
    ""routes_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/routes"",
    ""domains_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/domains"",
    ""service_instances_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/service_instances"",
    ""app_events_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/app_events"",
    ""events_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/events"",
    ""security_groups_url"": ""/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("9c318c52-31dc-49a9-8f20-c918a6046ac1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1439", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("178c1b1f-b14b-45c9-9cd8-c6cf41b8460c", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/178c1b1f-b14b-45c9-9cd8-c6cf41b8460c", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9c318c52-31dc-49a9-8f20-c918a6046ac1/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""94d2fc40-56e1-4bb5-8fea-e45657e2fad2"",
        ""url"": ""/v2/events/94d2fc40-56e1-4bb5-8fea-e45657e2fad2"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-176"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""8b6decf9-d25d-41f2-8de3-cdb2c89abd0b"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-1398"",
        ""timestamp"": ""2015-04-10T20:04:35+00:00"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""8b6decf9-d25d-41f2-8de3-cdb2c89abd0b"",
        ""organization_guid"": ""93e6d1b7-787d-4f49-b674-7f965f02bdd6""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("94d2fc40-56e1-4bb5-8fea-e45657e2fad2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/94d2fc40-56e1-4bb5-8fea-e45657e2fad2", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-176", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("8b6decf9-d25d-41f2-8de3-cdb2c89abd0b", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-1398", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("8b6decf9-d25d-41f2-8de3-cdb2c89abd0b", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("93e6d1b7-787d-4f49-b674-7f965f02bdd6", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5c45819a-4e97-4070-9dbd-e3299d98f0d1"",
    ""url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1"",
    ""created_at"": ""2015-04-10T20:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1405"",
    ""organization_guid"": ""51e364cf-f654-4d13-9b3d-1928c35dc134"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/51e364cf-f654-4d13-9b3d-1928c35dc134"",
    ""developers_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/developers"",
    ""managers_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/managers"",
    ""auditors_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/auditors"",
    ""apps_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/apps"",
    ""routes_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/routes"",
    ""domains_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/domains"",
    ""service_instances_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/service_instances"",
    ""app_events_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/app_events"",
    ""events_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/events"",
    ""security_groups_url"": ""/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("5c45819a-4e97-4070-9dbd-e3299d98f0d1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1405", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("51e364cf-f654-4d13-9b3d-1928c35dc134", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/51e364cf-f654-4d13-9b3d-1928c35dc134", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/5c45819a-4e97-4070-9dbd-e3299d98f0d1/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""65a6fc93-a616-4db7-a830-ba954767fd3b"",
    ""url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1433"",
    ""organization_guid"": ""f8584ab2-f49c-4c7b-be8a-e8ae0d4f6df3"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/f8584ab2-f49c-4c7b-be8a-e8ae0d4f6df3"",
    ""developers_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/developers"",
    ""managers_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/managers"",
    ""auditors_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/auditors"",
    ""apps_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/apps"",
    ""routes_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/routes"",
    ""domains_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/domains"",
    ""service_instances_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/service_instances"",
    ""app_events_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/app_events"",
    ""events_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/events"",
    ""security_groups_url"": ""/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Result;


                Assert.AreEqual("65a6fc93-a616-4db7-a830-ba954767fd3b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1433", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f8584ab2-f49c-4c7b-be8a-e8ae0d4f6df3", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/f8584ab2-f49c-4c7b-be8a-e8ae0d4f6df3", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/65a6fc93-a616-4db7-a830-ba954767fd3b/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""3779d017-7b3d-42e1-a376-dd02917b1458"",
        ""url"": ""/v2/services/3779d017-7b3d-42e1-a376-dd02917b1458"",
        ""created_at"": ""2015-04-10T20:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-62"",
        ""provider"": ""provider-53"",
        ""url"": ""https://foo.com/url-93"",
        ""description"": ""desc-161"",
        ""long_description"": null,
        ""version"": ""version-53"",
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""ea878e63-0c39-4775-a89e-c3a3ac880456"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": null,
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/3779d017-7b3d-42e1-a376-dd02917b1458/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("3779d017-7b3d-42e1-a376-dd02917b1458", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/3779d017-7b3d-42e1-a376-dd02917b1458", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-62", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-53", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("https://foo.com/url-93", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-161", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("version-53", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("ea878e63-0c39-4775-a89e-c3a3ac880456", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/3779d017-7b3d-42e1-a376-dd02917b1458/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9e3573c0-e5c3-441d-a160-53d01c9b253d"",
    ""url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d"",
    ""created_at"": ""2015-04-10T20:04:35+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1376"",
    ""organization_guid"": ""269fa5b2-6dec-4bc7-a8bf-fc33219b0a8c"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/269fa5b2-6dec-4bc7-a8bf-fc33219b0a8c"",
    ""developers_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/developers"",
    ""managers_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/managers"",
    ""auditors_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/auditors"",
    ""apps_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/apps"",
    ""routes_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/routes"",
    ""domains_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/domains"",
    ""service_instances_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/service_instances"",
    ""app_events_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/app_events"",
    ""events_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/events"",
    ""security_groups_url"": ""/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("9e3573c0-e5c3-441d-a160-53d01c9b253d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1376", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("269fa5b2-6dec-4bc7-a8bf-fc33219b0a8c", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/269fa5b2-6dec-4bc7-a8bf-fc33219b0a8c", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/9e3573c0-e5c3-441d-a160-53d01c9b253d/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59"",
        ""url"": ""/v2/security_groups/4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1404"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1404", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/4005e32d-0e20-4bc0-a7c9-1af4d1ea0e59/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8c827319-3606-4bae-9e9b-6816cde64a57"",
        ""url"": ""/v2/domains/8c827319-3606-4bae-9e9b-6816cde64a57"",
        ""created_at"": ""2015-04-10T20:04:27+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""d616b632-3803-400c-b732-46a3709542fc"",
        ""url"": ""/v2/domains/d616b632-3803-400c-b732-46a3709542fc"",
        ""created_at"": ""2015-04-10T20:04:27+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8c827319-3606-4bae-9e9b-6816cde64a57", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/8c827319-3606-4bae-9e9b-6816cde64a57", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:27+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("d616b632-3803-400c-b732-46a3709542fc", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/d616b632-3803-400c-b732-46a3709542fc", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:27+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7f9b90f1-65e5-4790-b13c-9d4d5022b18b"",
        ""url"": ""/v2/routes/7f9b90f1-65e5-4790-b13c-9d4d5022b18b"",
        ""created_at"": ""2015-04-10T20:04:35+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-7"",
        ""domain_guid"": ""006ee4f7-0f3a-4047-bb44-d32b66fa11d9"",
        ""space_guid"": ""8bbb8350-757a-499b-9ceb-d36311b31e37"",
        ""domain_url"": ""/v2/domains/006ee4f7-0f3a-4047-bb44-d32b66fa11d9"",
        ""space_url"": ""/v2/spaces/8bbb8350-757a-499b-9ceb-d36311b31e37"",
        ""apps_url"": ""/v2/routes/7f9b90f1-65e5-4790-b13c-9d4d5022b18b/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7f9b90f1-65e5-4790-b13c-9d4d5022b18b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/7f9b90f1-65e5-4790-b13c-9d4d5022b18b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:35+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-7", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("006ee4f7-0f3a-4047-bb44-d32b66fa11d9", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("8bbb8350-757a-499b-9ceb-d36311b31e37", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/006ee4f7-0f3a-4047-bb44-d32b66fa11d9", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/8bbb8350-757a-499b-9ceb-d36311b31e37", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/7f9b90f1-65e5-4790-b13c-9d4d5022b18b/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8607a1af-5b98-4b6e-8783-27b54acc8899"",
        ""url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899"",
        ""created_at"": ""2015-04-10T20:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1436"",
        ""organization_guid"": ""674a0195-c2c9-45fd-8a63-8058b680ea54"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/674a0195-c2c9-45fd-8a63-8058b680ea54"",
        ""developers_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/developers"",
        ""managers_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/managers"",
        ""auditors_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/auditors"",
        ""apps_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/apps"",
        ""routes_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/routes"",
        ""domains_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/domains"",
        ""service_instances_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/service_instances"",
        ""app_events_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/app_events"",
        ""events_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/events"",
        ""security_groups_url"": ""/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8607a1af-5b98-4b6e-8783-27b54acc8899", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1436", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("674a0195-c2c9-45fd-8a63-8058b680ea54", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/674a0195-c2c9-45fd-8a63-8058b680ea54", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/8607a1af-5b98-4b6e-8783-27b54acc8899/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a9334050-81c0-4517-bc49-f646602d352f"",
    ""url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1430"",
    ""organization_guid"": ""822d079d-d812-4447-af56-145b26a59c07"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/822d079d-d812-4447-af56-145b26a59c07"",
    ""developers_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/developers"",
    ""managers_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/managers"",
    ""auditors_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/auditors"",
    ""apps_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/apps"",
    ""routes_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/routes"",
    ""domains_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/domains"",
    ""service_instances_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/service_instances"",
    ""app_events_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/app_events"",
    ""events_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/events"",
    ""security_groups_url"": ""/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("a9334050-81c0-4517-bc49-f646602d352f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1430", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("822d079d-d812-4447-af56-145b26a59c07", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/822d079d-d812-4447-af56-145b26a59c07", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/a9334050-81c0-4517-bc49-f646602d352f/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a923a229-2e25-45b8-a98b-5b5d14f69dfb"",
    ""url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb"",
    ""created_at"": ""2015-04-10T20:04:36+00:00"",
    ""updated_at"": ""2015-04-10T20:04:36+00:00""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""a05ad865-64a1-41a1-83b0-21717e6dca3a"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/a05ad865-64a1-41a1-83b0-21717e6dca3a"",
    ""developers_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/developers"",
    ""managers_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/managers"",
    ""auditors_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/auditors"",
    ""apps_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/apps"",
    ""routes_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/routes"",
    ""domains_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/domains"",
    ""service_instances_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/service_instances"",
    ""app_events_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/app_events"",
    ""events_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/events"",
    ""security_groups_url"": ""/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("a923a229-2e25-45b8-a98b-5b5d14f69dfb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("a05ad865-64a1-41a1-83b0-21717e6dca3a", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/a05ad865-64a1-41a1-83b0-21717e6dca3a", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/a923a229-2e25-45b8-a98b-5b5d14f69dfb/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-182"",
        ""url"": ""/v2/users/uaa-id-182"",
        ""created_at"": ""2015-04-10T20:04:36+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-182/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-182/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-182/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-182/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-182/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-182/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-182/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-182", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-182", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T20:04:36+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-182/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-182/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

    }
}