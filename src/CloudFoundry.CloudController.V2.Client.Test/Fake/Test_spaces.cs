//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void AssociateManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a2014583-c3a9-492d-b991-d5aafefdcc6c"",
    ""url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2"",
    ""created_at"": ""2016-03-21T10:59:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-386"",
    ""organization_guid"": ""a2014583-c3a9-492d-b991-d5aafefdcc6c"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/b1dc8609-2a2f-4ca1-802f-131ea944a418"",
    ""developers_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/developers"",
    ""managers_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/managers"",
    ""auditors_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/auditors"",
    ""apps_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/apps"",
    ""routes_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/routes"",
    ""domains_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/domains"",
    ""service_instances_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/service_instances"",
    ""app_events_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/app_events"",
    ""events_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/events"",
    ""security_groups_url"": ""/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateManagerWithSpaceByUsernameRequest value = new AssociateManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("a2014583-c3a9-492d-b991-d5aafefdcc6c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-386", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("a2014583-c3a9-492d-b991-d5aafefdcc6c", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/b1dc8609-2a2f-4ca1-802f-131ea944a418", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/6eaee1be-4e31-44bd-9e5d-385d2d1a7fe2/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c0091eb1-991f-4c11-8265-e6d8e6f97d5b"",
        ""url"": ""/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-371"",
        ""credentials"": {
          ""creds-key-4"": ""creds-val-4""
        },
        ""service_plan_guid"": ""c0091eb1-991f-4c11-8265-e6d8e6f97d5b"",
        ""space_guid"": ""c0091eb1-991f-4c11-8265-e6d8e6f97d5b"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""tags"": [

        ],
        ""space_url"": ""/v2/spaces/6080c829-6b73-486f-8de5-6e297a5521ef"",
        ""service_plan_url"": ""/v2/service_plans/f6f67e64-1bb5-4056-9a91-bd4fbd2c9328"",
        ""service_bindings_url"": ""/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/service_keys"",
        ""routes_url"": ""/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c0091eb1-991f-4c11-8265-e6d8e6f97d5b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-371", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("c0091eb1-991f-4c11-8265-e6d8e6f97d5b", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("c0091eb1-991f-4c11-8265-e6d8e6f97d5b", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/6080c829-6b73-486f-8de5-6e297a5521ef", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/f6f67e64-1bb5-4056-9a91-bd4fbd2c9328", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/29c32d9c-5378-4dde-a138-b846447af793/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c0316163-6a11-45cb-a981-3535cad422f6"",
    ""url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-306"",
    ""organization_guid"": ""c0316163-6a11-45cb-a981-3535cad422f6"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/3d9e2022-46da-4e3c-b758-5c2214e848ab"",
    ""developers_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/developers"",
    ""managers_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/managers"",
    ""auditors_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/auditors"",
    ""apps_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/apps"",
    ""routes_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/routes"",
    ""domains_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/domains"",
    ""service_instances_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/service_instances"",
    ""app_events_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/app_events"",
    ""events_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/events"",
    ""security_groups_url"": ""/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateDeveloperWithSpaceByUsernameRequest value = new AssociateDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("c0316163-6a11-45cb-a981-3535cad422f6", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-306", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("c0316163-6a11-45cb-a981-3535cad422f6", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/3d9e2022-46da-4e3c-b758-5c2214e848ab", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b07442d-b19c-4b68-b956-c16abbb63703/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d0d3ea9b-48ea-4a38-9d65-bb8cc539b586"",
    ""url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-321"",
    ""organization_guid"": ""d0d3ea9b-48ea-4a38-9d65-bb8cc539b586"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/2b211f93-3442-479c-a3e1-d2c0940ec976"",
    ""developers_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/developers"",
    ""managers_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/managers"",
    ""auditors_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/auditors"",
    ""apps_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/apps"",
    ""routes_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/routes"",
    ""domains_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/domains"",
    ""service_instances_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/service_instances"",
    ""app_events_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/app_events"",
    ""events_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/events"",
    ""security_groups_url"": ""/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("d0d3ea9b-48ea-4a38-9d65-bb8cc539b586", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-321", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d0d3ea9b-48ea-4a38-9d65-bb8cc539b586", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/2b211f93-3442-479c-a3e1-d2c0940ec976", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/379702dc-972c-490c-a19c-b70c6365df07/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""03581296-1367-4fa6-9d6e-4447cc342759"",
        ""url"": ""/v2/services/4e94063d-47f8-422b-a0b0-056e99465800"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-18"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-26"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": 1,
        ""bindable"": 1,
        ""unique_id"": ""d9557557-bd09-4403-809d-0310fb12ca66"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""03581296-1367-4fa6-9d6e-4447cc342759"",
        ""plan_updateable"": 0,
        ""service_plans_url"": ""/v2/services/4e94063d-47f8-422b-a0b0-056e99465800/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("03581296-1367-4fa6-9d6e-4447cc342759", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/4e94063d-47f8-422b-a0b0-056e99465800", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-18", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-26", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("d9557557-bd09-4403-809d-0310fb12ca66", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("03581296-1367-4fa6-9d6e-4447cc342759", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/4e94063d-47f8-422b-a0b0-056e99465800/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void DisassociateManagerWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""4207011f-0902-4fec-9d05-24a1f5822a46"",
    ""url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c"",
    ""created_at"": ""2016-03-21T10:59:27Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-383"",
    ""organization_guid"": ""4207011f-0902-4fec-9d05-24a1f5822a46"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/a5198edf-9995-45b1-a2fb-9d9a6c0e1441"",
    ""developers_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/developers"",
    ""managers_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/managers"",
    ""auditors_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/auditors"",
    ""apps_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/apps"",
    ""routes_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/routes"",
    ""domains_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/domains"",
    ""service_instances_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/service_instances"",
    ""app_events_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/app_events"",
    ""events_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/events"",
    ""security_groups_url"": ""/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateManagerWithSpaceByUsernameRequest value = new DisassociateManagerWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.DisassociateManagerWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("4207011f-0902-4fec-9d05-24a1f5822a46", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:27Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-383", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("4207011f-0902-4fec-9d05-24a1f5822a46", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/a5198edf-9995-45b1-a2fb-9d9a6c0e1441", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/47b17379-0704-4d7f-b100-3e8e6651402c/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingRolesOfAllUsersInSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e79d9438-224b-4c6f-b784-610712c6c510"",
        ""url"": ""/v2/users/uaa-id-165"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": 0,
        ""active"": 0,
        ""default_space_guid"": null,
        ""username"": ""everything@example.com"",
        ""space_roles"": [
          ""space_developer"",
          ""space_manager"",
          ""space_auditor""
        ],
        ""spaces_url"": ""/v2/users/uaa-id-165/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-165/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-165/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-165/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-165/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-165/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-165/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrievingRolesOfAllUsersInSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e79d9438-224b-4c6f-b784-610712c6c510", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-165", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("everything@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-165/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-165/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""50e32701-d983-4dc7-8433-6a306513b50d"",
    ""url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85"",
    ""created_at"": ""2016-03-21T10:59:24Z"",
    ""updated_at"": ""2016-03-21T10:59:24Z""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""50e32701-d983-4dc7-8433-6a306513b50d"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/cd6bf3b8-6ff3-4753-9a35-84fb5a4e8c18"",
    ""developers_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/developers"",
    ""managers_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/managers"",
    ""auditors_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/auditors"",
    ""apps_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/apps"",
    ""routes_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/routes"",
    ""domains_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/domains"",
    ""service_instances_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/service_instances"",
    ""app_events_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/app_events"",
    ""events_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/events"",
    ""security_groups_url"": ""/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("50e32701-d983-4dc7-8433-6a306513b50d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("50e32701-d983-4dc7-8433-6a306513b50d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/cd6bf3b8-6ff3-4753-9a35-84fb5a4e8c18", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/77c8790b-75ce-40a1-b47b-f1ea6b8d2f85/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
  ""name"": ""name-2568"",
  ""apps"": [
    {
      ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
      ""urls"": [
        ""host-28.domain-77.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
          ""host"": ""host-28"",
          ""path"": """",
          ""domain"": {
            ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
            ""name"": ""domain-77.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-2571""
      ],
      ""running_instances"": 0,
      ""name"": ""name-2574"",
      ""production"": false,
      ""space_guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
      ""stack_guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""3893123f-62a9-4ac5-8e9a-a1220eb8b657"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""staging_failed_description"": null,
      ""diego"": false,
      ""docker_image"": null,
      ""package_updated_at"": ""2016-03-21T10:59:53Z"",
      ""detected_start_command"": """",
      ""enable_ssh"": true,
      ""docker_credentials_json"": {
        ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
      },
      ""ports"": null
    }
  ],
  ""services"": [
    {
      ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
      ""name"": ""name-2571"",
      ""bound_app_count"": 1,
      ""last_operation"": {
        ""type"": ""create"",
        ""state"": ""succeeded"",
        ""description"": ""description goes here"",
        ""updated_at"": ""2016-03-21T10:59:53Z"",
        ""created_at"": ""2016-03-21T10:59:53Z""
      },
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
        ""name"": ""name-2572"",
        ""service"": {
          ""guid"": ""3edcbc45-a218-49d2-b680-d1bcfe5675e9"",
          ""label"": ""label-70"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("3edcbc45-a218-49d2-b680-d1bcfe5675e9", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-2568", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""c8db3fcb-ed7c-42e1-be31-92ff56b2d998"",
        ""url"": ""/v2/users/uaa-id-153"",
        ""created_at"": ""2016-03-21T10:59:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-153/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-153/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-153/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-153/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-153/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-153/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-153/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("c8db3fcb-ed7c-42e1-be31-92ff56b2d998", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-153", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-153/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-153/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4cbcb682-1962-464d-90c9-7ee0edc1be2a"",
        ""url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52"",
        ""created_at"": ""2016-03-21T10:59:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-289"",
        ""organization_guid"": ""4cbcb682-1962-464d-90c9-7ee0edc1be2a"",
        ""space_quota_definition_guid"": null,
        ""allow_ssh"": true,
        ""organization_url"": ""/v2/organizations/9d9c4b27-e205-4c40-9296-f704cb45ba3e"",
        ""developers_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/developers"",
        ""managers_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/managers"",
        ""auditors_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/auditors"",
        ""apps_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/apps"",
        ""routes_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/routes"",
        ""domains_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/domains"",
        ""service_instances_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/service_instances"",
        ""app_events_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/app_events"",
        ""events_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/events"",
        ""security_groups_url"": ""/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4cbcb682-1962-464d-90c9-7ee0edc1be2a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-289", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("4cbcb682-1962-464d-90c9-7ee0edc1be2a", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].AllowSsh), true);
                Assert.AreEqual("/v2/organizations/9d9c4b27-e205-4c40-9296-f704cb45ba3e", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d1d2791c-2f69-4a74-80ae-6d3649177b52/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""dea002d2-9022-43f1-a9b5-3f5124c64e1b"",
        ""url"": ""/v2/users/uaa-id-169"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-169/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-169/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-169/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-169/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-169/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-169/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-169/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("dea002d2-9022-43f1-a9b5-3f5124c64e1b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-169", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-169/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-169/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DisassociateDeveloperWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""92e7a1c8-74b7-45f3-bdbf-7a961883a382"",
    ""url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-303"",
    ""organization_guid"": ""92e7a1c8-74b7-45f3-bdbf-7a961883a382"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/8d45a1da-af58-4975-a906-fa3baccf8db1"",
    ""developers_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/developers"",
    ""managers_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/managers"",
    ""auditors_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/auditors"",
    ""apps_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/apps"",
    ""routes_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/routes"",
    ""domains_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/domains"",
    ""service_instances_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/service_instances"",
    ""app_events_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/app_events"",
    ""events_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/events"",
    ""security_groups_url"": ""/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateDeveloperWithSpaceByUsernameRequest value = new DisassociateDeveloperWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.DisassociateDeveloperWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("92e7a1c8-74b7-45f3-bdbf-7a961883a382", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-303", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("92e7a1c8-74b7-45f3-bdbf-7a961883a382", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/8d45a1da-af58-4975-a906-fa3baccf8db1", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/7ef84b2e-1f36-441f-9ba3-b7bfa9bd7bfd/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""779744ae-7e4f-407b-af76-3d6ebfaf913d"",
        ""url"": ""/v2/routes/14d1c757-b8fb-4cd2-9de7-4dcf9c99904b"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-9"",
        ""path"": """",
        ""domain_guid"": ""779744ae-7e4f-407b-af76-3d6ebfaf913d"",
        ""space_guid"": ""779744ae-7e4f-407b-af76-3d6ebfaf913d"",
        ""service_instance_guid"": null,
        ""port"": 0,
        ""domain_url"": ""/v2/domains/94cf3fab-3c88-4b13-8482-78821995cf8e"",
        ""space_url"": ""/v2/spaces/f5290a05-c5ed-4cc3-9346-1af4c14795fb"",
        ""apps_url"": ""/v2/routes/14d1c757-b8fb-4cd2-9de7-4dcf9c99904b/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("779744ae-7e4f-407b-af76-3d6ebfaf913d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/14d1c757-b8fb-4cd2-9de7-4dcf9c99904b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-9", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("779744ae-7e4f-407b-af76-3d6ebfaf913d", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("779744ae-7e4f-407b-af76-3d6ebfaf913d", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/94cf3fab-3c88-4b13-8482-78821995cf8e", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/f5290a05-c5ed-4cc3-9346-1af4c14795fb", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/14d1c757-b8fb-4cd2-9de7-4dcf9c99904b/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5f44e03f-eda1-4a89-9150-ccfb7c552b47"",
        ""url"": ""/v2/domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84"",
        ""created_at"": ""2016-03-21T10:59:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""5f44e03f-eda1-4a89-9150-ccfb7c552b47"",
        ""url"": ""/v2/domains/572e0541-2cf1-43a4-95c4-2dc021d95527"",
        ""created_at"": ""2016-03-21T10:59:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5f44e03f-eda1-4a89-9150-ccfb7c552b47", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("5f44e03f-eda1-4a89-9150-ccfb7c552b47", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/572e0541-2cf1-43a4-95c4-2dc021d95527", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9455d500-744d-4e94-b0fd-a808ef855c23"",
    ""url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0"",
    ""created_at"": ""2016-03-21T10:59:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-377"",
    ""organization_guid"": ""9455d500-744d-4e94-b0fd-a808ef855c23"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/cc137ab2-5921-4ba6-ad04-5b51ab8f1664"",
    ""developers_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/developers"",
    ""managers_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/managers"",
    ""auditors_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/auditors"",
    ""apps_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/apps"",
    ""routes_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/routes"",
    ""domains_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/domains"",
    ""service_instances_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/service_instances"",
    ""app_events_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/app_events"",
    ""events_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/events"",
    ""security_groups_url"": ""/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("9455d500-744d-4e94-b0fd-a808ef855c23", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-377", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("9455d500-744d-4e94-b0fd-a808ef855c23", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/cc137ab2-5921-4ba6-ad04-5b51ab8f1664", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/fe6916e7-2b08-4014-997f-b42c100fa4a0/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f12fdf3c-825f-4698-aa6a-e210207803bf"",
        ""url"": ""/v2/users/uaa-id-139"",
        ""created_at"": ""2016-03-21T10:59:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""developer@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-139/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-139/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-139/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-139/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-139/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-139/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-139/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f12fdf3c-825f-4698-aa6a-e210207803bf", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-139", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("developer@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-139/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-139/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""364f991e-4302-4159-a94a-585016f6694d"",
    ""url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-309"",
    ""organization_guid"": ""364f991e-4302-4159-a94a-585016f6694d"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/8c4691d0-f139-4fe3-b628-5b8a7bfbb5bc"",
    ""developers_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/developers"",
    ""managers_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/managers"",
    ""auditors_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/auditors"",
    ""apps_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/apps"",
    ""routes_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/routes"",
    ""domains_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/domains"",
    ""service_instances_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/service_instances"",
    ""app_events_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/app_events"",
    ""events_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/events"",
    ""security_groups_url"": ""/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("364f991e-4302-4159-a94a-585016f6694d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-309", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("364f991e-4302-4159-a94a-585016f6694d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/8c4691d0-f139-4fe3-b628-5b8a7bfbb5bc", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/aacdbcdc-8ea1-444c-b6ca-03bacd7aa9e8/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ee94a0ad-ad8b-466f-bc72-e6ef83e51b19"",
    ""url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e"",
    ""created_at"": ""2016-03-21T10:59:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-295"",
    ""organization_guid"": ""ee94a0ad-ad8b-466f-bc72-e6ef83e51b19"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/31e41bad-cf51-4f26-b54d-c7b95bccc630"",
    ""developers_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/developers"",
    ""managers_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/managers"",
    ""auditors_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/auditors"",
    ""apps_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/apps"",
    ""routes_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/routes"",
    ""domains_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/domains"",
    ""service_instances_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/service_instances"",
    ""app_events_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/app_events"",
    ""events_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/events"",
    ""security_groups_url"": ""/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("ee94a0ad-ad8b-466f-bc72-e6ef83e51b19", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-295", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ee94a0ad-ad8b-466f-bc72-e6ef83e51b19", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/31e41bad-cf51-4f26-b54d-c7b95bccc630", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/4c6e3d0d-0bc4-461b-9a2c-e1368db76b9e/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void DisassociateAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f899a0e1-6b16-46fd-bfcd-cf712d6c54d8"",
    ""url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144"",
    ""created_at"": ""2016-03-21T10:59:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-346"",
    ""organization_guid"": ""f899a0e1-6b16-46fd-bfcd-cf712d6c54d8"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/b4dd0c67-905e-4b7a-8e43-70d8f7ada535"",
    ""developers_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/developers"",
    ""managers_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/managers"",
    ""auditors_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/auditors"",
    ""apps_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/apps"",
    ""routes_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/routes"",
    ""domains_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/domains"",
    ""service_instances_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/service_instances"",
    ""app_events_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/app_events"",
    ""events_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/events"",
    ""security_groups_url"": ""/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                DisassociateAuditorWithSpaceByUsernameRequest value = new DisassociateAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.DisassociateAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("f899a0e1-6b16-46fd-bfcd-cf712d6c54d8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-346", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f899a0e1-6b16-46fd-bfcd-cf712d6c54d8", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/b4dd0c67-905e-4b7a-8e43-70d8f7ada535", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/f9a99649-cd91-4740-9497-1d0ffd030144/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""98f31003-824b-442b-b1e8-d46a2a7b568e"",
        ""url"": ""/v2/security_groups/dc5f56e4-fe22-46e8-9422-dbff33d06a16"",
        ""created_at"": ""2016-03-21T10:59:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-333"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/dc5f56e4-fe22-46e8-9422-dbff33d06a16/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("98f31003-824b-442b-b1e8-d46a2a7b568e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/dc5f56e4-fe22-46e8-9422-dbff33d06a16", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-333", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/dc5f56e4-fe22-46e8-9422-dbff33d06a16/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceByUsernameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""cffc3143-234a-468b-aaaa-d0b0e27e7096"",
    ""url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8"",
    ""created_at"": ""2016-03-21T10:59:26Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-343"",
    ""organization_guid"": ""cffc3143-234a-468b-aaaa-d0b0e27e7096"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/bd7beb78-d201-44ee-9023-e5cabd01cbd7"",
    ""developers_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/developers"",
    ""managers_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/managers"",
    ""auditors_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/auditors"",
    ""apps_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/apps"",
    ""routes_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/routes"",
    ""domains_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/domains"",
    ""service_instances_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/service_instances"",
    ""app_events_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/app_events"",
    ""events_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/events"",
    ""security_groups_url"": ""/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                AssociateAuditorWithSpaceByUsernameRequest value = new AssociateAuditorWithSpaceByUsernameRequest();


                var obj = cfClient.Spaces.AssociateAuditorWithSpaceByUsername(guid, value).Result;


                Assert.AreEqual("cffc3143-234a-468b-aaaa-d0b0e27e7096", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-343", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("cffc3143-234a-468b-aaaa-d0b0e27e7096", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/bd7beb78-d201-44ee-9023-e5cabd01cbd7", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/316120a4-8f85-4439-8e9a-ba3f2c5357e8/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""6f66694a-28e1-4e36-9694-0d6c86481636"",
    ""url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""6f66694a-28e1-4e36-9694-0d6c86481636"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/f4403eb4-ad93-470b-ba84-d5ff6832b6d3"",
    ""developers_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/developers"",
    ""managers_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/managers"",
    ""auditors_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/auditors"",
    ""apps_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/apps"",
    ""routes_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/routes"",
    ""domains_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/domains"",
    ""service_instances_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/service_instances"",
    ""app_events_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/app_events"",
    ""events_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/events"",
    ""security_groups_url"": ""/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("6f66694a-28e1-4e36-9694-0d6c86481636", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("6f66694a-28e1-4e36-9694-0d6c86481636", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/f4403eb4-ad93-470b-ba84-d5ff6832b6d3", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/abffc0ff-4284-4000-95dd-64a398e91a33/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ad96c490-16d1-40bf-b7ff-051fa57b20aa"",
        ""url"": ""/v2/events/6ff2a793-a0e5-4fb8-bb61-b24a20db3eb5"",
        ""created_at"": ""2016-03-21T10:59:25Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-142"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""dea24ec6-e28c-4a3b-a1b9-53dd580ac2a4"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-318"",
        ""timestamp"": ""2016-03-21T10:59:25Z"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""ad96c490-16d1-40bf-b7ff-051fa57b20aa"",
        ""organization_guid"": ""ad96c490-16d1-40bf-b7ff-051fa57b20aa""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ad96c490-16d1-40bf-b7ff-051fa57b20aa", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/6ff2a793-a0e5-4fb8-bb61-b24a20db3eb5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-142", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("dea24ec6-e28c-4a3b-a1b9-53dd580ac2a4", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-318", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("ad96c490-16d1-40bf-b7ff-051fa57b20aa", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("ad96c490-16d1-40bf-b7ff-051fa57b20aa", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""822f8440-5fb0-4337-a737-8432d0a85fac"",
        ""url"": ""/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1"",
        ""created_at"": ""2016-03-21T10:59:26Z"",
        ""updated_at"": ""2016-03-21T10:59:26Z""
      },
      ""entity"": {
        ""name"": ""name-355"",
        ""production"": false,
        ""space_guid"": ""822f8440-5fb0-4337-a737-8432d0a85fac"",
        ""stack_guid"": ""822f8440-5fb0-4337-a737-8432d0a85fac"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""7bd0d9f1-ebbc-4e6a-9804-049dcbde52de"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-03-21T10:59:26Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/fea32072-7292-48f5-9213-b003c73ea270"",
        ""stack_url"": ""/v2/stacks/c14c29f7-3b02-4dae-bf07-b2743c15f941"",
        ""events_url"": ""/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/events"",
        ""service_bindings_url"": ""/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/service_bindings"",
        ""routes_url"": ""/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/routes"",
        ""route_mappings_url"": ""/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("822f8440-5fb0-4337-a737-8432d0a85fac", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-355", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("822f8440-5fb0-4337-a737-8432d0a85fac", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("822f8440-5fb0-4337-a737-8432d0a85fac", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("7bd0d9f1-ebbc-4e6a-9804-049dcbde52de", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-03-21T10:59:26Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/fea32072-7292-48f5-9213-b003c73ea270", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/c14c29f7-3b02-4dae-bf07-b2743c15f941", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/apps/001d77e0-29b8-432c-993e-bc197feb67f1/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a3986702-6332-434f-ac93-fef33c43c169"",
    ""url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b"",
    ""created_at"": ""2016-03-21T10:59:25Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-334"",
    ""organization_guid"": ""a3986702-6332-434f-ac93-fef33c43c169"",
    ""space_quota_definition_guid"": null,
    ""allow_ssh"": true,
    ""organization_url"": ""/v2/organizations/208b7d99-44bd-4bee-bb1e-2cf0b843428e"",
    ""developers_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/developers"",
    ""managers_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/managers"",
    ""auditors_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/auditors"",
    ""apps_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/apps"",
    ""routes_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/routes"",
    ""domains_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/domains"",
    ""service_instances_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/service_instances"",
    ""app_events_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/app_events"",
    ""events_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/events"",
    ""security_groups_url"": ""/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("a3986702-6332-434f-ac93-fef33c43c169", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:25Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-334", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("a3986702-6332-434f-ac93-fef33c43c169", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.AllowSsh), true);
                Assert.AreEqual("/v2/organizations/208b7d99-44bd-4bee-bb1e-2cf0b843428e", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/f67cda75-b8a1-4e70-940b-0fd56ba65f9b/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

    }
}