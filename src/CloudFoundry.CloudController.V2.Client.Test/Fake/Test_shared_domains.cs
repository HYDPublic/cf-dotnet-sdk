//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SharedDomainsEndpoint
{
        [TestMethod]
        public void ListAllSharedDomainsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 6,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84"",
        ""created_at"": ""2016-03-21T10:59:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/572e0541-2cf1-43a4-95c4-2dc021d95527"",
        ""created_at"": ""2016-03-21T10:59:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/2c9efa88-aaef-43b8-9ab8-62e571cc8cb7"",
        ""created_at"": ""2016-03-21T10:59:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-57.example.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/64cf071e-89e2-4a82-b6ba-9dae3e3e4a76"",
        ""created_at"": ""2016-03-21T10:59:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-58.example.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/f3b5c49a-e8a7-436b-8e33-b8f7e48bb92c"",
        ""created_at"": ""2016-03-21T10:59:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-59.example.com"",
        ""router_group_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""url"": ""/v2/shared_domains/e9a76f72-af48-42a5-9e46-92d6ce08236e"",
        ""created_at"": ""2016-03-21T10:59:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-60.example.com"",
        ""router_group_guid"": ""8ad18906-592d-4974-94c6-d0948326abfe"",
        ""router_group_types"": [
          ""tcp""
        ]
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.SharedDomains.ListAllSharedDomains().Result;

                Assert.AreEqual("6", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/572e0541-2cf1-43a4-95c4-2dc021d95527", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].RouterGroupGuid), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/2c9efa88-aaef-43b8-9ab8-62e571cc8cb7", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-57.example.com", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].RouterGroupGuid), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[3].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/64cf071e-89e2-4a82-b6ba-9dae3e3e4a76", TestUtil.ToTestableString(obj[3].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj[3].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-58.example.com", TestUtil.ToTestableString(obj[3].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].RouterGroupGuid), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[4].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/f3b5c49a-e8a7-436b-8e33-b8f7e48bb92c", TestUtil.ToTestableString(obj[4].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj[4].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[4].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-59.example.com", TestUtil.ToTestableString(obj[4].Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[4].RouterGroupGuid), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[5].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/e9a76f72-af48-42a5-9e46-92d6ce08236e", TestUtil.ToTestableString(obj[5].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj[5].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[5].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-60.example.com", TestUtil.ToTestableString(obj[5].Name), true);
                Assert.AreEqual("8ad18906-592d-4974-94c6-d0948326abfe", TestUtil.ToTestableString(obj[5].RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void RetrieveSharedDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""88954d53-1fee-48ff-a410-3e857843814f"",
    ""url"": ""/v2/shared_domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84"",
    ""created_at"": ""2016-03-21T10:59:24Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""customer-app-domain1.com"",
    ""router_group_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.SharedDomains.RetrieveSharedDomain(guid).Result;


                Assert.AreEqual("88954d53-1fee-48ff-a410-3e857843814f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/865d4490-4732-4ffc-902e-b3e4ca1e5c84", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void CreateSharedDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1aea0e4e-ac85-4777-9832-c1d990c7bfc9"",
    ""url"": ""/v2/shared_domains/2fafd2c4-e994-4803-80f0-c88d5d1707c5"",
    ""created_at"": ""2016-03-21T10:59:35Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""example.com"",
    ""router_group_guid"": ""1aea0e4e-ac85-4777-9832-c1d990c7bfc9"",
    ""router_group_types"": [
      ""tcp""
    ]
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSharedDomainRequest value = new CreateSharedDomainRequest();


                var obj = cfClient.SharedDomains.CreateSharedDomain(value).Result;


                Assert.AreEqual("1aea0e4e-ac85-4777-9832-c1d990c7bfc9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/2fafd2c4-e994-4803-80f0-c88d5d1707c5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("example.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("1aea0e4e-ac85-4777-9832-c1d990c7bfc9", TestUtil.ToTestableString(obj.RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void FilterSharedDomainsByNameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6d62281d-4b51-4058-8f5c-ae53facc5ca9"",
        ""url"": ""/v2/shared_domains/97b16861-776e-4c53-998b-880e0445990c"",
        ""created_at"": ""2016-03-21T10:59:35Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""shared-domain.com"",
        ""router_group_guid"": ""6d62281d-4b51-4058-8f5c-ae53facc5ca9"",
        ""router_group_types"": [
          ""tcp""
        ]
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.SharedDomains.FilterSharedDomainsByName().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("6d62281d-4b51-4058-8f5c-ae53facc5ca9", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/shared_domains/97b16861-776e-4c53-998b-880e0445990c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-21T10:59:35Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("shared-domain.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("6d62281d-4b51-4058-8f5c-ae53facc5ca9", TestUtil.ToTestableString(obj[0].RouterGroupGuid), true);

            }
        }

        [TestMethod]
        public void DeleteSharedDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.SharedDomains.DeleteSharedDomain(guid).Wait();

            }
        }

    }
}