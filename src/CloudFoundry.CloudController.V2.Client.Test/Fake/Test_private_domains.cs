//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class PrivateDomainsEndpoint
{
        [TestMethod]
        public void FilterPrivateDomainsByNameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""5832f45e-4b2b-4b67-9680-31e841088172"",
        ""url"": ""/v2/private_domains/5832f45e-4b2b-4b67-9680-31e841088172"",
        ""created_at"": ""2015-04-10T19:41:55+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""my-domain.com"",
        ""owning_organization_guid"": ""54533939-562f-4b4a-b561-f422a9ecf47c"",
        ""owning_organization_url"": ""/v2/organizations/54533939-562f-4b4a-b561-f422a9ecf47c""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.PrivateDomains.FilterPrivateDomainsByName().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("5832f45e-4b2b-4b67-9680-31e841088172", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/5832f45e-4b2b-4b67-9680-31e841088172", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:55+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-domain.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("54533939-562f-4b4a-b561-f422a9ecf47c", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/54533939-562f-4b4a-b561-f422a9ecf47c", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void RetrievePrivateDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bc97ee41-5fbc-46aa-8321-cba9435457a0"",
    ""url"": ""/v2/private_domains/bc97ee41-5fbc-46aa-8321-cba9435457a0"",
    ""created_at"": ""2015-04-10T19:41:50+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""vcap.me"",
    ""owning_organization_guid"": ""928c1067-eb83-4e29-b419-a605085f1a27"",
    ""owning_organization_url"": ""/v2/organizations/928c1067-eb83-4e29-b419-a605085f1a27""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.PrivateDomains.RetrievePrivateDomain(guid).Result;


                Assert.AreEqual("bc97ee41-5fbc-46aa-8321-cba9435457a0", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/bc97ee41-5fbc-46aa-8321-cba9435457a0", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("vcap.me", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("928c1067-eb83-4e29-b419-a605085f1a27", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/928c1067-eb83-4e29-b419-a605085f1a27", TestUtil.ToTestableString(obj.OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void CreatePrivateDomainOwnedByGivenOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c1db6d82-1289-454a-8473-4469544f6db8"",
    ""url"": ""/v2/private_domains/c1db6d82-1289-454a-8473-4469544f6db8"",
    ""created_at"": ""2015-04-10T19:41:55+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""exmaple.com"",
    ""owning_organization_guid"": ""2bc72cfe-1f15-4a08-a881-c25c8686d0bc"",
    ""owning_organization_url"": ""/v2/organizations/2bc72cfe-1f15-4a08-a881-c25c8686d0bc""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreatePrivateDomainOwnedByGivenOrganizationRequest value = new CreatePrivateDomainOwnedByGivenOrganizationRequest();


                var obj = cfClient.PrivateDomains.CreatePrivateDomainOwnedByGivenOrganization(value).Result;


                Assert.AreEqual("c1db6d82-1289-454a-8473-4469544f6db8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/c1db6d82-1289-454a-8473-4469544f6db8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:55+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("exmaple.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2bc72cfe-1f15-4a08-a881-c25c8686d0bc", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/2bc72cfe-1f15-4a08-a881-c25c8686d0bc", TestUtil.ToTestableString(obj.OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void DeletePrivateDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.PrivateDomains.DeletePrivateDomain(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 4,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""bc97ee41-5fbc-46aa-8321-cba9435457a0"",
        ""url"": ""/v2/private_domains/bc97ee41-5fbc-46aa-8321-cba9435457a0"",
        ""created_at"": ""2015-04-10T19:41:50+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""vcap.me"",
        ""owning_organization_guid"": ""928c1067-eb83-4e29-b419-a605085f1a27"",
        ""owning_organization_url"": ""/v2/organizations/928c1067-eb83-4e29-b419-a605085f1a27""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ef12a147-e3c1-4815-ab33-5eff5971d789"",
        ""url"": ""/v2/private_domains/ef12a147-e3c1-4815-ab33-5eff5971d789"",
        ""created_at"": ""2015-04-10T19:41:54+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-10.example.com"",
        ""owning_organization_guid"": ""5e8166e3-6adc-4fef-a91b-33cd4f2c7482"",
        ""owning_organization_url"": ""/v2/organizations/5e8166e3-6adc-4fef-a91b-33cd4f2c7482""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e0d8e346-00b6-41d4-8c61-b3c2047a822b"",
        ""url"": ""/v2/private_domains/e0d8e346-00b6-41d4-8c61-b3c2047a822b"",
        ""created_at"": ""2015-04-10T19:41:54+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-11.example.com"",
        ""owning_organization_guid"": ""89fb00a8-3d88-4677-8f93-342bb21bdfaf"",
        ""owning_organization_url"": ""/v2/organizations/89fb00a8-3d88-4677-8f93-342bb21bdfaf""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""507f4a9c-cc67-4cbe-893a-243f77e5157f"",
        ""url"": ""/v2/private_domains/507f4a9c-cc67-4cbe-893a-243f77e5157f"",
        ""created_at"": ""2015-04-10T19:41:54+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-12.example.com"",
        ""owning_organization_guid"": ""be11f957-7579-47ab-b458-257d175d7d18"",
        ""owning_organization_url"": ""/v2/organizations/be11f957-7579-47ab-b458-257d175d7d18""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.PrivateDomains.ListAllPrivateDomains().Result;

                Assert.AreEqual("4", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("bc97ee41-5fbc-46aa-8321-cba9435457a0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/bc97ee41-5fbc-46aa-8321-cba9435457a0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:50+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("vcap.me", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("928c1067-eb83-4e29-b419-a605085f1a27", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/928c1067-eb83-4e29-b419-a605085f1a27", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("ef12a147-e3c1-4815-ab33-5eff5971d789", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/ef12a147-e3c1-4815-ab33-5eff5971d789", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:54+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-10.example.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("5e8166e3-6adc-4fef-a91b-33cd4f2c7482", TestUtil.ToTestableString(obj[1].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/5e8166e3-6adc-4fef-a91b-33cd4f2c7482", TestUtil.ToTestableString(obj[1].OwningOrganizationUrl), true);
                Assert.AreEqual("e0d8e346-00b6-41d4-8c61-b3c2047a822b", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/e0d8e346-00b6-41d4-8c61-b3c2047a822b", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:54+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-11.example.com", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("89fb00a8-3d88-4677-8f93-342bb21bdfaf", TestUtil.ToTestableString(obj[2].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/89fb00a8-3d88-4677-8f93-342bb21bdfaf", TestUtil.ToTestableString(obj[2].OwningOrganizationUrl), true);
                Assert.AreEqual("507f4a9c-cc67-4cbe-893a-243f77e5157f", TestUtil.ToTestableString(obj[3].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/507f4a9c-cc67-4cbe-893a-243f77e5157f", TestUtil.ToTestableString(obj[3].EntityMetadata.Url), true);
                Assert.AreEqual("2015-04-10T19:41:54+00:00", TestUtil.ToTestableString(obj[3].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-12.example.com", TestUtil.ToTestableString(obj[3].Name), true);
                Assert.AreEqual("be11f957-7579-47ab-b458-257d175d7d18", TestUtil.ToTestableString(obj[3].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/be11f957-7579-47ab-b458-257d175d7d18", TestUtil.ToTestableString(obj[3].OwningOrganizationUrl), true);

            }
        }

    }
}