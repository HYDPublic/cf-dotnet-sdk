//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class PrivateDomainsEndpoint
{
        [TestMethod]
        public void FilterPrivateDomainsByNameTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e7892705-e518-46b5-b39f-3e60d90506e4"",
        ""url"": ""/v2/private_domains/e7892705-e518-46b5-b39f-3e60d90506e4"",
        ""created_at"": ""2015-05-19T15:27:05+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""my-domain.com"",
        ""owning_organization_guid"": ""2ff34cae-f15d-4319-8515-4db5be74220a"",
        ""owning_organization_url"": ""/v2/organizations/2ff34cae-f15d-4319-8515-4db5be74220a""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.PrivateDomains.FilterPrivateDomainsByName().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e7892705-e518-46b5-b39f-3e60d90506e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/e7892705-e518-46b5-b39f-3e60d90506e4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-domain.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("2ff34cae-f15d-4319-8515-4db5be74220a", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/2ff34cae-f15d-4319-8515-4db5be74220a", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void RetrievePrivateDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""018b6130-98b4-452c-9600-807f5b10be7e"",
    ""url"": ""/v2/private_domains/018b6130-98b4-452c-9600-807f5b10be7e"",
    ""created_at"": ""2015-05-19T15:27:04+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""vcap.me"",
    ""owning_organization_guid"": ""0a949a57-ed53-4d72-9205-c4432df8f118"",
    ""owning_organization_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.PrivateDomains.RetrievePrivateDomain(guid).Result;


                Assert.AreEqual("018b6130-98b4-452c-9600-807f5b10be7e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/018b6130-98b4-452c-9600-807f5b10be7e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("vcap.me", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj.OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void CreatePrivateDomainOwnedByGivenOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c6784cc9-1568-4157-a69e-cf1a34fd6134"",
    ""url"": ""/v2/private_domains/c6784cc9-1568-4157-a69e-cf1a34fd6134"",
    ""created_at"": ""2015-05-19T15:27:05+00:00"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""exmaple.com"",
    ""owning_organization_guid"": ""7c11cc05-a9a5-4cb1-ac25-5bef029850ab"",
    ""owning_organization_url"": ""/v2/organizations/7c11cc05-a9a5-4cb1-ac25-5bef029850ab""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreatePrivateDomainOwnedByGivenOrganizationRequest value = new CreatePrivateDomainOwnedByGivenOrganizationRequest();


                var obj = cfClient.PrivateDomains.CreatePrivateDomainOwnedByGivenOrganization(value).Result;


                Assert.AreEqual("c6784cc9-1568-4157-a69e-cf1a34fd6134", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/c6784cc9-1568-4157-a69e-cf1a34fd6134", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("exmaple.com", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("7c11cc05-a9a5-4cb1-ac25-5bef029850ab", TestUtil.ToTestableString(obj.OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/7c11cc05-a9a5-4cb1-ac25-5bef029850ab", TestUtil.ToTestableString(obj.OwningOrganizationUrl), true);

            }
        }

        [TestMethod]
        public void DeletePrivateDomainTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.PrivateDomains.DeletePrivateDomain(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 4,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""018b6130-98b4-452c-9600-807f5b10be7e"",
        ""url"": ""/v2/private_domains/018b6130-98b4-452c-9600-807f5b10be7e"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""vcap.me"",
        ""owning_organization_guid"": ""0a949a57-ed53-4d72-9205-c4432df8f118"",
        ""owning_organization_url"": ""/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ce832238-9103-4aea-b14f-887ab8c4a45b"",
        ""url"": ""/v2/private_domains/ce832238-9103-4aea-b14f-887ab8c4a45b"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-23.example.com"",
        ""owning_organization_guid"": ""3fff1f5c-925f-4e72-9fb5-9a8f8e6c4652"",
        ""owning_organization_url"": ""/v2/organizations/3fff1f5c-925f-4e72-9fb5-9a8f8e6c4652""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""a37c44d6-4572-4aa8-9a83-bed590400348"",
        ""url"": ""/v2/private_domains/a37c44d6-4572-4aa8-9a83-bed590400348"",
        ""created_at"": ""2015-05-19T15:27:04+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-24.example.com"",
        ""owning_organization_guid"": ""84d20e82-22f5-433b-94cc-2f5bba0e68fa"",
        ""owning_organization_url"": ""/v2/organizations/84d20e82-22f5-433b-94cc-2f5bba0e68fa""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""e1ad4aa1-e9bd-461d-bb72-c62a31715277"",
        ""url"": ""/v2/private_domains/e1ad4aa1-e9bd-461d-bb72-c62a31715277"",
        ""created_at"": ""2015-05-19T15:27:05+00:00"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-25.example.com"",
        ""owning_organization_guid"": ""7a32ac29-ad3e-4ef1-a076-d8a334014733"",
        ""owning_organization_url"": ""/v2/organizations/7a32ac29-ad3e-4ef1-a076-d8a334014733""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.PrivateDomains.ListAllPrivateDomains().Result;

                Assert.AreEqual("4", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("018b6130-98b4-452c-9600-807f5b10be7e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/018b6130-98b4-452c-9600-807f5b10be7e", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("vcap.me", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/0a949a57-ed53-4d72-9205-c4432df8f118", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("ce832238-9103-4aea-b14f-887ab8c4a45b", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/ce832238-9103-4aea-b14f-887ab8c4a45b", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-23.example.com", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("3fff1f5c-925f-4e72-9fb5-9a8f8e6c4652", TestUtil.ToTestableString(obj[1].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/3fff1f5c-925f-4e72-9fb5-9a8f8e6c4652", TestUtil.ToTestableString(obj[1].OwningOrganizationUrl), true);
                Assert.AreEqual("a37c44d6-4572-4aa8-9a83-bed590400348", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/a37c44d6-4572-4aa8-9a83-bed590400348", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:04+00:00", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-24.example.com", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("84d20e82-22f5-433b-94cc-2f5bba0e68fa", TestUtil.ToTestableString(obj[2].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/84d20e82-22f5-433b-94cc-2f5bba0e68fa", TestUtil.ToTestableString(obj[2].OwningOrganizationUrl), true);
                Assert.AreEqual("e1ad4aa1-e9bd-461d-bb72-c62a31715277", TestUtil.ToTestableString(obj[3].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/e1ad4aa1-e9bd-461d-bb72-c62a31715277", TestUtil.ToTestableString(obj[3].EntityMetadata.Url), true);
                Assert.AreEqual("2015-05-19T15:27:05+00:00", TestUtil.ToTestableString(obj[3].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[3].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-25.example.com", TestUtil.ToTestableString(obj[3].Name), true);
                Assert.AreEqual("7a32ac29-ad3e-4ef1-a076-d8a334014733", TestUtil.ToTestableString(obj[3].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/7a32ac29-ad3e-4ef1-a076-d8a334014733", TestUtil.ToTestableString(obj[3].OwningOrganizationUrl), true);

            }
        }

    }
}