//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceInstancesEndpoint
{
        [TestMethod]
        public void BindingServiceInstanceToRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5cfd8fe3-79da-4748-9940-065ecf16cdb9"",
    ""url"": ""/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1"",
    ""created_at"": ""2016-03-30T10:15:38Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2369"",
    ""credentials"": {
      ""creds-key-63"": ""creds-val-63""
    },
    ""service_plan_guid"": ""5cfd8fe3-79da-4748-9940-065ecf16cdb9"",
    ""space_guid"": ""5cfd8fe3-79da-4748-9940-065ecf16cdb9"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": null,
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/e171e899-6513-498b-a3f0-e9ff5b59a12c"",
    ""service_plan_url"": ""/v2/service_plans/ce142b9b-58eb-4dfc-b0b7-8b12a277e8f8"",
    ""service_bindings_url"": ""/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/service_keys"",
    ""routes_url"": ""/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                BindingServiceInstanceToRouteRequest value = new BindingServiceInstanceToRouteRequest();


                var obj = cfClient.ServiceInstances.BindingServiceInstanceToRoute(service_instance_guid, route_guid, value).Result;


                Assert.AreEqual("5cfd8fe3-79da-4748-9940-065ecf16cdb9", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:38Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2369", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5cfd8fe3-79da-4748-9940-065ecf16cdb9", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("5cfd8fe3-79da-4748-9940-065ecf16cdb9", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LastOperation), true);
                Assert.AreEqual("/v2/spaces/e171e899-6513-498b-a3f0-e9ff5b59a12c", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/ce142b9b-58eb-4dfc-b0b7-8b12a277e8f8", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/d7a43cf4-db6e-4407-ada9-9ef330c5d8e1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingPermissionsOnServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""manage"": true
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrievingPermissionsOnServiceInstance(guid).Result;


                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Manage), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""51e3a78c-6bc6-4106-8341-168688072dd0"",
        ""url"": ""/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8"",
        ""created_at"": ""2016-03-30T10:15:38Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-29"",
        ""path"": """",
        ""domain_guid"": ""51e3a78c-6bc6-4106-8341-168688072dd0"",
        ""space_guid"": ""51e3a78c-6bc6-4106-8341-168688072dd0"",
        ""service_instance_guid"": ""51e3a78c-6bc6-4106-8341-168688072dd0"",
        ""port"": 0,
        ""domain_url"": ""/v2/domains/ca3bd247-4e20-419f-9b12-567ca0750543"",
        ""space_url"": ""/v2/spaces/80bb6454-0952-4edb-be63-915f69d35368"",
        ""service_instance_url"": ""/v2/service_instances/5c958b3a-5f78-434f-923c-2ec271373325"",
        ""apps_url"": ""/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8/apps"",
        ""route_mappings_url"": ""/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllRoutesForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("51e3a78c-6bc6-4106-8341-168688072dd0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:38Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-29", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("51e3a78c-6bc6-4106-8341-168688072dd0", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("51e3a78c-6bc6-4106-8341-168688072dd0", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("51e3a78c-6bc6-4106-8341-168688072dd0", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/ca3bd247-4e20-419f-9b12-567ca0750543", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/80bb6454-0952-4edb-be63-915f69d35368", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/5c958b3a-5f78-434f-923c-2ec271373325", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/ce6ff881-3091-4c74-b11f-75c1066d00a8/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""968c822a-44dc-4731-a841-5a6cfe4d1804"",
        ""url"": ""/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d"",
        ""created_at"": ""2016-03-30T10:15:37Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-2315"",
        ""credentials"": {
          ""creds-key-54"": ""creds-val-54""
        },
        ""service_plan_guid"": ""968c822a-44dc-4731-a841-5a6cfe4d1804"",
        ""space_guid"": ""968c822a-44dc-4731-a841-5a6cfe4d1804"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": {
          ""type"": ""create"",
          ""state"": ""succeeded"",
          ""description"": ""service broker-provided description"",
          ""updated_at"": ""2016-03-30T10:15:37Z"",
          ""created_at"": ""2016-03-30T10:15:37Z""
        },
        ""tags"": [
          ""accounting"",
          ""mongodb""
        ],
        ""space_url"": ""/v2/spaces/b37d7d16-3ce3-4194-bef9-087d753d8638"",
        ""service_plan_url"": ""/v2/service_plans/a301c898-6974-4cc4-b3c8-c419a8626ae1"",
        ""service_bindings_url"": ""/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/service_keys"",
        ""routes_url"": ""/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceInstances.ListAllServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("968c822a-44dc-4731-a841-5a6cfe4d1804", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:37Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2315", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("968c822a-44dc-4731-a841-5a6cfe4d1804", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("968c822a-44dc-4731-a841-5a6cfe4d1804", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/b37d7d16-3ce3-4194-bef9-087d753d8638", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/a301c898-6974-4cc4-b3c8-c419a8626ae1", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/e738e86b-501a-42aa-9acd-f4d972781d3d/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d8a18248-d796-415c-a571-e0c6b08416d2"",
    ""url"": ""/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9"",
    ""created_at"": ""2016-03-30T10:15:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2337"",
    ""credentials"": {
      ""creds-key-57"": ""creds-val-57""
    },
    ""service_plan_guid"": ""d8a18248-d796-415c-a571-e0c6b08416d2"",
    ""space_guid"": ""d8a18248-d796-415c-a571-e0c6b08416d2"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""succeeded"",
      ""description"": ""service broker-provided description"",
      ""updated_at"": ""2016-03-30T10:15:37Z"",
      ""created_at"": ""2016-03-30T10:15:37Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/fddc374c-83ac-4f49-a65c-34c8c1d332a9"",
    ""service_plan_url"": ""/v2/service_plans/9c2a4af1-dc74-4242-97e8-c20f28ae8497"",
    ""service_bindings_url"": ""/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/service_keys"",
    ""routes_url"": ""/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrieveServiceInstance(guid).Result;


                Assert.AreEqual("d8a18248-d796-415c-a571-e0c6b08416d2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2337", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d8a18248-d796-415c-a571-e0c6b08416d2", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("d8a18248-d796-415c-a571-e0c6b08416d2", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/fddc374c-83ac-4f49-a65c-34c8c1d332a9", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/9c2a4af1-dc74-4242-97e8-c20f28ae8497", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/43267c79-b1d7-4b98-80a0-beeb9022ccb9/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CreateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""59cf5bcf-45bd-48f8-967e-777910e703f3"",
    ""url"": ""/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da"",
    ""created_at"": ""2016-03-30T10:15:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-service-instance"",
    ""credentials"": {

    },
    ""service_plan_guid"": ""59cf5bcf-45bd-48f8-967e-777910e703f3"",
    ""space_guid"": ""59cf5bcf-45bd-48f8-967e-777910e703f3"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": null,
      ""created_at"": ""2016-03-30T10:15:37Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/9942a794-4493-4475-b295-9b3cdc4c8b16"",
    ""service_plan_url"": ""/v2/service_plans/2fad2c7c-d456-46e9-a44b-c1a90b069ba2"",
    ""service_bindings_url"": ""/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/service_keys"",
    ""routes_url"": ""/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceInstanceRequest value = new CreateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.CreateServiceInstance(value).Result;


                Assert.AreEqual("59cf5bcf-45bd-48f8-967e-777910e703f3", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-service-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("59cf5bcf-45bd-48f8-967e-777910e703f3", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("59cf5bcf-45bd-48f8-967e-777910e703f3", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/9942a794-4493-4475-b295-9b3cdc4c8b16", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/2fad2c7c-d456-46e9-a44b-c1a90b069ba2", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/8bfabfb3-29bd-40e9-ac68-a2f3810724da/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f0392f29-ab8b-44f5-a055-ac977c24b5cb"",
    ""url"": ""/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237"",
    ""created_at"": ""2016-03-30T10:15:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2343"",
    ""credentials"": {
      ""creds-key-58"": ""creds-val-58""
    },
    ""service_plan_guid"": ""f0392f29-ab8b-44f5-a055-ac977c24b5cb"",
    ""space_guid"": ""f0392f29-ab8b-44f5-a055-ac977c24b5cb"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""delete"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-03-30T10:15:37Z"",
      ""created_at"": ""2016-03-30T10:15:37Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/ee6df1af-7680-4219-8c9a-059542ecbf5d"",
    ""service_plan_url"": ""/v2/service_plans/c26ea0ca-18c0-4349-a811-7fd5f8e05f00"",
    ""service_bindings_url"": ""/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/service_keys"",
    ""routes_url"": ""/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.DeleteServiceInstance(guid).Result;


                Assert.AreEqual("f0392f29-ab8b-44f5-a055-ac977c24b5cb", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2343", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("f0392f29-ab8b-44f5-a055-ac977c24b5cb", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("f0392f29-ab8b-44f5-a055-ac977c24b5cb", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/ee6df1af-7680-4219-8c9a-059542ecbf5d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/c26ea0ca-18c0-4349-a811-7fd5f8e05f00", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/78fa9e5f-92c9-490a-9c00-7cc799808237/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UnbindingServiceInstanceFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.ServiceInstances.UnbindingServiceInstanceFromRoute(service_instance_guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6c333161-d634-4f0d-a9ab-499239f22e11"",
        ""url"": ""/v2/service_bindings/6e41288d-1329-48e4-a038-52b433edf40a"",
        ""created_at"": ""2016-03-30T10:15:38Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""6c333161-d634-4f0d-a9ab-499239f22e11"",
        ""service_instance_guid"": ""6c333161-d634-4f0d-a9ab-499239f22e11"",
        ""credentials"": {
          ""creds-key-60"": ""creds-val-60""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/b8c27b82-d961-4e05-a146-fccacc460402"",
        ""service_instance_url"": ""/v2/service_instances/4e78e6c3-b5d3-478d-8cdc-53fe672c63c9""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceBindingsForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("6c333161-d634-4f0d-a9ab-499239f22e11", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/6e41288d-1329-48e4-a038-52b433edf40a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:38Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("6c333161-d634-4f0d-a9ab-499239f22e11", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("6c333161-d634-4f0d-a9ab-499239f22e11", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/b8c27b82-d961-4e05-a146-fccacc460402", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/4e78e6c3-b5d3-478d-8cdc-53fe672c63c9", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf"",
    ""url"": ""/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911"",
    ""created_at"": ""2016-03-30T10:15:37Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-2330"",
    ""credentials"": {
      ""creds-key-56"": ""creds-val-56""
    },
    ""service_plan_guid"": ""76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf"",
    ""space_guid"": ""76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""update"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-03-30T10:15:37Z"",
      ""created_at"": ""2016-03-30T10:15:37Z""
    },
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/e4264528-2304-4bab-a43c-8038df640707"",
    ""service_plan_url"": ""/v2/service_plans/e09ac25c-39bd-44ee-b8f8-5a610b9a75cd"",
    ""service_bindings_url"": ""/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/service_keys"",
    ""routes_url"": ""/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceInstanceRequest value = new UpdateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.UpdateServiceInstance(guid, value).Result;


                Assert.AreEqual("76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-03-30T10:15:37Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-2330", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("76a04acb-1fd8-4dc8-9a30-ad1edd77f8cf", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/e4264528-2304-4bab-a43c-8038df640707", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/e09ac25c-39bd-44ee-b8f8-5a610b9a75cd", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/0115aa6b-cbd5-4794-8216-38766c590911/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

    }
}