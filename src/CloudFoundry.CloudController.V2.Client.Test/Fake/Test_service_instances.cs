//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceInstancesEndpoint
{
        [TestMethod]
        public void BindingServiceInstanceToRouteExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2c4c7876-624e-4775-87ab-37ec46763d7c"",
    ""url"": ""/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf"",
    ""created_at"": ""2016-07-07T09:16:56Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1290"",
    ""credentials"": {
      ""creds-key-203"": ""creds-val-203""
    },
    ""service_plan_guid"": ""2c4c7876-624e-4775-87ab-37ec46763d7c"",
    ""space_guid"": ""2c4c7876-624e-4775-87ab-37ec46763d7c"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": null,
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/802e049f-8d7f-4806-b79c-fc263804e239"",
    ""service_plan_url"": ""/v2/service_plans/15898195-a5c2-4e8d-acdd-f0498a5d4605"",
    ""service_bindings_url"": ""/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/service_keys"",
    ""routes_url"": ""/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                BindingServiceInstanceToRouteExperimentalRequest value = new BindingServiceInstanceToRouteExperimentalRequest();


                var obj = cfClient.ServiceInstances.BindingServiceInstanceToRouteExperimental(service_instance_guid, route_guid, value).Result;


                Assert.AreEqual("2c4c7876-624e-4775-87ab-37ec46763d7c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:56Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1290", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("2c4c7876-624e-4775-87ab-37ec46763d7c", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("2c4c7876-624e-4775-87ab-37ec46763d7c", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LastOperation), true);
                Assert.AreEqual("/v2/spaces/802e049f-8d7f-4806-b79c-fc263804e239", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/15898195-a5c2-4e8d-acdd-f0498a5d4605", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/be254ce8-d3cc-4fb3-95a0-fa8a1bd90caf/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CreateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""5f0d4ceb-d731-40f6-aa0a-77be4733d18b"",
    ""url"": ""/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2"",
    ""created_at"": ""2016-07-07T09:16:57Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-service-instance"",
    ""credentials"": {

    },
    ""service_plan_guid"": ""5f0d4ceb-d731-40f6-aa0a-77be4733d18b"",
    ""space_guid"": ""5f0d4ceb-d731-40f6-aa0a-77be4733d18b"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": null,
      ""created_at"": ""2016-07-07T09:16:57Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/89b710c8-596f-46f5-99c6-3eed01fb4b30"",
    ""service_plan_url"": ""/v2/service_plans/8805a67d-ee3a-4cd2-a825-b41c87846d3a"",
    ""service_bindings_url"": ""/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/service_keys"",
    ""routes_url"": ""/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceInstanceRequest value = new CreateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.CreateServiceInstance(value).Result;


                Assert.AreEqual("5f0d4ceb-d731-40f6-aa0a-77be4733d18b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-service-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5f0d4ceb-d731-40f6-aa0a-77be4733d18b", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("5f0d4ceb-d731-40f6-aa0a-77be4733d18b", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/89b710c8-596f-46f5-99c6-3eed01fb4b30", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/8805a67d-ee3a-4cd2-a825-b41c87846d3a", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/5712b6fd-8dd7-4320-b5fc-18ea53b0afd2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""9dcd3c6c-5273-4b61-a088-a0347cc8c95e"",
    ""url"": ""/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502"",
    ""created_at"": ""2016-07-07T09:16:57Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1326"",
    ""credentials"": {
      ""creds-key-218"": ""creds-val-218""
    },
    ""service_plan_guid"": ""9dcd3c6c-5273-4b61-a088-a0347cc8c95e"",
    ""space_guid"": ""9dcd3c6c-5273-4b61-a088-a0347cc8c95e"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""delete"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-07-07T09:16:57Z"",
      ""created_at"": ""2016-07-07T09:16:57Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/b42b0204-e5e3-4165-9277-01365cf780b2"",
    ""service_plan_url"": ""/v2/service_plans/fa3ce6ce-7443-46d4-afa5-99d34aae5374"",
    ""service_bindings_url"": ""/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/service_keys"",
    ""routes_url"": ""/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.DeleteServiceInstance(guid).Result;


                Assert.AreEqual("9dcd3c6c-5273-4b61-a088-a0347cc8c95e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1326", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("9dcd3c6c-5273-4b61-a088-a0347cc8c95e", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("9dcd3c6c-5273-4b61-a088-a0347cc8c95e", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/b42b0204-e5e3-4165-9277-01365cf780b2", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/fa3ce6ce-7443-46d4-afa5-99d34aae5374", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/c9679c2c-419b-4c5c-8ed5-7e4328a66502/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9204b3fa-b791-44ef-99ff-b8d9333faa3e"",
        ""url"": ""/v2/routes/2ed02837-8f8a-44ae-81dc-975234710714"",
        ""created_at"": ""2016-07-07T09:16:57Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-5"",
        ""path"": """",
        ""domain_guid"": ""9204b3fa-b791-44ef-99ff-b8d9333faa3e"",
        ""space_guid"": ""9204b3fa-b791-44ef-99ff-b8d9333faa3e"",
        ""service_instance_guid"": ""9204b3fa-b791-44ef-99ff-b8d9333faa3e"",
        ""port"": 0,
        ""domain_url"": ""/v2/domains/a328a30c-5b64-44c4-8ba6-456d7b96d8a9"",
        ""space_url"": ""/v2/spaces/f692ae36-daa0-4fa0-8ac7-6fba6532459d"",
        ""service_instance_url"": ""/v2/service_instances/f2937791-654d-4c9b-bbc5-a7c1e875080b"",
        ""apps_url"": ""/v2/routes/2ed02837-8f8a-44ae-81dc-975234710714/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllRoutesForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9204b3fa-b791-44ef-99ff-b8d9333faa3e", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/2ed02837-8f8a-44ae-81dc-975234710714", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-5", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("9204b3fa-b791-44ef-99ff-b8d9333faa3e", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("9204b3fa-b791-44ef-99ff-b8d9333faa3e", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("9204b3fa-b791-44ef-99ff-b8d9333faa3e", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/a328a30c-5b64-44c4-8ba6-456d7b96d8a9", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/f692ae36-daa0-4fa0-8ac7-6fba6532459d", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/f2937791-654d-4c9b-bbc5-a7c1e875080b", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/2ed02837-8f8a-44ae-81dc-975234710714/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""51f3dbcb-c719-4bde-84ee-34ae7f0bea50"",
        ""url"": ""/v2/service_bindings/edeff2eb-9934-42fe-a3e6-e64ce6d06504"",
        ""created_at"": ""2016-07-07T09:16:56Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""51f3dbcb-c719-4bde-84ee-34ae7f0bea50"",
        ""service_instance_guid"": ""51f3dbcb-c719-4bde-84ee-34ae7f0bea50"",
        ""credentials"": {
          ""creds-key-197"": ""creds-val-197""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/e480577f-d129-4367-8e1f-a19382767c9c"",
        ""service_instance_url"": ""/v2/service_instances/66cf789a-1407-4460-8b4d-bc6048fca08c""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceBindingsForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("51f3dbcb-c719-4bde-84ee-34ae7f0bea50", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/edeff2eb-9934-42fe-a3e6-e64ce6d06504", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:56Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("51f3dbcb-c719-4bde-84ee-34ae7f0bea50", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("51f3dbcb-c719-4bde-84ee-34ae7f0bea50", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/e480577f-d129-4367-8e1f-a19382767c9c", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/66cf789a-1407-4460-8b4d-bc6048fca08c", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0c6c0ff8-d93e-417f-ac61-33b6c4653ec3"",
        ""url"": ""/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30"",
        ""created_at"": ""2016-07-07T09:16:57Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1338"",
        ""credentials"": {
          ""creds-key-224"": ""creds-val-224""
        },
        ""service_plan_guid"": ""0c6c0ff8-d93e-417f-ac61-33b6c4653ec3"",
        ""space_guid"": ""0c6c0ff8-d93e-417f-ac61-33b6c4653ec3"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": {
          ""type"": ""create"",
          ""state"": ""succeeded"",
          ""description"": ""service broker-provided description"",
          ""updated_at"": ""2016-07-07T09:16:57Z"",
          ""created_at"": ""2016-07-07T09:16:57Z""
        },
        ""tags"": [
          ""accounting"",
          ""mongodb""
        ],
        ""space_url"": ""/v2/spaces/7894aa1e-de22-4ef9-a660-8b47ae4654d0"",
        ""service_plan_url"": ""/v2/service_plans/2397b53e-dca0-4f01-a4b5-c16998a9f66a"",
        ""service_bindings_url"": ""/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/service_keys"",
        ""routes_url"": ""/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceInstances.ListAllServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0c6c0ff8-d93e-417f-ac61-33b6c4653ec3", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1338", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("0c6c0ff8-d93e-417f-ac61-33b6c4653ec3", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("0c6c0ff8-d93e-417f-ac61-33b6c4653ec3", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/7894aa1e-de22-4ef9-a660-8b47ae4654d0", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/2397b53e-dca0-4f01-a4b5-c16998a9f66a", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/412f02d9-a6b5-433f-a1d3-cb9072b8ae30/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""changed_count"": 1
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_plan_guid = Guid.NewGuid();

                MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalRequest value = new MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalRequest();


                var obj = cfClient.ServiceInstances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimental(service_plan_guid, value).Result;


                Assert.AreEqual("1", TestUtil.ToTestableString(obj.ChangedCount), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ee277c9d-7d21-4a93-9457-1f1ae66961b8"",
    ""url"": ""/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910"",
    ""created_at"": ""2016-07-07T09:16:57Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1332"",
    ""credentials"": {
      ""creds-key-221"": ""creds-val-221""
    },
    ""service_plan_guid"": ""ee277c9d-7d21-4a93-9457-1f1ae66961b8"",
    ""space_guid"": ""ee277c9d-7d21-4a93-9457-1f1ae66961b8"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""succeeded"",
      ""description"": ""service broker-provided description"",
      ""updated_at"": ""2016-07-07T09:16:57Z"",
      ""created_at"": ""2016-07-07T09:16:57Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/d9151a75-491c-4c0a-90d0-aee4de0fdbf7"",
    ""service_plan_url"": ""/v2/service_plans/a216f739-175c-40b3-869f-0aee165fc60e"",
    ""service_bindings_url"": ""/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/service_keys"",
    ""routes_url"": ""/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrieveServiceInstance(guid).Result;


                Assert.AreEqual("ee277c9d-7d21-4a93-9457-1f1ae66961b8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1332", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("ee277c9d-7d21-4a93-9457-1f1ae66961b8", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("ee277c9d-7d21-4a93-9457-1f1ae66961b8", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/d9151a75-491c-4c0a-90d0-aee4de0fdbf7", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/a216f739-175c-40b3-869f-0aee165fc60e", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/d6e2888a-97fe-4141-b51f-98a3126c2910/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrievingPermissionsOnServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""manage"": true
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrievingPermissionsOnServiceInstance(guid).Result;


                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Manage), true);

            }
        }

        [TestMethod]
        public void UnbindingServiceInstanceFromRouteExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                UnbindingServiceInstanceFromRouteExperimentalRequest value = new UnbindingServiceInstanceFromRouteExperimentalRequest();


                cfClient.ServiceInstances.UnbindingServiceInstanceFromRouteExperimental(service_instance_guid, route_guid, value).Wait();

            }
        }

        [TestMethod]
        public void UpdateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""81f50859-60a5-4e2c-a848-2e1759aef7f7"",
    ""url"": ""/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b"",
    ""created_at"": ""2016-07-07T09:16:57Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1310"",
    ""credentials"": {
      ""creds-key-212"": ""creds-val-212""
    },
    ""service_plan_guid"": ""81f50859-60a5-4e2c-a848-2e1759aef7f7"",
    ""space_guid"": ""81f50859-60a5-4e2c-a848-2e1759aef7f7"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""update"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-07-07T09:16:57Z"",
      ""created_at"": ""2016-07-07T09:16:57Z""
    },
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/d5ab48a4-2414-4dcf-801a-355a7ed098eb"",
    ""service_plan_url"": ""/v2/service_plans/21e673e2-9da9-4c9d-ad6e-4fc4f5687439"",
    ""service_bindings_url"": ""/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/service_keys"",
    ""routes_url"": ""/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceInstanceRequest value = new UpdateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.UpdateServiceInstance(guid, value).Result;


                Assert.AreEqual("81f50859-60a5-4e2c-a848-2e1759aef7f7", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-07-07T09:16:57Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1310", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("81f50859-60a5-4e2c-a848-2e1759aef7f7", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("81f50859-60a5-4e2c-a848-2e1759aef7f7", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/d5ab48a4-2414-4dcf-801a-355a7ed098eb", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/21e673e2-9da9-4c9d-ad6e-4fc4f5687439", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/640e4403-ec95-4c4b-9d01-ec2d3050494b/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

    }
}