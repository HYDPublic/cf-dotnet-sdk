//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace CloudFoundry.CloudController.V2.Test.Serialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsTest
    {

        [TestMethod]
        public void TestUpdateOrganizationRequest()
        {
            string json = @"{
  ""name"": ""New Organization Name"",
  ""quota_definition_guid"": ""c0541368-fbbc-46e9-b8f9-19c743be1afb""
}";

            UpdateOrganizationRequest request = new UpdateOrganizationRequest();

            request.Name = "New Organization Name";
            request.QuotaDefinitionGuid = new Guid("c0541368-fbbc-46e9-b8f9-19c743be1afb");
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestAssociateAuditorWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""user@example.com""
}";

            AssociateAuditorWithOrganizationByUsernameRequest request = new AssociateAuditorWithOrganizationByUsernameRequest();

            request.Username = "user@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestAssociateUserWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""user@example.com""
}";

            AssociateUserWithOrganizationByUsernameRequest request = new AssociateUserWithOrganizationByUsernameRequest();

            request.Username = "user@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestRemoveManagerWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""manage@example.com""
}";

            RemoveManagerWithOrganizationByUsernameRequest request = new RemoveManagerWithOrganizationByUsernameRequest();

            request.Username = "manage@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestRemoveBillingManagerWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""billing_manager@example.com""
}";

            RemoveBillingManagerWithOrganizationByUsernameRequest request = new RemoveBillingManagerWithOrganizationByUsernameRequest();

            request.Username = "billing_manager@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestRemoveAuditorWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""auditor@example.com""
}";

            RemoveAuditorWithOrganizationByUsernameRequest request = new RemoveAuditorWithOrganizationByUsernameRequest();

            request.Username = "auditor@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestAssociateManagerWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""user@example.com""
}";

            AssociateManagerWithOrganizationByUsernameRequest request = new AssociateManagerWithOrganizationByUsernameRequest();

            request.Username = "user@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestAssociateBillingManagerWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""user@example.com""
}";

            AssociateBillingManagerWithOrganizationByUsernameRequest request = new AssociateBillingManagerWithOrganizationByUsernameRequest();

            request.Username = "user@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestRemoveUserWithOrganizationByUsernameRequest()
        {
            string json = @"{
  ""username"": ""user@example.com""
}";

            RemoveUserWithOrganizationByUsernameRequest request = new RemoveUserWithOrganizationByUsernameRequest();

            request.Username = "user@example.com";
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
        [TestMethod]
        public void TestCreateOrganizationRequest()
        {
            string json = @"{
  ""name"": ""my-org-name"",
  ""quota_definition_guid"": ""40c3762a-eda4-4e96-b449-25a4eb2ba281""
}";

            CreateOrganizationRequest request = new CreateOrganizationRequest();

            request.Name = "my-org-name";
            request.QuotaDefinitionGuid = new Guid("40c3762a-eda4-4e96-b449-25a4eb2ba281");
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(TestUtil.ToUnformatedJsonString(json), result);
        }
    }
}
