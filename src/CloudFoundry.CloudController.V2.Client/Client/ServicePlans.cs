//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.Common;
using CloudFoundry.CloudController.V2.Client.Data;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;


namespace CloudFoundry.CloudController.V2.Client
{
    /// <summary>
    /// ServicePlans Endpoint
    /// </summary>
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public partial class ServicePlansEndpoint : CloudFoundry.CloudController.V2.Client.Base.AbstractServicePlansEndpoint
    {
        internal ServicePlansEndpoint(CloudFoundryClient client) : base()
        {
            this.Client = client;
        }    
    }
}

namespace CloudFoundry.CloudController.V2.Client.Base
{

    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public abstract class AbstractServicePlansEndpoint : BaseEndpoint
    {

        /// <summary>
        /// Updating a Service Plan (deprecated)
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/updating_a_service_plan_(deprecated).html"</para>
        /// </summary>
        public async Task<UpdateServicePlanDeprecatedResponse> UpdateServicePlanDeprecated(UpdateServicePlanDeprecatedRequest value)
        {
            string route = "/v2/service_plans";
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route;
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Put;
            client.Headers.Add(await BuildAuthenticationHeader());
            client.ContentType = "application/x-www-form-urlencoded";
            client.Content = JsonConvert.SerializeObject(value).ConvertToStream();
            var expectedReturnStatus = 201;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<UpdateServicePlanDeprecatedResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// Delete a Particular Service Plans
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/delete_a_particular_service_plans.html"</para>
        /// </summary>
        public async Task DeleteServicePlans(Guid? guid)
        {
            string route = string.Format("/v2/service_plans/{0}", guid);
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route;
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Delete;
            client.Headers.Add(await BuildAuthenticationHeader());
            client.ContentType = "application/x-www-form-urlencoded";
            var expectedReturnStatus = 204;
            var response = await this.SendAsync(client, expectedReturnStatus);
        }

        /// <summary>
        /// Creating a Service Plan (deprecated)
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/creating_a_service_plan_(deprecated).html"</para>
        /// </summary>
        public async Task<CreateServicePlanDeprecatedResponse> CreateServicePlanDeprecated(CreateServicePlanDeprecatedRequest value)
        {
            string route = "/v2/service_plans";
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route;
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Post;
            client.Headers.Add(await BuildAuthenticationHeader());
            client.ContentType = "application/x-www-form-urlencoded";
            client.Content = JsonConvert.SerializeObject(value).ConvertToStream();
            var expectedReturnStatus = 201;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<CreateServicePlanDeprecatedResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// List all Service Instances for the Service Plan
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/list_all_service_instances_for_the_service_plan.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllServiceInstancesForServicePlanResponse>> ListAllServiceInstancesForServicePlan(Guid? guid)
        {
            return await ListAllServiceInstancesForServicePlan(guid, new RequestOptions());
        }

        /// <summary>
        /// List all Service Instances for the Service Plan
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/list_all_service_instances_for_the_service_plan.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllServiceInstancesForServicePlanResponse>> ListAllServiceInstancesForServicePlan(Guid? guid, RequestOptions options)
        {
            string route = string.Format("/v2/service_plans/{0}/service_instances", guid);
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route + options.ToString();
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Get;
            client.Headers.Add(await BuildAuthenticationHeader());
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<ListAllServiceInstancesForServicePlanResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// Retrieve a Particular Service Plan
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/retrieve_a_particular_service_plan.html"</para>
        /// </summary>
        public async Task<RetrieveServicePlanResponse> RetrieveServicePlan(Guid? guid)
        {
            string route = string.Format("/v2/service_plans/{0}", guid);
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route;
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Get;
            client.Headers.Add(await BuildAuthenticationHeader());
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializeJson<RetrieveServicePlanResponse>(await response.ReadContentAsStringAsync());
        }

        /// <summary>
        /// List all Service Plans
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/list_all_service_plans.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllServicePlansResponse>> ListAllServicePlans()
        {
            return await ListAllServicePlans(new RequestOptions());
        }

        /// <summary>
        /// List all Service Plans
        /// <para>For detailed information, see online documentation at: "http://apidocs.cloudfoundry.org/195/service_plans/list_all_service_plans.html"</para>
        /// </summary>
        public async Task<PagedResponseCollection<ListAllServicePlansResponse>> ListAllServicePlans(RequestOptions options)
        {
            string route = "/v2/service_plans";
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route + options.ToString();
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = HttpMethod.Get;
            client.Headers.Add(await BuildAuthenticationHeader());
            var expectedReturnStatus = 200;
            var response = await this.SendAsync(client, expectedReturnStatus);
            return Utilities.DeserializePage<ListAllServicePlansResponse>(await response.ReadContentAsStringAsync());
        }
    }
}